
Sampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005248  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080053d4  080053d4  000063d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800541c  0800541c  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005424  08005424  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005424  08005424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005428  08005428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800542c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08005438  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005438  00007164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001545e  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2d  00000000  00000000  0001c49a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001eec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f00  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e31  00000000  00000000  00021108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151fb  00000000  00000000  00042f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c09  00000000  00000000  00058134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ed3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000525c  00000000  00000000  0012ed80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00133fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080053bc 	.word	0x080053bc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080053bc 	.word	0x080053bc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb8d 	bl	8000c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f814 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f958 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_TIM2_Init>
  MX_ADC1_Init();
 800050c:	f000 f870 	bl	80005f0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f922 	bl	8000758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim2);
 8000514:	4803      	ldr	r0, [pc, #12]	@ (8000524 <main+0x2c>)
 8000516:	f003 fb43 	bl	8003ba0 <HAL_TIM_Base_Start>
    HAL_ADC_Start_IT(&hadc1);
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <main+0x30>)
 800051c:	f000 ff0e 	bl	800133c <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x28>
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	@ 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	@ 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 ff11 	bl	8005362 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000552:	f002 f947 	bl	80027e4 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f9ba 	bl	80008d4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f002 f922 	bl	80027a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <SystemClock_Config+0xc0>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <SystemClock_Config+0xc0>)
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	@ 0x60
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000594:	2310      	movs	r3, #16
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f971 	bl	8002890 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f98e 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fd71 	bl	80030b8 <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005dc:	f000 f97a 	bl	80008d4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e0:	f003 f984 	bl	80038ec <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	@ 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000606:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000608:	4a2a      	ldr	r2, [pc, #168]	@ (80006b4 <MX_ADC1_Init+0xc4>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000614:	2210      	movs	r2, #16
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000626:	2204      	movs	r2, #4
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000644:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000646:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800064e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800066c:	f000 fd24 	bl	80010b8 <HAL_ADC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f92d 	bl	80008d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_ADC1_Init+0xc8>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	@ 0x7f
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000698:	f001 f8da 	bl	8001850 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006a2:	f000 f917 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	50040000 	.word	0x50040000
 80006b8:	19200040 	.word	0x19200040

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006e4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006f2:	2213      	movs	r2, #19
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <MX_TIM2_Init+0x98>)
 8000704:	f003 f9f4 	bl	8003af0 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800070e:	f000 f8e1 	bl	80008d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_TIM2_Init+0x98>)
 8000720:	f003 fb91 	bl	8003e46 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800072a:	f000 f8d3 	bl	80008d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800072e:	2320      	movs	r3, #32
 8000730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_TIM2_Init+0x98>)
 800073c:	f003 fd88 	bl	8004250 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 f8c5 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000008c 	.word	0x2000008c

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART1_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800079c:	f003 fddc 	bl	8004358 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f895 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a28      	ldr	r2, [pc, #160]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	481d      	ldr	r0, [pc, #116]	@ (8000890 <MX_GPIO_Init+0xd8>)
 800081c:	f001 ffac 	bl	8002778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000820:	2304      	movs	r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083e:	f001 fe31 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000854:	2303      	movs	r3, #3
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f001 fe1f 	bl	80024a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd8>)
 800087e:	f001 fe11 	bl	80024a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint8_t sampledValue = HAL_ADC_GetValue(&hadc1);
 800089c:	480b      	ldr	r0, [pc, #44]	@ (80008cc <HAL_ADC_ConvCpltCallback+0x38>)
 800089e:	f000 fe01 	bl	80014a4 <HAL_ADC_GetValue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	73fb      	strb	r3, [r7, #15]
    if (sampledValue > 155) {
 80008a6:	7bfb      	ldrb	r3, [r7, #15]
 80008a8:	2b9b      	cmp	r3, #155	@ 0x9b
 80008aa:	d905      	bls.n	80008b8 <HAL_ADC_ConvCpltCallback+0x24>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	2108      	movs	r1, #8
 80008b0:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008b2:	f001 ff61 	bl	8002778 <HAL_GPIO_WritePin>
    } else {
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
    }
    // HAL_UART_Transmit(&huart1, &sampledValue, 1, HAL_MAX_DELAY);
}
 80008b6:	e004      	b.n	80008c2 <HAL_ADC_ConvCpltCallback+0x2e>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2108      	movs	r1, #8
 80008bc:	4804      	ldr	r0, [pc, #16]	@ (80008d0 <HAL_ADC_ConvCpltCallback+0x3c>)
 80008be:	f001 ff5b 	bl	8002778 <HAL_GPIO_WritePin>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000028 	.word	0x20000028
 80008d0:	48000400 	.word	0x48000400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <Error_Handler+0x8>

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09e      	sub	sp, #120	@ 0x78
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
 800093e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	2254      	movs	r2, #84	@ 0x54
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fd0a 	bl	8005362 <memset>
  if(hadc->Instance==ADC1)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a29      	ldr	r2, [pc, #164]	@ (80009f8 <HAL_ADC_MspInit+0xd0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d14b      	bne.n	80009f0 <HAL_ADC_MspInit+0xc8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000958:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800095c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800095e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000962:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000964:	2301      	movs	r3, #1
 8000966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800096c:	2310      	movs	r3, #16
 800096e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000970:	2307      	movs	r3, #7
 8000972:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000974:	2302      	movs	r3, #2
 8000976:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000978:	2302      	movs	r3, #2
 800097a:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800097c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4618      	mov	r0, r3
 8000988:	f002 fdba 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000992:	f7ff ff9f 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000996:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	4a18      	ldr	r2, [pc, #96]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 800099c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a2:	4b16      	ldr	r3, [pc, #88]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b13      	ldr	r3, [pc, #76]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	4a12      	ldr	r2, [pc, #72]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_ADC_MspInit+0xd4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009c6:	2302      	movs	r3, #2
 80009c8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009ca:	230b      	movs	r3, #11
 80009cc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009dc:	f001 fd62 	bl	80024a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	2012      	movs	r0, #18
 80009e6:	f001 fca8 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009ea:	2012      	movs	r0, #18
 80009ec:	f001 fcc1 	bl	8002372 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009f0:	bf00      	nop
 80009f2:	3778      	adds	r7, #120	@ 0x78
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	50040000 	.word	0x50040000
 80009fc:	40021000 	.word	0x40021000

08000a00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a10:	d113      	bne.n	8000a3a <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a12:	4b0c      	ldr	r3, [pc, #48]	@ (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a1e:	4b09      	ldr	r3, [pc, #36]	@ (8000a44 <HAL_TIM_Base_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	201c      	movs	r0, #28
 8000a30:	f001 fc83 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a34:	201c      	movs	r0, #28
 8000a36:	f001 fc9c 	bl	8002372 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a3a:	bf00      	nop
 8000a3c:	3710      	adds	r7, #16
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b09e      	sub	sp, #120	@ 0x78
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	2254      	movs	r2, #84	@ 0x54
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f004 fc7a 	bl	8005362 <memset>
  if(huart->Instance==USART1)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <HAL_UART_MspInit+0xb8>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d13f      	bne.n	8000af8 <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4618      	mov	r0, r3
 8000a86:	f002 fd3b 	bl	8003500 <HAL_RCCEx_PeriphCLKConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a90:	f7ff ff20 	bl	80008d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a94:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a98:	4a1a      	ldr	r2, [pc, #104]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9e:	6613      	str	r3, [r2, #96]	@ 0x60
 8000aa0:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aac:	4b15      	ldr	r3, [pc, #84]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <HAL_UART_MspInit+0xbc>)
 8000aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Sample_Out_Pin|GPIO_PIN_10;
 8000ac4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ac8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ae4:	f001 fcde 	bl	80024a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2100      	movs	r1, #0
 8000aec:	2025      	movs	r0, #37	@ 0x25
 8000aee:	f001 fc24 	bl	800233a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000af2:	2025      	movs	r0, #37	@ 0x25
 8000af4:	f001 fc3d 	bl	8002372 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000af8:	bf00      	nop
 8000afa:	3778      	adds	r7, #120	@ 0x78
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40013800 	.word	0x40013800
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <NMI_Handler+0x4>

08000b10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <HardFault_Handler+0x4>

08000b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <MemManage_Handler+0x4>

08000b20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5e:	f000 f8b1 	bl	8000cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b6c:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <ADC1_IRQHandler+0x10>)
 8000b6e:	f000 fca6 	bl	80014be <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000028 	.word	0x20000028

08000b7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <TIM2_IRQHandler+0x10>)
 8000b82:	f003 f859 	bl	8003c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000008c 	.word	0x2000008c

08000b90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <USART1_IRQHandler+0x10>)
 8000b96:	f003 fc2d 	bl	80043f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200000d8 	.word	0x200000d8

08000ba4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <SystemInit+0x20>)
 8000baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bae:	4a05      	ldr	r2, [pc, #20]	@ (8000bc4 <SystemInit+0x20>)
 8000bb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00

08000bc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bcc:	f7ff ffea 	bl	8000ba4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bd0:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bd2:	490d      	ldr	r1, [pc, #52]	@ (8000c08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <LoopForever+0xe>)
  movs r3, #0
 8000bd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd8:	e002      	b.n	8000be0 <LoopCopyDataInit>

08000bda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bde:	3304      	adds	r3, #4

08000be0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000be0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000be2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000be4:	d3f9      	bcc.n	8000bda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000be6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be8:	4c0a      	ldr	r4, [pc, #40]	@ (8000c14 <LoopForever+0x16>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bec:	e001      	b.n	8000bf2 <LoopFillZerobss>

08000bee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bf0:	3204      	adds	r2, #4

08000bf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bf4:	d3fb      	bcc.n	8000bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bf6:	f004 fbbd 	bl	8005374 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bfa:	f7ff fc7d 	bl	80004f8 <main>

08000bfe <LoopForever>:

LoopForever:
    b LoopForever
 8000bfe:	e7fe      	b.n	8000bfe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c00:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c08:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c0c:	0800542c 	.word	0x0800542c
  ldr r2, =_sbss
 8000c10:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c14:	20000164 	.word	0x20000164

08000c18 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c18:	e7fe      	b.n	8000c18 <CAN1_RX0_IRQHandler>

08000c1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c24:	2003      	movs	r0, #3
 8000c26:	f001 fb7d 	bl	8002324 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f80e 	bl	8000c4c <HAL_InitTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d002      	beq.n	8000c3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	71fb      	strb	r3, [r7, #7]
 8000c3a:	e001      	b.n	8000c40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c3c:	f7ff fe50 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c40:	79fb      	ldrb	r3, [r7, #7]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
	...

08000c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c58:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d023      	beq.n	8000ca8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c60:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <HAL_InitTick+0x70>)
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b14      	ldr	r3, [pc, #80]	@ (8000cb8 <HAL_InitTick+0x6c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4619      	mov	r1, r3
 8000c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fb89 	bl	800238e <HAL_SYSTICK_Config>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d10f      	bne.n	8000ca2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d809      	bhi.n	8000c9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f001 fb53 	bl	800233a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c94:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc0 <HAL_InitTick+0x74>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
 8000c9a:	e007      	b.n	8000cac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	e004      	b.n	8000cac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73fb      	strb	r3, [r7, #15]
 8000ca6:	e001      	b.n	8000cac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	20000000 	.word	0x20000000
 8000cc0:	20000004 	.word	0x20000004

08000cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_IncTick+0x20>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	461a      	mov	r2, r3
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <HAL_IncTick+0x24>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000008 	.word	0x20000008
 8000ce8:	20000160 	.word	0x20000160

08000cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf0:	4b03      	ldr	r3, [pc, #12]	@ (8000d00 <HAL_GetTick+0x14>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000160 	.word	0x20000160

08000d04 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	431a      	orrs	r2, r3
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	689b      	ldr	r3, [r3, #8]
 8000d38:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	3360      	adds	r3, #96	@ 0x60
 8000d7e:	461a      	mov	r2, r3
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	4413      	add	r3, r2
 8000d86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <LL_ADC_SetOffset+0x44>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	687a      	ldr	r2, [r7, #4]
 8000d92:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d96:	683a      	ldr	r2, [r7, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000da4:	bf00      	nop
 8000da6:	371c      	adds	r7, #28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	03fff000 	.word	0x03fff000

08000db4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3360      	adds	r3, #96	@ 0x60
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	4413      	add	r3, r2
 8000dca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b087      	sub	sp, #28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	3360      	adds	r3, #96	@ 0x60
 8000df0:	461a      	mov	r2, r3
 8000df2:	68bb      	ldr	r3, [r7, #8]
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	4413      	add	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e000      	b.n	8000e30 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e2e:	2300      	movs	r3, #0
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b087      	sub	sp, #28
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	60f8      	str	r0, [r7, #12]
 8000e44:	60b9      	str	r1, [r7, #8]
 8000e46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	3330      	adds	r3, #48	@ 0x30
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	0a1b      	lsrs	r3, r3, #8
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	4413      	add	r3, r2
 8000e5a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	f003 031f 	and.w	r3, r3, #31
 8000e66:	211f      	movs	r1, #31
 8000e68:	fa01 f303 	lsl.w	r3, r1, r3
 8000e6c:	43db      	mvns	r3, r3
 8000e6e:	401a      	ands	r2, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	0e9b      	lsrs	r3, r3, #26
 8000e74:	f003 011f 	and.w	r1, r3, #31
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	f003 031f 	and.w	r3, r3, #31
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	431a      	orrs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e88:	bf00      	nop
 8000e8a:	371c      	adds	r7, #28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ea0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d101      	bne.n	8000eac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e000      	b.n	8000eae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr

08000eba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b087      	sub	sp, #28
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	3314      	adds	r3, #20
 8000eca:	461a      	mov	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0e5b      	lsrs	r3, r3, #25
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	4413      	add	r3, r2
 8000ed8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0d1b      	lsrs	r3, r3, #20
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	2107      	movs	r1, #7
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	401a      	ands	r2, r3
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	0d1b      	lsrs	r3, r3, #20
 8000ef4:	f003 031f 	and.w	r3, r3, #31
 8000ef8:	6879      	ldr	r1, [r7, #4]
 8000efa:	fa01 f303 	lsl.w	r3, r1, r3
 8000efe:	431a      	orrs	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000f04:	bf00      	nop
 8000f06:	371c      	adds	r7, #28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f003 0318 	and.w	r3, r3, #24
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f34:	40d9      	lsrs	r1, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	400b      	ands	r3, r1
 8000f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f3e:	431a      	orrs	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f46:	bf00      	nop
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0007ffff 	.word	0x0007ffff

08000f58 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f68:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6093      	str	r3, [r2, #8]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr

08000f7c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f90:	d101      	bne.n	8000f96 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fb4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fb8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fe0:	d101      	bne.n	8000fe6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	e000      	b.n	8000fe8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001004:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001008:	f043 0201 	orr.w	r2, r3, #1
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f003 0301 	and.w	r3, r3, #1
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <LL_ADC_IsEnabled+0x18>
 8001030:	2301      	movs	r3, #1
 8001032:	e000      	b.n	8001036 <LL_ADC_IsEnabled+0x1a>
 8001034:	2300      	movs	r3, #0
}
 8001036:	4618      	mov	r0, r3
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001042:	b480      	push	{r7}
 8001044:	b083      	sub	sp, #12
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001052:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001056:	f043 0204 	orr.w	r2, r3, #4
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 0304 	and.w	r3, r3, #4
 800107a:	2b04      	cmp	r3, #4
 800107c:	d101      	bne.n	8001082 <LL_ADC_REG_IsConversionOngoing+0x18>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f003 0308 	and.w	r3, r3, #8
 80010a0:	2b08      	cmp	r3, #8
 80010a2:	d101      	bne.n	80010a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
	...

080010b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e126      	b.n	8001320 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d109      	bne.n	80010f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff fc21 	bl	8000928 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff3f 	bl	8000f7c <LL_ADC_IsDeepPowerDownEnabled>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d004      	beq.n	800110e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff25 	bl	8000f58 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff5a 	bl	8000fcc <LL_ADC_IsInternalRegulatorEnabled>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d115      	bne.n	800114a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ff3e 	bl	8000fa4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001128:	4b7f      	ldr	r3, [pc, #508]	@ (8001328 <HAL_ADC_Init+0x270>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	099b      	lsrs	r3, r3, #6
 800112e:	4a7f      	ldr	r2, [pc, #508]	@ (800132c <HAL_ADC_Init+0x274>)
 8001130:	fba2 2303 	umull	r2, r3, r2, r3
 8001134:	099b      	lsrs	r3, r3, #6
 8001136:	3301      	adds	r3, #1
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800113c:	e002      	b.n	8001144 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	3b01      	subs	r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ff3c 	bl	8000fcc <LL_ADC_IsInternalRegulatorEnabled>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10d      	bne.n	8001176 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800115e:	f043 0210 	orr.w	r2, r3, #16
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800116a:	f043 0201 	orr.w	r2, r3, #1
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff75 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001180:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 80bf 	bne.w	800130e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	2b00      	cmp	r3, #0
 8001194:	f040 80bb 	bne.w	800130e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800119c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80011a0:	f043 0202 	orr.w	r2, r3, #2
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff35 	bl	800101c <LL_ADC_IsEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d10b      	bne.n	80011d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011b8:	485d      	ldr	r0, [pc, #372]	@ (8001330 <HAL_ADC_Init+0x278>)
 80011ba:	f7ff ff2f 	bl	800101c <LL_ADC_IsEnabled>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4619      	mov	r1, r3
 80011ca:	485a      	ldr	r0, [pc, #360]	@ (8001334 <HAL_ADC_Init+0x27c>)
 80011cc:	f7ff fd9a 	bl	8000d04 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7e5b      	ldrb	r3, [r3, #25]
 80011d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011f0:	4313      	orrs	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d106      	bne.n	800120c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001202:	3b01      	subs	r3, #1
 8001204:	045b      	lsls	r3, r3, #17
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001210:	2b00      	cmp	r3, #0
 8001212:	d009      	beq.n	8001228 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001218:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001220:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <HAL_ADC_Init+0x280>)
 8001230:	4013      	ands	r3, r2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	69b9      	ldr	r1, [r7, #24]
 8001238:	430b      	orrs	r3, r1
 800123a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff25 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 8001246:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d13d      	bne.n	80012ca <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d13a      	bne.n	80012ca <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001258:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001260:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001270:	f023 0302 	bic.w	r3, r3, #2
 8001274:	687a      	ldr	r2, [r7, #4]
 8001276:	6812      	ldr	r2, [r2, #0]
 8001278:	69b9      	ldr	r1, [r7, #24]
 800127a:	430b      	orrs	r3, r1
 800127c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001284:	2b01      	cmp	r3, #1
 8001286:	d118      	bne.n	80012ba <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001292:	f023 0304 	bic.w	r3, r3, #4
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800129e:	4311      	orrs	r1, r2
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80012a4:	4311      	orrs	r1, r2
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80012aa:	430a      	orrs	r2, r1
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	611a      	str	r2, [r3, #16]
 80012b8:	e007      	b.n	80012ca <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	691a      	ldr	r2, [r3, #16]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d10c      	bne.n	80012ec <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d8:	f023 010f 	bic.w	r1, r3, #15
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	430a      	orrs	r2, r1
 80012e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80012ea:	e007      	b.n	80012fc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f022 020f 	bic.w	r2, r2, #15
 80012fa:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001300:	f023 0303 	bic.w	r3, r3, #3
 8001304:	f043 0201 	orr.w	r2, r3, #1
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54
 800130c:	e007      	b.n	800131e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001312:	f043 0210 	orr.w	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800131e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3720      	adds	r7, #32
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	053e2d63 	.word	0x053e2d63
 8001330:	50040000 	.word	0x50040000
 8001334:	50040300 	.word	0x50040300
 8001338:	fff0c007 	.word	0xfff0c007

0800133c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe8e 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	f040 80a0 	bne.w	8001496 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <HAL_ADC_Start_IT+0x28>
 8001360:	2302      	movs	r3, #2
 8001362:	e09b      	b.n	800149c <HAL_ADC_Start_IT+0x160>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 fe51 	bl	8002014 <ADC_Enable>
 8001372:	4603      	mov	r3, r0
 8001374:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	2b00      	cmp	r3, #0
 800137a:	f040 8087 	bne.w	800148c <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001382:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001396:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d006      	beq.n	80013ac <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013a2:	f023 0206 	bic.w	r2, r3, #6
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80013aa:	e002      	b.n	80013b2 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2200      	movs	r2, #0
 80013b0:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	221c      	movs	r2, #28
 80013b8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 021c 	bic.w	r2, r2, #28
 80013d0:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b08      	cmp	r3, #8
 80013d8:	d108      	bne.n	80013ec <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f042 0208 	orr.w	r2, r2, #8
 80013e8:	605a      	str	r2, [r3, #4]
          break;
 80013ea:	e008      	b.n	80013fe <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0204 	orr.w	r2, r2, #4
 80013fa:	605a      	str	r2, [r3, #4]
          break;
 80013fc:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001402:	2b00      	cmp	r3, #0
 8001404:	d107      	bne.n	8001416 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685a      	ldr	r2, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f042 0210 	orr.w	r2, r2, #16
 8001414:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d02d      	beq.n	8001480 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001428:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800142c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	2b08      	cmp	r3, #8
 800143a:	d110      	bne.n	800145e <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	685a      	ldr	r2, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0220 	bic.w	r2, r2, #32
 800144a:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800145a:	605a      	str	r2, [r3, #4]
            break;
 800145c:	e010      	b.n	8001480 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800146c:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f042 0220 	orr.w	r2, r2, #32
 800147c:	605a      	str	r2, [r3, #4]
            break;
 800147e:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fddc 	bl	8001042 <LL_ADC_REG_StartConversion>
 800148a:	e006      	b.n	800149a <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001494:	e001      	b.n	800149a <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001496:	2302      	movs	r3, #2
 8001498:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800149a:	7bfb      	ldrb	r3, [r7, #15]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b088      	sub	sp, #32
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d017      	beq.n	8001514 <HAL_ADC_IRQHandler+0x56>
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d012      	beq.n	8001514 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	f003 0310 	and.w	r3, r3, #16
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d105      	bne.n	8001506 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014fe:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 fe32 	bl	8002170 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2202      	movs	r2, #2
 8001512:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d004      	beq.n	8001528 <HAL_ADC_IRQHandler+0x6a>
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	2b00      	cmp	r3, #0
 8001526:	d109      	bne.n	800153c <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800152e:	2b00      	cmp	r3, #0
 8001530:	d05e      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d059      	beq.n	80015f0 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d105      	bne.n	8001554 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800154c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fc5c 	bl	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03e      	beq.n	80015e2 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d135      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0308 	and.w	r3, r3, #8
 8001580:	2b08      	cmp	r3, #8
 8001582:	d12e      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd6e 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11a      	bne.n	80015ca <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 020c 	bic.w	r2, r2, #12
 80015a2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d112      	bne.n	80015e2 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c0:	f043 0201 	orr.w	r2, r3, #1
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	655a      	str	r2, [r3, #84]	@ 0x54
 80015c8:	e00b      	b.n	80015e2 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ce:	f043 0210 	orr.w	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015da:	f043 0201 	orr.w	r2, r3, #1
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f956 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	220c      	movs	r2, #12
 80015ee:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d004      	beq.n	8001604 <HAL_ADC_IRQHandler+0x146>
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0320 	and.w	r3, r3, #32
 8001600:	2b00      	cmp	r3, #0
 8001602:	d109      	bne.n	8001618 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800160a:	2b00      	cmp	r3, #0
 800160c:	d072      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	d06d      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001628:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fc2d 	bl	8000e94 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800163a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fbe8 	bl	8000e16 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001646:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d047      	beq.n	80016e6 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d007      	beq.n	8001670 <HAL_ADC_IRQHandler+0x1b2>
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03f      	beq.n	80016e6 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800166c:	2b00      	cmp	r3, #0
 800166e:	d13a      	bne.n	80016e6 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800167a:	2b40      	cmp	r3, #64	@ 0x40
 800167c:	d133      	bne.n	80016e6 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d12e      	bne.n	80016e6 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fcff 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d11a      	bne.n	80016ce <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80016a6:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d112      	bne.n	80016e6 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c4:	f043 0201 	orr.w	r2, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	655a      	str	r2, [r3, #84]	@ 0x54
 80016cc:	e00b      	b.n	80016e6 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d2:	f043 0210 	orr.w	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016de:	f043 0201 	orr.w	r2, r3, #1
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f000 fd1a 	bl	8002120 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2260      	movs	r2, #96	@ 0x60
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d011      	beq.n	8001722 <HAL_ADC_IRQHandler+0x264>
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001704:	2b00      	cmp	r3, #0
 8001706:	d00c      	beq.n	8001722 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800170c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f000 f886 	bl	8001826 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d012      	beq.n	8001752 <HAL_ADC_IRQHandler+0x294>
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001732:	2b00      	cmp	r3, #0
 8001734:	d00d      	beq.n	8001752 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800173a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fd00 	bl	8002148 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d012      	beq.n	8001782 <HAL_ADC_IRQHandler+0x2c4>
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001762:	2b00      	cmp	r3, #0
 8001764:	d00d      	beq.n	8001782 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800176a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fcf2 	bl	800215c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x324>
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0310 	and.w	r3, r3, #16
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 800179e:	2301      	movs	r3, #1
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e008      	b.n	80017b6 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80017b2:	2301      	movs	r3, #1
 80017b4:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d10e      	bne.n	80017da <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017cc:	f043 0202 	orr.w	r2, r3, #2
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f000 f830 	bl	800183a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2210      	movs	r2, #16
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d018      	beq.n	800181e <HAL_ADC_IRQHandler+0x360>
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d013      	beq.n	800181e <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001806:	f043 0208 	orr.w	r2, r3, #8
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001816:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 fc8b 	bl	8002134 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800181e:	bf00      	nop
 8001820:	3720      	adds	r7, #32
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001826:	b480      	push	{r7}
 8001828:	b083      	sub	sp, #12
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0b6      	sub	sp, #216	@ 0xd8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001860:	2300      	movs	r3, #0
 8001862:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800186a:	2b01      	cmp	r3, #1
 800186c:	d101      	bne.n	8001872 <HAL_ADC_ConfigChannel+0x22>
 800186e:	2302      	movs	r3, #2
 8001870:	e3bb      	b.n	8001fea <HAL_ADC_ConfigChannel+0x79a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fbf3 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 83a0 	bne.w	8001fcc <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b05      	cmp	r3, #5
 800189a:	d824      	bhi.n	80018e6 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	3b02      	subs	r3, #2
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d81b      	bhi.n	80018de <HAL_ADC_ConfigChannel+0x8e>
 80018a6:	a201      	add	r2, pc, #4	@ (adr r2, 80018ac <HAL_ADC_ConfigChannel+0x5c>)
 80018a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	080018c5 	.word	0x080018c5
 80018b4:	080018cd 	.word	0x080018cd
 80018b8:	080018d5 	.word	0x080018d5
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80018bc:	230c      	movs	r3, #12
 80018be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018c2:	e010      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80018c4:	2312      	movs	r3, #18
 80018c6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018ca:	e00c      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80018cc:	2318      	movs	r3, #24
 80018ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018d2:	e008      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018dc:	e003      	b.n	80018e6 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80018de:	2306      	movs	r3, #6
 80018e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018e4:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	461a      	mov	r2, r3
 80018f0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80018f4:	f7ff faa2 	bl	8000e3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff fbb4 	bl	800106a <LL_ADC_REG_IsConversionOngoing>
 8001902:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fbc0 	bl	8001090 <LL_ADC_INJ_IsConversionOngoing>
 8001910:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001914:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001918:	2b00      	cmp	r3, #0
 800191a:	f040 81a4 	bne.w	8001c66 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800191e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 819f 	bne.w	8001c66 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	461a      	mov	r2, r3
 8001936:	f7ff fac0 	bl	8000eba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	08db      	lsrs	r3, r3, #3
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	2b04      	cmp	r3, #4
 800195a:	d00a      	beq.n	8001972 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6818      	ldr	r0, [r3, #0]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	6919      	ldr	r1, [r3, #16]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800196c:	f7ff f9fe 	bl	8000d6c <LL_ADC_SetOffset>
 8001970:	e179      	b.n	8001c66 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff fa1b 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001984:	2b00      	cmp	r3, #0
 8001986:	d10a      	bne.n	800199e <HAL_ADC_ConfigChannel+0x14e>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fa10 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	0e9b      	lsrs	r3, r3, #26
 8001998:	f003 021f 	and.w	r2, r3, #31
 800199c:	e01e      	b.n	80019dc <HAL_ADC_ConfigChannel+0x18c>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2100      	movs	r1, #0
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fa05 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019b4:	fa93 f3a3 	rbit	r3, r3
 80019b8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80019cc:	2320      	movs	r3, #32
 80019ce:	e004      	b.n	80019da <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80019d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x1a4>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0e9b      	lsrs	r3, r3, #26
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	e018      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1d6>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a00:	fa93 f3a3 	rbit	r3, r3
 8001a04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8001a08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a18:	2320      	movs	r3, #32
 8001a1a:	e004      	b.n	8001a26 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a20:	fab3 f383 	clz	r3, r3
 8001a24:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d106      	bne.n	8001a38 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2100      	movs	r1, #0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9d4 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f9b8 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10a      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x214>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2101      	movs	r1, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9ad 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	f003 021f 	and.w	r2, r3, #31
 8001a62:	e01e      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x252>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f9a2 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a7a:	fa93 f3a3 	rbit	r3, r3
 8001a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a86:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a92:	2320      	movs	r3, #32
 8001a94:	e004      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d105      	bne.n	8001aba <HAL_ADC_ConfigChannel+0x26a>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	0e9b      	lsrs	r3, r3, #26
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	e018      	b.n	8001aec <HAL_ADC_ConfigChannel+0x29c>
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001ac6:	fa93 f3a3 	rbit	r3, r3
 8001aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001ace:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ad2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	e004      	b.n	8001aec <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001ae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d106      	bne.n	8001afe <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2200      	movs	r2, #0
 8001af6:	2101      	movs	r1, #1
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f971 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2102      	movs	r1, #2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff f955 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d10a      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x2da>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f94a 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b20:	4603      	mov	r3, r0
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	e01e      	b.n	8001b68 <HAL_ADC_ConfigChannel+0x318>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2102      	movs	r1, #2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff f93f 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b48:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d101      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001b58:	2320      	movs	r3, #32
 8001b5a:	e004      	b.n	8001b66 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b60:	fab3 f383 	clz	r3, r3
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x330>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	0e9b      	lsrs	r3, r3, #26
 8001b7a:	f003 031f 	and.w	r3, r3, #31
 8001b7e:	e014      	b.n	8001baa <HAL_ADC_ConfigChannel+0x35a>
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b88:	fa93 f3a3 	rbit	r3, r3
 8001b8c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b9c:	2320      	movs	r3, #32
 8001b9e:	e004      	b.n	8001baa <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d106      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2102      	movs	r1, #2
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f912 	bl	8000de0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2103      	movs	r1, #3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8f6 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10a      	bne.n	8001be8 <HAL_ADC_ConfigChannel+0x398>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2103      	movs	r1, #3
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff f8eb 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	0e9b      	lsrs	r3, r3, #26
 8001be2:	f003 021f 	and.w	r2, r3, #31
 8001be6:	e017      	b.n	8001c18 <HAL_ADC_ConfigChannel+0x3c8>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2103      	movs	r1, #3
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8e0 	bl	8000db4 <LL_ADC_GetOffsetChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bfa:	fa93 f3a3 	rbit	r3, r3
 8001bfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001c02:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001c0a:	2320      	movs	r3, #32
 8001c0c:	e003      	b.n	8001c16 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c10:	fab3 f383 	clz	r3, r3
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d105      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x3e0>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0e9b      	lsrs	r3, r3, #26
 8001c2a:	f003 031f 	and.w	r3, r3, #31
 8001c2e:	e011      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x404>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c36:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c40:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c48:	2320      	movs	r3, #32
 8001c4a:	e003      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c4e:	fab3 f383 	clz	r3, r3
 8001c52:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d106      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2103      	movs	r1, #3
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f8bd 	bl	8000de0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f9d6 	bl	800101c <LL_ADC_IsEnabled>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f040 8140 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6818      	ldr	r0, [r3, #0]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	6819      	ldr	r1, [r3, #0]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	461a      	mov	r2, r3
 8001c86:	f7ff f943 	bl	8000f10 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	4a8f      	ldr	r2, [pc, #572]	@ (8001ecc <HAL_ADC_ConfigChannel+0x67c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	f040 8131 	bne.w	8001ef8 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d10b      	bne.n	8001cbe <HAL_ADC_ConfigChannel+0x46e>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	f003 031f 	and.w	r3, r3, #31
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	bf94      	ite	ls
 8001cb6:	2301      	movls	r3, #1
 8001cb8:	2300      	movhi	r3, #0
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	e019      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x4a2>
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cce:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	e003      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001cda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cdc:	fab3 f383 	clz	r3, r3
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	f003 031f 	and.w	r3, r3, #31
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	bf94      	ite	ls
 8001cec:	2301      	movls	r3, #1
 8001cee:	2300      	movhi	r3, #0
 8001cf0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d079      	beq.n	8001dea <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d107      	bne.n	8001d12 <HAL_ADC_ConfigChannel+0x4c2>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0e9b      	lsrs	r3, r3, #26
 8001d08:	3301      	adds	r3, #1
 8001d0a:	069b      	lsls	r3, r3, #26
 8001d0c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d10:	e015      	b.n	8001d3e <HAL_ADC_ConfigChannel+0x4ee>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d1a:	fa93 f3a3 	rbit	r3, r3
 8001d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d22:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001d2a:	2320      	movs	r3, #32
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001d2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	069b      	lsls	r3, r3, #26
 8001d3a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d109      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x50e>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	0e9b      	lsrs	r3, r3, #26
 8001d50:	3301      	adds	r3, #1
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	e017      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x53e>
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d6e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e003      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001d7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	3301      	adds	r3, #1
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	2101      	movs	r1, #1
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	ea42 0103 	orr.w	r1, r2, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10a      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x564>
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	0e9b      	lsrs	r3, r3, #26
 8001da4:	3301      	adds	r3, #1
 8001da6:	f003 021f 	and.w	r2, r3, #31
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	051b      	lsls	r3, r3, #20
 8001db2:	e018      	b.n	8001de6 <HAL_ADC_ConfigChannel+0x596>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbc:	fa93 f3a3 	rbit	r3, r3
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001dcc:	2320      	movs	r3, #32
 8001dce:	e003      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001dd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	3301      	adds	r3, #1
 8001dda:	f003 021f 	and.w	r2, r3, #31
 8001dde:	4613      	mov	r3, r2
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	4413      	add	r3, r2
 8001de4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001de6:	430b      	orrs	r3, r1
 8001de8:	e081      	b.n	8001eee <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d107      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x5b6>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	0e9b      	lsrs	r3, r3, #26
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	069b      	lsls	r3, r3, #26
 8001e00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e04:	e015      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x5e2>
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e0e:	fa93 f3a3 	rbit	r3, r3
 8001e12:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e1e:	2320      	movs	r3, #32
 8001e20:	e003      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	069b      	lsls	r3, r3, #26
 8001e2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d109      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x602>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e9b      	lsrs	r3, r3, #26
 8001e44:	3301      	adds	r3, #1
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e50:	e017      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x632>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	61bb      	str	r3, [r7, #24]
  return result;
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e003      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	f003 031f 	and.w	r3, r3, #31
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e82:	ea42 0103 	orr.w	r1, r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d10d      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x65e>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	f003 021f 	and.w	r2, r3, #31
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3b1e      	subs	r3, #30
 8001ea6:	051b      	lsls	r3, r3, #20
 8001ea8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eac:	e01e      	b.n	8001eec <HAL_ADC_ConfigChannel+0x69c>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	60fb      	str	r3, [r7, #12]
  return result;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d104      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001ec6:	2320      	movs	r3, #32
 8001ec8:	e006      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x688>
 8001eca:	bf00      	nop
 8001ecc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b1e      	subs	r3, #30
 8001ee6:	051b      	lsls	r3, r3, #20
 8001ee8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eec:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe ffe1 	bl	8000eba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7a4>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d06c      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f04:	483c      	ldr	r0, [pc, #240]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f06:	f7fe ff23 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 8001f0a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a3a      	ldr	r2, [pc, #232]	@ (8001ffc <HAL_ADC_ConfigChannel+0x7ac>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d127      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f1c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d121      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a35      	ldr	r2, [pc, #212]	@ (8002000 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d157      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f36:	4619      	mov	r1, r3
 8001f38:	482f      	ldr	r0, [pc, #188]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f3a:	f7fe fef6 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f3e:	4b31      	ldr	r3, [pc, #196]	@ (8002004 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	099b      	lsrs	r3, r3, #6
 8001f44:	4a30      	ldr	r2, [pc, #192]	@ (8002008 <HAL_ADC_ConfigChannel+0x7b8>)
 8001f46:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	4613      	mov	r3, r2
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	4413      	add	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f66:	e03a      	b.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a27      	ldr	r2, [pc, #156]	@ (800200c <HAL_ADC_ConfigChannel+0x7bc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d113      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10d      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d12a      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f90:	4619      	mov	r1, r3
 8001f92:	4819      	ldr	r0, [pc, #100]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001f94:	f7fe fec9 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f98:	e021      	b.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002010 <HAL_ADC_ConfigChannel+0x7c0>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d11c      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d116      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a12      	ldr	r2, [pc, #72]	@ (8002000 <HAL_ADC_ConfigChannel+0x7b0>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d111      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fbe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480c      	ldr	r0, [pc, #48]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7a8>)
 8001fc6:	f7fe feb0 	bl	8000d2a <LL_ADC_SetCommonPathInternalCh>
 8001fca:	e008      	b.n	8001fde <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd0:	f043 0220 	orr.w	r2, r3, #32
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fe6:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	37d8      	adds	r7, #216	@ 0xd8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	80080000 	.word	0x80080000
 8001ff8:	50040300 	.word	0x50040300
 8001ffc:	c7520000 	.word	0xc7520000
 8002000:	50040000 	.word	0x50040000
 8002004:	20000000 	.word	0x20000000
 8002008:	053e2d63 	.word	0x053e2d63
 800200c:	cb840000 	.word	0xcb840000
 8002010:	80000001 	.word	0x80000001

08002014 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fff9 	bl	800101c <LL_ADC_IsEnabled>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d169      	bne.n	8002104 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	689a      	ldr	r2, [r3, #8]
 8002036:	4b36      	ldr	r3, [pc, #216]	@ (8002110 <ADC_Enable+0xfc>)
 8002038:	4013      	ands	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e055      	b.n	8002106 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe ffc8 	bl	8000ff4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002064:	482b      	ldr	r0, [pc, #172]	@ (8002114 <ADC_Enable+0x100>)
 8002066:	f7fe fe73 	bl	8000d50 <LL_ADC_GetCommonPathInternalCh>
 800206a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800206c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002074:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <ADC_Enable+0x104>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	099b      	lsrs	r3, r3, #6
 800207a:	4a28      	ldr	r2, [pc, #160]	@ (800211c <ADC_Enable+0x108>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800208e:	e002      	b.n	8002096 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	3b01      	subs	r3, #1
 8002094:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1f9      	bne.n	8002090 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800209c:	f7fe fe26 	bl	8000cec <HAL_GetTick>
 80020a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020a2:	e028      	b.n	80020f6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe ffb7 	bl	800101c <LL_ADC_IsEnabled>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d104      	bne.n	80020be <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe ff9b 	bl	8000ff4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020be:	f7fe fe15 	bl	8000cec <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	d914      	bls.n	80020f6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d00d      	beq.n	80020f6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020de:	f043 0210 	orr.w	r2, r3, #16
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ea:	f043 0201 	orr.w	r2, r3, #1
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e007      	b.n	8002106 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b01      	cmp	r3, #1
 8002102:	d1cf      	bne.n	80020a4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	8000003f 	.word	0x8000003f
 8002114:	50040300 	.word	0x50040300
 8002118:	20000000 	.word	0x20000000
 800211c:	053e2d63 	.word	0x053e2d63

08002120 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	db0b      	blt.n	8002212 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	f003 021f 	and.w	r2, r3, #31
 8002200:	4907      	ldr	r1, [pc, #28]	@ (8002220 <__NVIC_EnableIRQ+0x38>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	095b      	lsrs	r3, r3, #5
 8002208:	2001      	movs	r0, #1
 800220a:	fa00 f202 	lsl.w	r2, r0, r2
 800220e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000e100 	.word	0xe000e100

08002224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db0a      	blt.n	800224e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	490c      	ldr	r1, [pc, #48]	@ (8002270 <__NVIC_SetPriority+0x4c>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	0112      	lsls	r2, r2, #4
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	440b      	add	r3, r1
 8002248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800224c:	e00a      	b.n	8002264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4908      	ldr	r1, [pc, #32]	@ (8002274 <__NVIC_SetPriority+0x50>)
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	3b04      	subs	r3, #4
 800225c:	0112      	lsls	r2, r2, #4
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	440b      	add	r3, r1
 8002262:	761a      	strb	r2, [r3, #24]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000e100 	.word	0xe000e100
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002278:	b480      	push	{r7}
 800227a:	b089      	sub	sp, #36	@ 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0307 	and.w	r3, r3, #7
 800228a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	f1c3 0307 	rsb	r3, r3, #7
 8002292:	2b04      	cmp	r3, #4
 8002294:	bf28      	it	cs
 8002296:	2304      	movcs	r3, #4
 8002298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	3304      	adds	r3, #4
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d902      	bls.n	80022a8 <NVIC_EncodePriority+0x30>
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3b03      	subs	r3, #3
 80022a6:	e000      	b.n	80022aa <NVIC_EncodePriority+0x32>
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	f04f 32ff 	mov.w	r2, #4294967295
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43da      	mvns	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	401a      	ands	r2, r3
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022c0:	f04f 31ff 	mov.w	r1, #4294967295
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43d9      	mvns	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022d0:	4313      	orrs	r3, r2
         );
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3724      	adds	r7, #36	@ 0x24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022f0:	d301      	bcc.n	80022f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022f2:	2301      	movs	r3, #1
 80022f4:	e00f      	b.n	8002316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <SysTick_Config+0x40>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fe:	210f      	movs	r1, #15
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f7ff ff8e 	bl	8002224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002308:	4b05      	ldr	r3, [pc, #20]	@ (8002320 <SysTick_Config+0x40>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <SysTick_Config+0x40>)
 8002310:	2207      	movs	r2, #7
 8002312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	e000e010 	.word	0xe000e010

08002324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	f7ff ff29 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 8002332:	bf00      	nop
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
 8002346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800234c:	f7ff ff3e 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002350:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	6978      	ldr	r0, [r7, #20]
 8002358:	f7ff ff8e 	bl	8002278 <NVIC_EncodePriority>
 800235c:	4602      	mov	r2, r0
 800235e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002362:	4611      	mov	r1, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff5d 	bl	8002224 <__NVIC_SetPriority>
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	4603      	mov	r3, r0
 800237a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff31 	bl	80021e8 <__NVIC_EnableIRQ>
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffa2 	bl	80022e0 <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b085      	sub	sp, #20
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d008      	beq.n	80023d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2204      	movs	r2, #4
 80023c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e022      	b.n	8002416 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 020e 	bic.w	r2, r2, #14
 80023de:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0201 	bic.w	r2, r2, #1
 80023ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f4:	f003 021c 	and.w	r2, r3, #28
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fc:	2101      	movs	r1, #1
 80023fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002402:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002414:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002416:	4618      	mov	r0, r3
 8002418:	3714      	adds	r7, #20
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b084      	sub	sp, #16
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d005      	beq.n	8002446 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2204      	movs	r2, #4
 800243e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	73fb      	strb	r3, [r7, #15]
 8002444:	e029      	b.n	800249a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 020e 	bic.w	r2, r2, #14
 8002454:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0201 	bic.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f003 021c 	and.w	r2, r3, #28
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
    }
  }
  return status;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024b2:	e148      	b.n	8002746 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	2101      	movs	r1, #1
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	fa01 f303 	lsl.w	r3, r1, r3
 80024c0:	4013      	ands	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 813a 	beq.w	8002740 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d005      	beq.n	80024e4 <HAL_GPIO_Init+0x40>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d130      	bne.n	8002546 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	2203      	movs	r2, #3
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4013      	ands	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68da      	ldr	r2, [r3, #12]
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800251a:	2201      	movs	r2, #1
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	f003 0201 	and.w	r2, r3, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4313      	orrs	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	693a      	ldr	r2, [r7, #16]
 8002544:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b03      	cmp	r3, #3
 8002550:	d017      	beq.n	8002582 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d123      	bne.n	80025d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	220f      	movs	r2, #15
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	691a      	ldr	r2, [r3, #16]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	fa02 f303 	lsl.w	r3, r2, r3
 80025c2:	693a      	ldr	r2, [r7, #16]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	08da      	lsrs	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3208      	adds	r2, #8
 80025d0:	6939      	ldr	r1, [r7, #16]
 80025d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	2203      	movs	r2, #3
 80025e2:	fa02 f303 	lsl.w	r3, r2, r3
 80025e6:	43db      	mvns	r3, r3
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	4013      	ands	r3, r2
 80025ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0203 	and.w	r2, r3, #3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 8094 	beq.w	8002740 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002618:	4b52      	ldr	r3, [pc, #328]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6613      	str	r3, [r2, #96]	@ 0x60
 8002624:	4b4f      	ldr	r3, [pc, #316]	@ (8002764 <HAL_GPIO_Init+0x2c0>)
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	60bb      	str	r3, [r7, #8]
 800262e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002630:	4a4d      	ldr	r2, [pc, #308]	@ (8002768 <HAL_GPIO_Init+0x2c4>)
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	089b      	lsrs	r3, r3, #2
 8002636:	3302      	adds	r3, #2
 8002638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0303 	and.w	r3, r3, #3
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	220f      	movs	r2, #15
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4013      	ands	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800265a:	d00d      	beq.n	8002678 <HAL_GPIO_Init+0x1d4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a43      	ldr	r2, [pc, #268]	@ (800276c <HAL_GPIO_Init+0x2c8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d007      	beq.n	8002674 <HAL_GPIO_Init+0x1d0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a42      	ldr	r2, [pc, #264]	@ (8002770 <HAL_GPIO_Init+0x2cc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d101      	bne.n	8002670 <HAL_GPIO_Init+0x1cc>
 800266c:	2302      	movs	r3, #2
 800266e:	e004      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002670:	2307      	movs	r3, #7
 8002672:	e002      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002674:	2301      	movs	r3, #1
 8002676:	e000      	b.n	800267a <HAL_GPIO_Init+0x1d6>
 8002678:	2300      	movs	r3, #0
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	f002 0203 	and.w	r2, r2, #3
 8002680:	0092      	lsls	r2, r2, #2
 8002682:	4093      	lsls	r3, r2
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800268a:	4937      	ldr	r1, [pc, #220]	@ (8002768 <HAL_GPIO_Init+0x2c4>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3302      	adds	r3, #2
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002698:	4b36      	ldr	r3, [pc, #216]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	693a      	ldr	r2, [r7, #16]
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026c2:	4b2c      	ldr	r3, [pc, #176]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4013      	ands	r3, r2
 80026d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026e6:	4a23      	ldr	r2, [pc, #140]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026ec:	4b21      	ldr	r3, [pc, #132]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	693a      	ldr	r2, [r7, #16]
 80026f8:	4013      	ands	r3, r2
 80026fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	4313      	orrs	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002710:	4a18      	ldr	r2, [pc, #96]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002716:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800273a:	4a0e      	ldr	r2, [pc, #56]	@ (8002774 <HAL_GPIO_Init+0x2d0>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	fa22 f303 	lsr.w	r3, r2, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f aeaf 	bne.w	80024b4 <HAL_GPIO_Init+0x10>
  }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	371c      	adds	r7, #28
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40021000 	.word	0x40021000
 8002768:	40010000 	.word	0x40010000
 800276c:	48000400 	.word	0x48000400
 8002770:	48000800 	.word	0x48000800
 8002774:	40010400 	.word	0x40010400

08002778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	807b      	strh	r3, [r7, #2]
 8002784:	4613      	mov	r3, r2
 8002786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002788:	787b      	ldrb	r3, [r7, #1]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d003      	beq.n	8002796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800278e:	887a      	ldrh	r2, [r7, #2]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002794:	e002      	b.n	800279c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002796:	887a      	ldrh	r2, [r7, #2]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027ac:	4b05      	ldr	r3, [pc, #20]	@ (80027c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a04      	ldr	r2, [pc, #16]	@ (80027c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b6:	6013      	str	r3, [r2, #0]
}
 80027b8:	bf00      	nop
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40007000 	.word	0x40007000

080027c8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <HAL_PWREx_GetVoltageRange+0x18>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	40007000 	.word	0x40007000

080027e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f2:	d130      	bne.n	8002856 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f4:	4b23      	ldr	r3, [pc, #140]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002800:	d038      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002802:	4b20      	ldr	r3, [pc, #128]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280a:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800280c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002810:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002812:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2232      	movs	r2, #50	@ 0x32
 8002818:	fb02 f303 	mul.w	r3, r2, r3
 800281c:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800281e:	fba2 2303 	umull	r2, r3, r2, r3
 8002822:	0c9b      	lsrs	r3, r3, #18
 8002824:	3301      	adds	r3, #1
 8002826:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002828:	e002      	b.n	8002830 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	3b01      	subs	r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002830:	4b14      	ldr	r3, [pc, #80]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800283c:	d102      	bne.n	8002844 <HAL_PWREx_ControlVoltageScaling+0x60>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d1f2      	bne.n	800282a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800284c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002850:	d110      	bne.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e00f      	b.n	8002876 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002856:	4b0b      	ldr	r3, [pc, #44]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800285e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002862:	d007      	beq.n	8002874 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002864:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800286c:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002872:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000
 8002888:	20000000 	.word	0x20000000
 800288c:	431bde83 	.word	0x431bde83

08002890 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d102      	bne.n	80028a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	f000 bc02 	b.w	80030a8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a4:	4b96      	ldr	r3, [pc, #600]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028ae:	4b94      	ldr	r3, [pc, #592]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80e4 	beq.w	8002a8e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_RCC_OscConfig+0x4c>
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	2b0c      	cmp	r3, #12
 80028d0:	f040 808b 	bne.w	80029ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 8087 	bne.w	80029ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028dc:	4b88      	ldr	r3, [pc, #544]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x64>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e3d9      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	4b81      	ldr	r3, [pc, #516]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d004      	beq.n	800290e <HAL_RCC_OscConfig+0x7e>
 8002904:	4b7e      	ldr	r3, [pc, #504]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290c:	e005      	b.n	800291a <HAL_RCC_OscConfig+0x8a>
 800290e:	4b7c      	ldr	r3, [pc, #496]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291a:	4293      	cmp	r3, r2
 800291c:	d223      	bcs.n	8002966 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 fd8c 	bl	8003440 <RCC_SetFlashLatencyFromMSIRange>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e3ba      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002932:	4b73      	ldr	r3, [pc, #460]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a72      	ldr	r2, [pc, #456]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b70      	ldr	r3, [pc, #448]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	496d      	ldr	r1, [pc, #436]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002950:	4b6b      	ldr	r3, [pc, #428]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	4968      	ldr	r1, [pc, #416]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
 8002964:	e025      	b.n	80029b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002966:	4b66      	ldr	r3, [pc, #408]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a65      	ldr	r2, [pc, #404]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b63      	ldr	r3, [pc, #396]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4960      	ldr	r1, [pc, #384]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002984:	4b5e      	ldr	r3, [pc, #376]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	495b      	ldr	r1, [pc, #364]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 fd4c 	bl	8003440 <RCC_SetFlashLatencyFromMSIRange>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e37a      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b2:	f000 fc81 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 80029b6:	4602      	mov	r2, r0
 80029b8:	4b51      	ldr	r3, [pc, #324]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	091b      	lsrs	r3, r3, #4
 80029be:	f003 030f 	and.w	r3, r3, #15
 80029c2:	4950      	ldr	r1, [pc, #320]	@ (8002b04 <HAL_RCC_OscConfig+0x274>)
 80029c4:	5ccb      	ldrb	r3, [r1, r3]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	fa22 f303 	lsr.w	r3, r2, r3
 80029ce:	4a4e      	ldr	r2, [pc, #312]	@ (8002b08 <HAL_RCC_OscConfig+0x278>)
 80029d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d2:	4b4e      	ldr	r3, [pc, #312]	@ (8002b0c <HAL_RCC_OscConfig+0x27c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f938 	bl	8000c4c <HAL_InitTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d052      	beq.n	8002a8c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	e35e      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d032      	beq.n	8002a58 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f2:	4b43      	ldr	r3, [pc, #268]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a42      	ldr	r2, [pc, #264]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029fe:	f7fe f975 	bl	8000cec <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a06:	f7fe f971 	bl	8000cec <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e347      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a18:	4b39      	ldr	r3, [pc, #228]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a24:	4b36      	ldr	r3, [pc, #216]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a35      	ldr	r2, [pc, #212]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	4b33      	ldr	r3, [pc, #204]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	4930      	ldr	r1, [pc, #192]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a42:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	021b      	lsls	r3, r3, #8
 8002a50:	492b      	ldr	r1, [pc, #172]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	604b      	str	r3, [r1, #4]
 8002a56:	e01a      	b.n	8002a8e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a58:	4b29      	ldr	r3, [pc, #164]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	f023 0301 	bic.w	r3, r3, #1
 8002a62:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a64:	f7fe f942 	bl	8000cec <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6c:	f7fe f93e 	bl	8000cec <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e314      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a7e:	4b20      	ldr	r3, [pc, #128]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f0      	bne.n	8002a6c <HAL_RCC_OscConfig+0x1dc>
 8002a8a:	e000      	b.n	8002a8e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d073      	beq.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_OscConfig+0x21c>
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d10b      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aac:	4b14      	ldr	r3, [pc, #80]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d063      	beq.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d15f      	bne.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e2f1      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002acc:	d106      	bne.n	8002adc <HAL_RCC_OscConfig+0x24c>
 8002ace:	4b0c      	ldr	r3, [pc, #48]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a0b      	ldr	r2, [pc, #44]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	e025      	b.n	8002b28 <HAL_RCC_OscConfig+0x298>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae4:	d114      	bne.n	8002b10 <HAL_RCC_OscConfig+0x280>
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a05      	ldr	r2, [pc, #20]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b03      	ldr	r3, [pc, #12]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a02      	ldr	r2, [pc, #8]	@ (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e013      	b.n	8002b28 <HAL_RCC_OscConfig+0x298>
 8002b00:	40021000 	.word	0x40021000
 8002b04:	080053d4 	.word	0x080053d4
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	4ba0      	ldr	r3, [pc, #640]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a9f      	ldr	r2, [pc, #636]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a9c      	ldr	r2, [pc, #624]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe f8dc 	bl	8000cec <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe f8d8 	bl	8000cec <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e2ae      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4a:	4b92      	ldr	r3, [pc, #584]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x2a8>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b58:	f7fe f8c8 	bl	8000cec <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe f8c4 	bl	8000cec <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e29a      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b72:	4b88      	ldr	r3, [pc, #544]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x2d0>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d060      	beq.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x310>
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b0c      	cmp	r3, #12
 8002b98:	d119      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d116      	bne.n	8002bce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b7c      	ldr	r3, [pc, #496]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x328>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e277      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bb8:	4b76      	ldr	r3, [pc, #472]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	4973      	ldr	r1, [pc, #460]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bcc:	e040      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d023      	beq.n	8002c1e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a6e      	ldr	r2, [pc, #440]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe f883 	bl	8000cec <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bea:	f7fe f87f 	bl	8000cec <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e255      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfc:	4b65      	ldr	r3, [pc, #404]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0f0      	beq.n	8002bea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c08:	4b62      	ldr	r3, [pc, #392]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	495f      	ldr	r1, [pc, #380]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
 8002c1c:	e018      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a5c      	ldr	r2, [pc, #368]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7fe f85f 	bl	8000cec <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c32:	f7fe f85b 	bl	8000cec <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e231      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d1f0      	bne.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d03c      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d01c      	beq.n	8002c9e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c64:	4b4b      	ldr	r3, [pc, #300]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c6c:	f043 0301 	orr.w	r3, r3, #1
 8002c70:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe f83a 	bl	8000cec <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7a:	e008      	b.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe f836 	bl	8000cec <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e20c      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c8e:	4b41      	ldr	r3, [pc, #260]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0ef      	beq.n	8002c7c <HAL_RCC_OscConfig+0x3ec>
 8002c9c:	e01b      	b.n	8002cd6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca4:	4a3b      	ldr	r2, [pc, #236]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cae:	f7fe f81d 	bl	8000cec <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb6:	f7fe f819 	bl	8000cec <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e1ef      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cc8:	4b32      	ldr	r3, [pc, #200]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1ef      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 80a6 	beq.w	8002e30 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b27      	ldr	r3, [pc, #156]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	4a26      	ldr	r2, [pc, #152]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfe:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d00:	4b24      	ldr	r3, [pc, #144]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d08:	60bb      	str	r3, [r7, #8]
 8002d0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d118      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	@ (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d28:	f7fd ffe0 	bl	8000cec <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d30:	f7fd ffdc 	bl	8000cec <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1b2      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_RCC_OscConfig+0x508>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_RCC_OscConfig+0x4d8>
 8002d56:	4b0f      	ldr	r3, [pc, #60]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d66:	e029      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d115      	bne.n	8002d9c <HAL_RCC_OscConfig+0x50c>
 8002d70:	4b08      	ldr	r3, [pc, #32]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d76:	4a07      	ldr	r2, [pc, #28]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d78:	f043 0304 	orr.w	r3, r3, #4
 8002d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d80:	4b04      	ldr	r3, [pc, #16]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d86:	4a03      	ldr	r2, [pc, #12]	@ (8002d94 <HAL_RCC_OscConfig+0x504>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d90:	e014      	b.n	8002dbc <HAL_RCC_OscConfig+0x52c>
 8002d92:	bf00      	nop
 8002d94:	40021000 	.word	0x40021000
 8002d98:	40007000 	.word	0x40007000
 8002d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da2:	4a99      	ldr	r2, [pc, #612]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002da4:	f023 0301 	bic.w	r3, r3, #1
 8002da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002dac:	4b96      	ldr	r3, [pc, #600]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db2:	4a95      	ldr	r2, [pc, #596]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002db4:	f023 0304 	bic.w	r3, r3, #4
 8002db8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d016      	beq.n	8002df2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc4:	f7fd ff92 	bl	8000cec <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dca:	e00a      	b.n	8002de2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dcc:	f7fd ff8e 	bl	8000cec <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e162      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de2:	4b89      	ldr	r3, [pc, #548]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ed      	beq.n	8002dcc <HAL_RCC_OscConfig+0x53c>
 8002df0:	e015      	b.n	8002e1e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df2:	f7fd ff7b 	bl	8000cec <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fd ff77 	bl	8000cec <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e14b      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e10:	4b7d      	ldr	r3, [pc, #500]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1ed      	bne.n	8002dfa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e1e:	7ffb      	ldrb	r3, [r7, #31]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e24:	4b78      	ldr	r3, [pc, #480]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e28:	4a77      	ldr	r2, [pc, #476]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e2e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d03c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01c      	beq.n	8002e7e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e44:	4b70      	ldr	r3, [pc, #448]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7fd ff4a 	bl	8000cec <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e5c:	f7fd ff46 	bl	8000cec <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e11c      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e6e:	4b66      	ldr	r3, [pc, #408]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ef      	beq.n	8002e5c <HAL_RCC_OscConfig+0x5cc>
 8002e7c:	e01b      	b.n	8002eb6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e7e:	4b62      	ldr	r3, [pc, #392]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e84:	4a60      	ldr	r2, [pc, #384]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002e86:	f023 0301 	bic.w	r3, r3, #1
 8002e8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8e:	f7fd ff2d 	bl	8000cec <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e96:	f7fd ff29 	bl	8000cec <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e0ff      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ea8:	4b57      	ldr	r3, [pc, #348]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002eae:	f003 0302 	and.w	r3, r3, #2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1ef      	bne.n	8002e96 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80f3 	beq.w	80030a6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	f040 80c9 	bne.w	800305c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eca:	4b4f      	ldr	r3, [pc, #316]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f003 0203 	and.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d12c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d123      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d11b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d113      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d109      	bne.n	8002f38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2e:	085b      	lsrs	r3, r3, #1
 8002f30:	3b01      	subs	r3, #1
 8002f32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d06b      	beq.n	8003010 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2b0c      	cmp	r3, #12
 8002f3c:	d062      	beq.n	8003004 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f3e:	4b32      	ldr	r3, [pc, #200]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0ac      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2d      	ldr	r2, [pc, #180]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002f54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f5a:	f7fd fec7 	bl	8000cec <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fd fec3 	bl	8000cec <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e099      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f74:	4b24      	ldr	r3, [pc, #144]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1f0      	bne.n	8002f62 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f80:	4b21      	ldr	r3, [pc, #132]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	4b21      	ldr	r3, [pc, #132]	@ (800300c <HAL_RCC_OscConfig+0x77c>)
 8002f86:	4013      	ands	r3, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f90:	3a01      	subs	r2, #1
 8002f92:	0112      	lsls	r2, r2, #4
 8002f94:	4311      	orrs	r1, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f9a:	0212      	lsls	r2, r2, #8
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0552      	lsls	r2, r2, #21
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	4311      	orrs	r1, r2
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fba:	06d2      	lsls	r2, r2, #27
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4912      	ldr	r1, [pc, #72]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fdc:	f7fd fe86 	bl	8000cec <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd fe82 	bl	8000cec <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e058      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <HAL_RCC_OscConfig+0x778>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003002:	e050      	b.n	80030a6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04f      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
 8003008:	40021000 	.word	0x40021000
 800300c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003010:	4b27      	ldr	r3, [pc, #156]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d144      	bne.n	80030a6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800301c:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a23      	ldr	r2, [pc, #140]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003026:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003028:	4b21      	ldr	r3, [pc, #132]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	4a20      	ldr	r2, [pc, #128]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 800302e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003034:	f7fd fe5a 	bl	8000cec <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303c:	f7fd fe56 	bl	8000cec <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e02c      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800304e:	4b18      	ldr	r3, [pc, #96]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d0f0      	beq.n	800303c <HAL_RCC_OscConfig+0x7ac>
 800305a:	e024      	b.n	80030a6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d01f      	beq.n	80030a2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003068:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800306c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306e:	f7fd fe3d 	bl	8000cec <HAL_GetTick>
 8003072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003074:	e008      	b.n	8003088 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003076:	f7fd fe39 	bl	8000cec <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	2b02      	cmp	r3, #2
 8003082:	d901      	bls.n	8003088 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003084:	2303      	movs	r3, #3
 8003086:	e00f      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003088:	4b09      	ldr	r3, [pc, #36]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1f0      	bne.n	8003076 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003094:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	4905      	ldr	r1, [pc, #20]	@ (80030b0 <HAL_RCC_OscConfig+0x820>)
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCC_OscConfig+0x824>)
 800309c:	4013      	ands	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
 80030a0:	e001      	b.n	80030a6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	feeefffc 	.word	0xfeeefffc

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0e7      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b75      	ldr	r3, [pc, #468]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b72      	ldr	r3, [pc, #456]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4970      	ldr	r1, [pc, #448]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b6e      	ldr	r3, [pc, #440]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0cf      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003114:	429a      	cmp	r2, r3
 8003116:	d908      	bls.n	800312a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b63      	ldr	r3, [pc, #396]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4960      	ldr	r1, [pc, #384]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04c      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b5a      	ldr	r3, [pc, #360]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d121      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0a6      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b54      	ldr	r3, [pc, #336]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e09a      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316e:	4b4e      	ldr	r3, [pc, #312]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e08e      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e086      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b46      	ldr	r3, [pc, #280]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4943      	ldr	r1, [pc, #268]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fda4 	bl	8000cec <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fd fda0 	bl	8000cec <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e06e      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b3a      	ldr	r3, [pc, #232]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b31      	ldr	r3, [pc, #196]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d208      	bcs.n	80031fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b2e      	ldr	r3, [pc, #184]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	492b      	ldr	r1, [pc, #172]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fe:	4b29      	ldr	r3, [pc, #164]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d210      	bcs.n	800322e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320c:	4b25      	ldr	r3, [pc, #148]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0207 	bic.w	r2, r3, #7
 8003214:	4923      	ldr	r1, [pc, #140]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321c:	4b21      	ldr	r3, [pc, #132]	@ (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e036      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4918      	ldr	r1, [pc, #96]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003258:	4b13      	ldr	r3, [pc, #76]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4910      	ldr	r1, [pc, #64]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326c:	f000 f824 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b0d      	ldr	r3, [pc, #52]	@ (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	490b      	ldr	r1, [pc, #44]	@ (80032ac <HAL_RCC_ClockConfig+0x1f4>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a09      	ldr	r2, [pc, #36]	@ (80032b0 <HAL_RCC_ClockConfig+0x1f8>)
 800328a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800328c:	4b09      	ldr	r3, [pc, #36]	@ (80032b4 <HAL_RCC_ClockConfig+0x1fc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fcdb 	bl	8000c4c <HAL_InitTick>
 8003296:	4603      	mov	r3, r0
 8003298:	72fb      	strb	r3, [r7, #11]

  return status;
 800329a:	7afb      	ldrb	r3, [r7, #11]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	080053d4 	.word	0x080053d4
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	@ 0x24
 80032bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c6:	4b3e      	ldr	r3, [pc, #248]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d0:	4b3b      	ldr	r3, [pc, #236]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d121      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d11e      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032ec:	4b34      	ldr	r3, [pc, #208]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f8:	4b31      	ldr	r3, [pc, #196]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003308:	4b2d      	ldr	r3, [pc, #180]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003314:	4a2b      	ldr	r2, [pc, #172]	@ (80033c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003330:	4b25      	ldr	r3, [pc, #148]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e004      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d101      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800333c:	4b23      	ldr	r3, [pc, #140]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 800333e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d134      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003346:	4b1e      	ldr	r3, [pc, #120]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0xa6>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d003      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0xac>
 800335c:	e005      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335e:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003360:	617b      	str	r3, [r7, #20]
      break;
 8003362:	e005      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003364:	4b19      	ldr	r3, [pc, #100]	@ (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003366:	617b      	str	r3, [r7, #20]
      break;
 8003368:	e002      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	617b      	str	r3, [r7, #20]
      break;
 800336e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	3301      	adds	r3, #1
 800337c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337e:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	fb03 f202 	mul.w	r2, r3, r2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003396:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0e5b      	lsrs	r3, r3, #25
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	3301      	adds	r3, #1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033b0:	69bb      	ldr	r3, [r7, #24]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	@ 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	080053ec 	.word	0x080053ec
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033d4:	4b03      	ldr	r3, [pc, #12]	@ (80033e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033d6:	681b      	ldr	r3, [r3, #0]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr
 80033e2:	bf00      	nop
 80033e4:	20000000 	.word	0x20000000

080033e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033ec:	f7ff fff0 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b06      	ldr	r3, [pc, #24]	@ (800340c <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	0a1b      	lsrs	r3, r3, #8
 80033f8:	f003 0307 	and.w	r3, r3, #7
 80033fc:	4904      	ldr	r1, [pc, #16]	@ (8003410 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003408:	4618      	mov	r0, r3
 800340a:	bd80      	pop	{r7, pc}
 800340c:	40021000 	.word	0x40021000
 8003410:	080053e4 	.word	0x080053e4

08003414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003418:	f7ff ffda 	bl	80033d0 <HAL_RCC_GetHCLKFreq>
 800341c:	4602      	mov	r2, r0
 800341e:	4b06      	ldr	r3, [pc, #24]	@ (8003438 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	0adb      	lsrs	r3, r3, #11
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	4904      	ldr	r1, [pc, #16]	@ (800343c <HAL_RCC_GetPCLK2Freq+0x28>)
 800342a:	5ccb      	ldrb	r3, [r1, r3]
 800342c:	f003 031f 	and.w	r3, r3, #31
 8003430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003434:	4618      	mov	r0, r3
 8003436:	bd80      	pop	{r7, pc}
 8003438:	40021000 	.word	0x40021000
 800343c:	080053e4 	.word	0x080053e4

08003440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800344c:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800344e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003458:	f7ff f9b6 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 800345c:	6178      	str	r0, [r7, #20]
 800345e:	e014      	b.n	800348a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003460:	4b25      	ldr	r3, [pc, #148]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	4a24      	ldr	r2, [pc, #144]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003466:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346a:	6593      	str	r3, [r2, #88]	@ 0x58
 800346c:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003474:	60fb      	str	r3, [r7, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003478:	f7ff f9a6 	bl	80027c8 <HAL_PWREx_GetVoltageRange>
 800347c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800347e:	4b1e      	ldr	r3, [pc, #120]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003482:	4a1d      	ldr	r2, [pc, #116]	@ (80034f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003484:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003490:	d10b      	bne.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b80      	cmp	r3, #128	@ 0x80
 8003496:	d919      	bls.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2ba0      	cmp	r3, #160	@ 0xa0
 800349c:	d902      	bls.n	80034a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800349e:	2302      	movs	r3, #2
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	e013      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034a4:	2301      	movs	r3, #1
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e010      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b80      	cmp	r3, #128	@ 0x80
 80034ae:	d902      	bls.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034b0:	2303      	movs	r3, #3
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e00a      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b80      	cmp	r3, #128	@ 0x80
 80034ba:	d102      	bne.n	80034c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
 80034c0:	e004      	b.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b70      	cmp	r3, #112	@ 0x70
 80034c6:	d101      	bne.n	80034cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034c8:	2301      	movs	r3, #1
 80034ca:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	@ (80034fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 0207 	bic.w	r2, r3, #7
 80034d4:	4909      	ldr	r1, [pc, #36]	@ (80034fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034dc:	4b07      	ldr	r3, [pc, #28]	@ (80034fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d001      	beq.n	80034ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40022000 	.word	0x40022000

08003500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003508:	2300      	movs	r3, #0
 800350a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800350c:	2300      	movs	r3, #0
 800350e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d031      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003520:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003524:	d01a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003526:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800352a:	d814      	bhi.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800352c:	2b00      	cmp	r3, #0
 800352e:	d009      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003530:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003534:	d10f      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003536:	4b5d      	ldr	r3, [pc, #372]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	4a5c      	ldr	r2, [pc, #368]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800353c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003540:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003542:	e00c      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f9de 	bl	800390c <RCCEx_PLLSAI1_Config>
 8003550:	4603      	mov	r3, r0
 8003552:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003554:	e003      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	74fb      	strb	r3, [r7, #19]
      break;
 800355a:	e000      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800355c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003564:	4b51      	ldr	r3, [pc, #324]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003572:	494e      	ldr	r1, [pc, #312]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003574:	4313      	orrs	r3, r2
 8003576:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800357a:	e001      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 809e 	beq.w	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003592:	4b46      	ldr	r3, [pc, #280]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800359e:	2301      	movs	r3, #1
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80035a2:	2300      	movs	r3, #0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a8:	4b40      	ldr	r3, [pc, #256]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	4a3f      	ldr	r2, [pc, #252]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b4:	4b3d      	ldr	r3, [pc, #244]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035bc:	60bb      	str	r3, [r7, #8]
 80035be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035c0:	2301      	movs	r3, #1
 80035c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035c4:	4b3a      	ldr	r3, [pc, #232]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a39      	ldr	r2, [pc, #228]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035d0:	f7fd fb8c 	bl	8000cec <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035d6:	e009      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d8:	f7fd fb88 	bl	8000cec <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	74fb      	strb	r3, [r7, #19]
        break;
 80035ea:	e005      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ec:	4b30      	ldr	r3, [pc, #192]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ef      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d15a      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035fe:	4b2b      	ldr	r3, [pc, #172]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003604:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d01e      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	429a      	cmp	r2, r3
 8003618:	d019      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800361a:	4b24      	ldr	r3, [pc, #144]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003624:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003626:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800362c:	4a1f      	ldr	r2, [pc, #124]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003632:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003636:	4b1d      	ldr	r3, [pc, #116]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363c:	4a1b      	ldr	r2, [pc, #108]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003646:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d016      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd fb48 	bl	8000cec <HAL_GetTick>
 800365c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800365e:	e00b      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003660:	f7fd fb44 	bl	8000cec <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366e:	4293      	cmp	r3, r2
 8003670:	d902      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	74fb      	strb	r3, [r7, #19]
            break;
 8003676:	e006      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003678:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0ec      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800368e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003692:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369a:	4904      	ldr	r1, [pc, #16]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800369c:	4313      	orrs	r3, r2
 800369e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036a2:	e009      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000
 80036b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	7cfb      	ldrb	r3, [r7, #19]
 80036b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036b8:	7c7b      	ldrb	r3, [r7, #17]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036be:	4b8a      	ldr	r3, [pc, #552]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c2:	4a89      	ldr	r2, [pc, #548]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036c8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d6:	4b84      	ldr	r3, [pc, #528]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f023 0203 	bic.w	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4980      	ldr	r1, [pc, #512]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d00a      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036f8:	4b7b      	ldr	r3, [pc, #492]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036fe:	f023 020c 	bic.w	r2, r3, #12
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003706:	4978      	ldr	r1, [pc, #480]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003708:	4313      	orrs	r3, r2
 800370a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800371a:	4b73      	ldr	r3, [pc, #460]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003720:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003728:	496f      	ldr	r1, [pc, #444]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800373c:	4b6a      	ldr	r3, [pc, #424]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003742:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374a:	4967      	ldr	r1, [pc, #412]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800375e:	4b62      	ldr	r3, [pc, #392]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003764:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800376c:	495e      	ldr	r1, [pc, #376]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003780:	4b59      	ldr	r3, [pc, #356]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003786:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378e:	4956      	ldr	r1, [pc, #344]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037a2:	4b51      	ldr	r3, [pc, #324]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b0:	494d      	ldr	r1, [pc, #308]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d028      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037c4:	4b48      	ldr	r3, [pc, #288]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	4945      	ldr	r1, [pc, #276]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e2:	d106      	bne.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037e4:	4b40      	ldr	r3, [pc, #256]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a3f      	ldr	r2, [pc, #252]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037ee:	60d3      	str	r3, [r2, #12]
 80037f0:	e011      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037fa:	d10c      	bne.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3304      	adds	r3, #4
 8003800:	2101      	movs	r1, #1
 8003802:	4618      	mov	r0, r3
 8003804:	f000 f882 	bl	800390c <RCCEx_PLLSAI1_Config>
 8003808:	4603      	mov	r3, r0
 800380a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800380c:	7cfb      	ldrb	r3, [r7, #19]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d028      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003822:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003828:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003830:	492d      	ldr	r1, [pc, #180]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003832:	4313      	orrs	r3, r2
 8003834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003840:	d106      	bne.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003842:	4b29      	ldr	r3, [pc, #164]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	4a28      	ldr	r2, [pc, #160]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003848:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800384c:	60d3      	str	r3, [r2, #12]
 800384e:	e011      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003858:	d10c      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	3304      	adds	r3, #4
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f000 f853 	bl	800390c <RCCEx_PLLSAI1_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800386a:	7cfb      	ldrb	r3, [r7, #19]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01c      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003880:	4b19      	ldr	r3, [pc, #100]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003886:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388e:	4916      	ldr	r1, [pc, #88]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003890:	4313      	orrs	r3, r2
 8003892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389e:	d10c      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	2102      	movs	r1, #2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 f830 	bl	800390c <RCCEx_PLLSAI1_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038b0:	7cfb      	ldrb	r3, [r7, #19]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80038b6:	7cfb      	ldrb	r3, [r7, #19]
 80038b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00a      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038c6:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038cc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038d4:	4904      	ldr	r1, [pc, #16]	@ (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000

080038ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038f0:	4b05      	ldr	r3, [pc, #20]	@ (8003908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a04      	ldr	r2, [pc, #16]	@ (8003908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038f6:	f043 0304 	orr.w	r3, r3, #4
 80038fa:	6013      	str	r3, [r2, #0]
}
 80038fc:	bf00      	nop
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000

0800390c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003916:	2300      	movs	r3, #0
 8003918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800391a:	4b74      	ldr	r3, [pc, #464]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d018      	beq.n	8003958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003926:	4b71      	ldr	r3, [pc, #452]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	f003 0203 	and.w	r2, r3, #3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d10d      	bne.n	8003952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
       ||
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800393e:	4b6b      	ldr	r3, [pc, #428]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	091b      	lsrs	r3, r3, #4
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
       ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d047      	beq.n	80039e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
 8003956:	e044      	b.n	80039e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b03      	cmp	r3, #3
 800395e:	d018      	beq.n	8003992 <RCCEx_PLLSAI1_Config+0x86>
 8003960:	2b03      	cmp	r3, #3
 8003962:	d825      	bhi.n	80039b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003964:	2b01      	cmp	r3, #1
 8003966:	d002      	beq.n	800396e <RCCEx_PLLSAI1_Config+0x62>
 8003968:	2b02      	cmp	r3, #2
 800396a:	d009      	beq.n	8003980 <RCCEx_PLLSAI1_Config+0x74>
 800396c:	e020      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d11d      	bne.n	80039b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800397e:	e01a      	b.n	80039b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003980:	4b5a      	ldr	r3, [pc, #360]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d116      	bne.n	80039ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003990:	e013      	b.n	80039ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003992:	4b56      	ldr	r3, [pc, #344]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800399e:	4b53      	ldr	r3, [pc, #332]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ae:	e006      	b.n	80039be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      break;
 80039b4:	e004      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b6:	bf00      	nop
 80039b8:	e002      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039be:	bf00      	nop
    }

    if(status == HAL_OK)
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10d      	bne.n	80039e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6819      	ldr	r1, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	430b      	orrs	r3, r1
 80039dc:	4943      	ldr	r1, [pc, #268]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d17c      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039e8:	4b40      	ldr	r3, [pc, #256]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a3f      	ldr	r2, [pc, #252]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f4:	f7fd f97a 	bl	8000cec <HAL_GetTick>
 80039f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039fa:	e009      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039fc:	f7fd f976 	bl	8000cec <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d902      	bls.n	8003a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a0e:	e005      	b.n	8003a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a10:	4b36      	ldr	r3, [pc, #216]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ef      	bne.n	80039fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a1c:	7bfb      	ldrb	r3, [r7, #15]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d15f      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d110      	bne.n	8003a4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a28:	4b30      	ldr	r3, [pc, #192]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003a30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6892      	ldr	r2, [r2, #8]
 8003a38:	0211      	lsls	r1, r2, #8
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68d2      	ldr	r2, [r2, #12]
 8003a3e:	06d2      	lsls	r2, r2, #27
 8003a40:	430a      	orrs	r2, r1
 8003a42:	492a      	ldr	r1, [pc, #168]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	610b      	str	r3, [r1, #16]
 8003a48:	e027      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d112      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a50:	4b26      	ldr	r3, [pc, #152]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6892      	ldr	r2, [r2, #8]
 8003a60:	0211      	lsls	r1, r2, #8
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6912      	ldr	r2, [r2, #16]
 8003a66:	0852      	lsrs	r2, r2, #1
 8003a68:	3a01      	subs	r2, #1
 8003a6a:	0552      	lsls	r2, r2, #21
 8003a6c:	430a      	orrs	r2, r1
 8003a6e:	491f      	ldr	r1, [pc, #124]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	610b      	str	r3, [r1, #16]
 8003a74:	e011      	b.n	8003a9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a76:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a7e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6892      	ldr	r2, [r2, #8]
 8003a86:	0211      	lsls	r1, r2, #8
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6952      	ldr	r2, [r2, #20]
 8003a8c:	0852      	lsrs	r2, r2, #1
 8003a8e:	3a01      	subs	r2, #1
 8003a90:	0652      	lsls	r2, r2, #25
 8003a92:	430a      	orrs	r2, r1
 8003a94:	4915      	ldr	r1, [pc, #84]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a9a:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003aa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa6:	f7fd f921 	bl	8000cec <HAL_GetTick>
 8003aaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aac:	e009      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aae:	f7fd f91d 	bl	8000cec <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d902      	bls.n	8003ac2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	73fb      	strb	r3, [r7, #15]
          break;
 8003ac0:	e005      	b.n	8003ace <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0ef      	beq.n	8003aae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ad4:	4b05      	ldr	r3, [pc, #20]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	4903      	ldr	r1, [pc, #12]	@ (8003aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	40021000 	.word	0x40021000

08003af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e049      	b.n	8003b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fc ff72 	bl	8000a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4610      	mov	r0, r2
 8003b30:	f000 fa84 	bl	800403c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b94:	2300      	movs	r3, #0
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3708      	adds	r7, #8
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
	...

08003ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d001      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e033      	b.n	8003c20 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a19      	ldr	r2, [pc, #100]	@ (8003c2c <HAL_TIM_Base_Start+0x8c>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d009      	beq.n	8003bde <HAL_TIM_Base_Start+0x3e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_Base_Start+0x3e>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a15      	ldr	r2, [pc, #84]	@ (8003c30 <HAL_TIM_Base_Start+0x90>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d115      	bne.n	8003c0a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	4b13      	ldr	r3, [pc, #76]	@ (8003c34 <HAL_TIM_Base_Start+0x94>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b06      	cmp	r3, #6
 8003bee:	d015      	beq.n	8003c1c <HAL_TIM_Base_Start+0x7c>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf6:	d011      	beq.n	8003c1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0201 	orr.w	r2, r2, #1
 8003c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c08:	e008      	b.n	8003c1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e000      	b.n	8003c1e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c1e:	2300      	movs	r3, #0
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40014000 	.word	0x40014000
 8003c34:	00010007 	.word	0x00010007

08003c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d020      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01b      	beq.n	8003c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f06f 0202 	mvn.w	r2, #2
 8003c6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f003 0303 	and.w	r3, r3, #3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f9bc 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003c88:	e005      	b.n	8003c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f9ae 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f9bf 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d020      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f003 0304 	and.w	r3, r3, #4
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d01b      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f06f 0204 	mvn.w	r2, #4
 8003cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f996 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003cd4:	e005      	b.n	8003ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f988 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f999 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d020      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0208 	mvn.w	r2, #8
 8003d04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2204      	movs	r2, #4
 8003d0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	69db      	ldr	r3, [r3, #28]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f970 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f962 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f973 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d020      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f003 0310 	and.w	r3, r3, #16
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d01b      	beq.n	8003d80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f06f 0210 	mvn.w	r2, #16
 8003d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2208      	movs	r2, #8
 8003d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 f94a 	bl	8004000 <HAL_TIM_IC_CaptureCallback>
 8003d6c:	e005      	b.n	8003d7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f93c 	bl	8003fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f94d 	bl	8004014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d007      	beq.n	8003da4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f06f 0201 	mvn.w	r2, #1
 8003d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f000 f91a 	bl	8003fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d104      	bne.n	8003db8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00c      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d007      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 faaf 	bl	8004330 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00c      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 faa7 	bl	8004344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00c      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d007      	beq.n	8003e1a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f907 	bl	8004028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00c      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0320 	and.w	r3, r3, #32
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f06f 0220 	mvn.w	r2, #32
 8003e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 fa6f 	bl	800431c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d101      	bne.n	8003e62 <HAL_TIM_ConfigClockSource+0x1c>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0b6      	b.n	8003fd0 <HAL_TIM_ConfigClockSource+0x18a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e80:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e9e:	d03e      	beq.n	8003f1e <HAL_TIM_ConfigClockSource+0xd8>
 8003ea0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ea4:	f200 8087 	bhi.w	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eac:	f000 8086 	beq.w	8003fbc <HAL_TIM_ConfigClockSource+0x176>
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d87f      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003eb6:	2b70      	cmp	r3, #112	@ 0x70
 8003eb8:	d01a      	beq.n	8003ef0 <HAL_TIM_ConfigClockSource+0xaa>
 8003eba:	2b70      	cmp	r3, #112	@ 0x70
 8003ebc:	d87b      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ebe:	2b60      	cmp	r3, #96	@ 0x60
 8003ec0:	d050      	beq.n	8003f64 <HAL_TIM_ConfigClockSource+0x11e>
 8003ec2:	2b60      	cmp	r3, #96	@ 0x60
 8003ec4:	d877      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ec6:	2b50      	cmp	r3, #80	@ 0x50
 8003ec8:	d03c      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0xfe>
 8003eca:	2b50      	cmp	r3, #80	@ 0x50
 8003ecc:	d873      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ece:	2b40      	cmp	r3, #64	@ 0x40
 8003ed0:	d058      	beq.n	8003f84 <HAL_TIM_ConfigClockSource+0x13e>
 8003ed2:	2b40      	cmp	r3, #64	@ 0x40
 8003ed4:	d86f      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ed6:	2b30      	cmp	r3, #48	@ 0x30
 8003ed8:	d064      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x15e>
 8003eda:	2b30      	cmp	r3, #48	@ 0x30
 8003edc:	d86b      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d060      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x15e>
 8003ee2:	2b20      	cmp	r3, #32
 8003ee4:	d867      	bhi.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d05c      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x15e>
 8003eea:	2b10      	cmp	r3, #16
 8003eec:	d05a      	beq.n	8003fa4 <HAL_TIM_ConfigClockSource+0x15e>
 8003eee:	e062      	b.n	8003fb6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f00:	f000 f986 	bl	8004210 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	609a      	str	r2, [r3, #8]
      break;
 8003f1c:	e04f      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f2e:	f000 f96f 	bl	8004210 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f40:	609a      	str	r2, [r3, #8]
      break;
 8003f42:	e03c      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f50:	461a      	mov	r2, r3
 8003f52:	f000 f8e3 	bl	800411c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2150      	movs	r1, #80	@ 0x50
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 f93c 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003f62:	e02c      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f70:	461a      	mov	r2, r3
 8003f72:	f000 f902 	bl	800417a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2160      	movs	r1, #96	@ 0x60
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 f92c 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003f82:	e01c      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f90:	461a      	mov	r2, r3
 8003f92:	f000 f8c3 	bl	800411c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2140      	movs	r1, #64	@ 0x40
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 f91c 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003fa2:	e00c      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f000 f913 	bl	80041da <TIM_ITRx_SetConfig>
      break;
 8003fb4:	e003      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fba:	e000      	b.n	8003fbe <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fbc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fe0:	bf00      	nop
 8003fe2:	370c      	adds	r7, #12
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff4:	bf00      	nop
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a30      	ldr	r2, [pc, #192]	@ (8004110 <TIM_Base_SetConfig+0xd4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0x20>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405a:	d108      	bne.n	800406e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a27      	ldr	r2, [pc, #156]	@ (8004110 <TIM_Base_SetConfig+0xd4>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d00b      	beq.n	800408e <TIM_Base_SetConfig+0x52>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d007      	beq.n	800408e <TIM_Base_SetConfig+0x52>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a24      	ldr	r2, [pc, #144]	@ (8004114 <TIM_Base_SetConfig+0xd8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d003      	beq.n	800408e <TIM_Base_SetConfig+0x52>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a23      	ldr	r2, [pc, #140]	@ (8004118 <TIM_Base_SetConfig+0xdc>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d108      	bne.n	80040a0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689a      	ldr	r2, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a12      	ldr	r2, [pc, #72]	@ (8004110 <TIM_Base_SetConfig+0xd4>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d007      	beq.n	80040dc <TIM_Base_SetConfig+0xa0>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a11      	ldr	r2, [pc, #68]	@ (8004114 <TIM_Base_SetConfig+0xd8>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d003      	beq.n	80040dc <TIM_Base_SetConfig+0xa0>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a10      	ldr	r2, [pc, #64]	@ (8004118 <TIM_Base_SetConfig+0xdc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d103      	bne.n	80040e4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	691a      	ldr	r2, [r3, #16]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f023 0201 	bic.w	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	611a      	str	r2, [r3, #16]
  }
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40014000 	.word	0x40014000
 8004118:	40014400 	.word	0x40014400

0800411c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004146:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	4313      	orrs	r3, r2
 8004150:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f023 030a 	bic.w	r3, r3, #10
 8004158:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4313      	orrs	r3, r2
 8004160:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	621a      	str	r2, [r3, #32]
}
 800416e:	bf00      	nop
 8004170:	371c      	adds	r7, #28
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr

0800417a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800417a:	b480      	push	{r7}
 800417c:	b087      	sub	sp, #28
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a1b      	ldr	r3, [r3, #32]
 800418a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	f023 0210 	bic.w	r2, r3, #16
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	031b      	lsls	r3, r3, #12
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	011b      	lsls	r3, r3, #4
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	4313      	orrs	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	693a      	ldr	r2, [r7, #16]
 80041c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	621a      	str	r2, [r3, #32]
}
 80041ce:	bf00      	nop
 80041d0:	371c      	adds	r7, #28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041da:	b480      	push	{r7}
 80041dc:	b085      	sub	sp, #20
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
 80041e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f043 0307 	orr.w	r3, r3, #7
 80041fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	609a      	str	r2, [r3, #8]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004210:	b480      	push	{r7}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800422a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	021a      	lsls	r2, r3, #8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	431a      	orrs	r2, r3
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	609a      	str	r2, [r3, #8]
}
 8004244:	bf00      	nop
 8004246:	371c      	adds	r7, #28
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004250:	b480      	push	{r7}
 8004252:	b085      	sub	sp, #20
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e04f      	b.n	8004308 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a21      	ldr	r2, [pc, #132]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d108      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004298:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a14      	ldr	r2, [pc, #80]	@ (8004314 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d009      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042d0:	d004      	beq.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a10      	ldr	r2, [pc, #64]	@ (8004318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d10c      	bne.n	80042f6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2201      	movs	r2, #1
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr
 8004314:	40012c00 	.word	0x40012c00
 8004318:	40014000 	.word	0x40014000

0800431c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e040      	b.n	80043ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fb64 	bl	8000a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2224      	movs	r2, #36	@ 0x24
 8004384:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fd7a 	bl	8004e98 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fb4b 	bl	8004a40 <UART_SetConfig>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e01b      	b.n	80043ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	689a      	ldr	r2, [r3, #8]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f042 0201 	orr.w	r2, r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 fdf9 	bl	8004fdc <UART_CheckIdleState>
 80043ea:	4603      	mov	r3, r0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3708      	adds	r7, #8
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0ba      	sub	sp, #232	@ 0xe8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800441a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800441e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004422:	4013      	ands	r3, r2
 8004424:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004428:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800442c:	2b00      	cmp	r3, #0
 800442e:	d115      	bne.n	800445c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004434:	f003 0320 	and.w	r3, r3, #32
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00f      	beq.n	800445c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800443c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004440:	f003 0320 	and.w	r3, r3, #32
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 82ca 	beq.w	80049e6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	4798      	blx	r3
      }
      return;
 800445a:	e2c4      	b.n	80049e6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800445c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8117 	beq.w	8004694 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004466:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004472:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004476:	4b85      	ldr	r3, [pc, #532]	@ (800468c <HAL_UART_IRQHandler+0x298>)
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 810a 	beq.w	8004694 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d011      	beq.n	80044b0 <HAL_UART_IRQHandler+0xbc>
 800448c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00b      	beq.n	80044b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2201      	movs	r2, #1
 800449e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a6:	f043 0201 	orr.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d011      	beq.n	80044e0 <HAL_UART_IRQHandler+0xec>
 80044bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2202      	movs	r2, #2
 80044ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d011      	beq.n	8004510 <HAL_UART_IRQHandler+0x11c>
 80044ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2204      	movs	r2, #4
 80044fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004506:	f043 0202 	orr.w	r2, r3, #2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004514:	f003 0308 	and.w	r3, r3, #8
 8004518:	2b00      	cmp	r3, #0
 800451a:	d017      	beq.n	800454c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d105      	bne.n	8004534 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800452c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00b      	beq.n	800454c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2208      	movs	r2, #8
 800453a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004542:	f043 0208 	orr.w	r2, r3, #8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800454c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004550:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004554:	2b00      	cmp	r3, #0
 8004556:	d012      	beq.n	800457e <HAL_UART_IRQHandler+0x18a>
 8004558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800455c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800456c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004574:	f043 0220 	orr.w	r2, r3, #32
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8230 	beq.w	80049ea <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458e:	f003 0320 	and.w	r3, r3, #32
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00d      	beq.n	80045b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800459a:	f003 0320 	and.w	r3, r3, #32
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045c6:	2b40      	cmp	r3, #64	@ 0x40
 80045c8:	d005      	beq.n	80045d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80045ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80045ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04f      	beq.n	8004676 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fe15 	bl	8005206 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e6:	2b40      	cmp	r3, #64	@ 0x40
 80045e8:	d141      	bne.n	800466e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004600:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004604:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004608:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3308      	adds	r3, #8
 8004612:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004616:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800461a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004622:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004626:	e841 2300 	strex	r3, r2, [r1]
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800462e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1d9      	bne.n	80045ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800463a:	2b00      	cmp	r3, #0
 800463c:	d013      	beq.n	8004666 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004642:	4a13      	ldr	r2, [pc, #76]	@ (8004690 <HAL_UART_IRQHandler+0x29c>)
 8004644:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800464a:	4618      	mov	r0, r3
 800464c:	f7fd fee9 	bl	8002422 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d017      	beq.n	8004686 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004664:	e00f      	b.n	8004686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9d4 	bl	8004a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800466c:	e00b      	b.n	8004686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f9d0 	bl	8004a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004674:	e007      	b.n	8004686 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9cc 	bl	8004a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004684:	e1b1      	b.n	80049ea <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	bf00      	nop
    return;
 8004688:	e1af      	b.n	80049ea <HAL_UART_IRQHandler+0x5f6>
 800468a:	bf00      	nop
 800468c:	04000120 	.word	0x04000120
 8004690:	080052cf 	.word	0x080052cf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004698:	2b01      	cmp	r3, #1
 800469a:	f040 816a 	bne.w	8004972 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 8163 	beq.w	8004972 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 815c 	beq.w	8004972 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2210      	movs	r2, #16
 80046c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046cc:	2b40      	cmp	r3, #64	@ 0x40
 80046ce:	f040 80d4 	bne.w	800487a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80ad 	beq.w	8004842 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046f2:	429a      	cmp	r2, r3
 80046f4:	f080 80a5 	bcs.w	8004842 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046fe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0320 	and.w	r3, r3, #32
 800470e:	2b00      	cmp	r3, #0
 8004710:	f040 8086 	bne.w	8004820 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004720:	e853 3f00 	ldrex	r3, [r3]
 8004724:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004728:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800472c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004730:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800473e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004742:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004746:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800474a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800474e:	e841 2300 	strex	r3, r2, [r1]
 8004752:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004756:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1da      	bne.n	8004714 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800476e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004770:	f023 0301 	bic.w	r3, r3, #1
 8004774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004782:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004786:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800478a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004794:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e1      	bne.n	800475e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80047aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80047ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80047be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80047c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80047c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80047cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e3      	bne.n	800479a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2220      	movs	r2, #32
 80047d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047e8:	e853 3f00 	ldrex	r3, [r3]
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80047ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047f0:	f023 0310 	bic.w	r3, r3, #16
 80047f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004802:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004804:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004808:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800480a:	e841 2300 	strex	r3, r2, [r1]
 800480e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004810:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1e4      	bne.n	80047e0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481a:	4618      	mov	r0, r3
 800481c:	f7fd fdc3 	bl	80023a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004832:	b29b      	uxth	r3, r3
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	b29b      	uxth	r3, r3
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f000 f8f4 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004840:	e0d5      	b.n	80049ee <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004848:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800484c:	429a      	cmp	r2, r3
 800484e:	f040 80ce 	bne.w	80049ee <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b20      	cmp	r3, #32
 8004860:	f040 80c5 	bne.w	80049ee <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004870:	4619      	mov	r1, r3
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f8d8 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
      return;
 8004878:	e0b9      	b.n	80049ee <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004886:	b29b      	uxth	r3, r3
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004894:	b29b      	uxth	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80ab 	beq.w	80049f2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800489c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80a6 	beq.w	80049f2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ae:	e853 3f00 	ldrex	r3, [r3]
 80048b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80048b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80048c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80048ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d0:	e841 2300 	strex	r3, r2, [r1]
 80048d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80048d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e4      	bne.n	80048a6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	623b      	str	r3, [r7, #32]
   return(result);
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	f023 0301 	bic.w	r3, r3, #1
 80048f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	3308      	adds	r3, #8
 80048fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004900:	633a      	str	r2, [r7, #48]	@ 0x30
 8004902:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004906:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800490e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e3      	bne.n	80048dc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2220      	movs	r2, #32
 8004918:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	60fb      	str	r3, [r7, #12]
   return(result);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f023 0310 	bic.w	r3, r3, #16
 800493c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800494a:	61fb      	str	r3, [r7, #28]
 800494c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	69b9      	ldr	r1, [r7, #24]
 8004950:	69fa      	ldr	r2, [r7, #28]
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	617b      	str	r3, [r7, #20]
   return(result);
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e4      	bne.n	8004928 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004964:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004968:	4619      	mov	r1, r3
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f85c 	bl	8004a28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004970:	e03f      	b.n	80049f2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004976:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00e      	beq.n	800499c <HAL_UART_IRQHandler+0x5a8>
 800497e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d008      	beq.n	800499c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004992:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 fcda 	bl	800534e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800499a:	e02d      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800499c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00e      	beq.n	80049c6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d008      	beq.n	80049c6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d01c      	beq.n	80049f6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	4798      	blx	r3
    }
    return;
 80049c4:	e017      	b.n	80049f6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d012      	beq.n	80049f8 <HAL_UART_IRQHandler+0x604>
 80049d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00c      	beq.n	80049f8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fc8b 	bl	80052fa <UART_EndTransmit_IT>
    return;
 80049e4:	e008      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
      return;
 80049e6:	bf00      	nop
 80049e8:	e006      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
    return;
 80049ea:	bf00      	nop
 80049ec:	e004      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
      return;
 80049ee:	bf00      	nop
 80049f0:	e002      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
      return;
 80049f2:	bf00      	nop
 80049f4:	e000      	b.n	80049f8 <HAL_UART_IRQHandler+0x604>
    return;
 80049f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80049f8:	37e8      	adds	r7, #232	@ 0xe8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop

08004a00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a44:	b08a      	sub	sp, #40	@ 0x28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	689a      	ldr	r2, [r3, #8]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	431a      	orrs	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	69db      	ldr	r3, [r3, #28]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	4bb4      	ldr	r3, [pc, #720]	@ (8004d40 <UART_SetConfig+0x300>)
 8004a70:	4013      	ands	r3, r2
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	6812      	ldr	r2, [r2, #0]
 8004a76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4aa9      	ldr	r2, [pc, #676]	@ (8004d44 <UART_SetConfig+0x304>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d004      	beq.n	8004aac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004abc:	430a      	orrs	r2, r1
 8004abe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4aa0      	ldr	r2, [pc, #640]	@ (8004d48 <UART_SetConfig+0x308>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d126      	bne.n	8004b18 <UART_SetConfig+0xd8>
 8004aca:	4ba0      	ldr	r3, [pc, #640]	@ (8004d4c <UART_SetConfig+0x30c>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad0:	f003 0303 	and.w	r3, r3, #3
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d81b      	bhi.n	8004b10 <UART_SetConfig+0xd0>
 8004ad8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <UART_SetConfig+0xa0>)
 8004ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ade:	bf00      	nop
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004b09 	.word	0x08004b09
 8004af0:	2301      	movs	r3, #1
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004af6:	e080      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004af8:	2302      	movs	r3, #2
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004afe:	e07c      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b06:	e078      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b0e:	e074      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b16:	e070      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a8c      	ldr	r2, [pc, #560]	@ (8004d50 <UART_SetConfig+0x310>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d138      	bne.n	8004b94 <UART_SetConfig+0x154>
 8004b22:	4b8a      	ldr	r3, [pc, #552]	@ (8004d4c <UART_SetConfig+0x30c>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b28:	f003 030c 	and.w	r3, r3, #12
 8004b2c:	2b0c      	cmp	r3, #12
 8004b2e:	d82d      	bhi.n	8004b8c <UART_SetConfig+0x14c>
 8004b30:	a201      	add	r2, pc, #4	@ (adr r2, 8004b38 <UART_SetConfig+0xf8>)
 8004b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b36:	bf00      	nop
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004b8d 	.word	0x08004b8d
 8004b40:	08004b8d 	.word	0x08004b8d
 8004b44:	08004b8d 	.word	0x08004b8d
 8004b48:	08004b7d 	.word	0x08004b7d
 8004b4c:	08004b8d 	.word	0x08004b8d
 8004b50:	08004b8d 	.word	0x08004b8d
 8004b54:	08004b8d 	.word	0x08004b8d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	08004b8d 	.word	0x08004b8d
 8004b68:	08004b85 	.word	0x08004b85
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b72:	e042      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b74:	2302      	movs	r3, #2
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b7a:	e03e      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b7c:	2304      	movs	r3, #4
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b82:	e03a      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b84:	2308      	movs	r3, #8
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b8a:	e036      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004b92:	e032      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6a      	ldr	r2, [pc, #424]	@ (8004d44 <UART_SetConfig+0x304>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d12a      	bne.n	8004bf4 <UART_SetConfig+0x1b4>
 8004b9e:	4b6b      	ldr	r3, [pc, #428]	@ (8004d4c <UART_SetConfig+0x30c>)
 8004ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ba8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bac:	d01a      	beq.n	8004be4 <UART_SetConfig+0x1a4>
 8004bae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004bb2:	d81b      	bhi.n	8004bec <UART_SetConfig+0x1ac>
 8004bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bb8:	d00c      	beq.n	8004bd4 <UART_SetConfig+0x194>
 8004bba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bbe:	d815      	bhi.n	8004bec <UART_SetConfig+0x1ac>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x18c>
 8004bc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bc8:	d008      	beq.n	8004bdc <UART_SetConfig+0x19c>
 8004bca:	e00f      	b.n	8004bec <UART_SetConfig+0x1ac>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bd2:	e012      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bda:	e00e      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bdc:	2304      	movs	r3, #4
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004be2:	e00a      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004be4:	2308      	movs	r3, #8
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bea:	e006      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bec:	2310      	movs	r3, #16
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bf2:	e002      	b.n	8004bfa <UART_SetConfig+0x1ba>
 8004bf4:	2310      	movs	r3, #16
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a51      	ldr	r2, [pc, #324]	@ (8004d44 <UART_SetConfig+0x304>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d17a      	bne.n	8004cfa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d824      	bhi.n	8004c56 <UART_SetConfig+0x216>
 8004c0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004c14 <UART_SetConfig+0x1d4>)
 8004c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c12:	bf00      	nop
 8004c14:	08004c39 	.word	0x08004c39
 8004c18:	08004c57 	.word	0x08004c57
 8004c1c:	08004c41 	.word	0x08004c41
 8004c20:	08004c57 	.word	0x08004c57
 8004c24:	08004c47 	.word	0x08004c47
 8004c28:	08004c57 	.word	0x08004c57
 8004c2c:	08004c57 	.word	0x08004c57
 8004c30:	08004c57 	.word	0x08004c57
 8004c34:	08004c4f 	.word	0x08004c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c38:	f7fe fbd6 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8004c3c:	61f8      	str	r0, [r7, #28]
        break;
 8004c3e:	e010      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c40:	4b44      	ldr	r3, [pc, #272]	@ (8004d54 <UART_SetConfig+0x314>)
 8004c42:	61fb      	str	r3, [r7, #28]
        break;
 8004c44:	e00d      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c46:	f7fe fb37 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8004c4a:	61f8      	str	r0, [r7, #28]
        break;
 8004c4c:	e009      	b.n	8004c62 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c52:	61fb      	str	r3, [r7, #28]
        break;
 8004c54:	e005      	b.n	8004c62 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8107 	beq.w	8004e78 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	4413      	add	r3, r2
 8004c74:	69fa      	ldr	r2, [r7, #28]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d305      	bcc.n	8004c86 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d903      	bls.n	8004c8e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c8c:	e0f4      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	2200      	movs	r2, #0
 8004c92:	461c      	mov	r4, r3
 8004c94:	4615      	mov	r5, r2
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	f04f 0300 	mov.w	r3, #0
 8004c9e:	022b      	lsls	r3, r5, #8
 8004ca0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ca4:	0222      	lsls	r2, r4, #8
 8004ca6:	68f9      	ldr	r1, [r7, #12]
 8004ca8:	6849      	ldr	r1, [r1, #4]
 8004caa:	0849      	lsrs	r1, r1, #1
 8004cac:	2000      	movs	r0, #0
 8004cae:	4688      	mov	r8, r1
 8004cb0:	4681      	mov	r9, r0
 8004cb2:	eb12 0a08 	adds.w	sl, r2, r8
 8004cb6:	eb43 0b09 	adc.w	fp, r3, r9
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	603b      	str	r3, [r7, #0]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc8:	4650      	mov	r0, sl
 8004cca:	4659      	mov	r1, fp
 8004ccc:	f7fb fa7e 	bl	80001cc <__aeabi_uldivmod>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cde:	d308      	bcc.n	8004cf2 <UART_SetConfig+0x2b2>
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce6:	d204      	bcs.n	8004cf2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	60da      	str	r2, [r3, #12]
 8004cf0:	e0c2      	b.n	8004e78 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cf8:	e0be      	b.n	8004e78 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d02:	d16a      	bne.n	8004dda <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004d04:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d834      	bhi.n	8004d76 <UART_SetConfig+0x336>
 8004d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d14 <UART_SetConfig+0x2d4>)
 8004d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d12:	bf00      	nop
 8004d14:	08004d39 	.word	0x08004d39
 8004d18:	08004d59 	.word	0x08004d59
 8004d1c:	08004d61 	.word	0x08004d61
 8004d20:	08004d77 	.word	0x08004d77
 8004d24:	08004d67 	.word	0x08004d67
 8004d28:	08004d77 	.word	0x08004d77
 8004d2c:	08004d77 	.word	0x08004d77
 8004d30:	08004d77 	.word	0x08004d77
 8004d34:	08004d6f 	.word	0x08004d6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d38:	f7fe fb56 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	61f8      	str	r0, [r7, #28]
        break;
 8004d3e:	e020      	b.n	8004d82 <UART_SetConfig+0x342>
 8004d40:	efff69f3 	.word	0xefff69f3
 8004d44:	40008000 	.word	0x40008000
 8004d48:	40013800 	.word	0x40013800
 8004d4c:	40021000 	.word	0x40021000
 8004d50:	40004400 	.word	0x40004400
 8004d54:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d58:	f7fe fb5c 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8004d5c:	61f8      	str	r0, [r7, #28]
        break;
 8004d5e:	e010      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b4c      	ldr	r3, [pc, #304]	@ (8004e94 <UART_SetConfig+0x454>)
 8004d62:	61fb      	str	r3, [r7, #28]
        break;
 8004d64:	e00d      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d66:	f7fe faa7 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8004d6a:	61f8      	str	r0, [r7, #28]
        break;
 8004d6c:	e009      	b.n	8004d82 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	61fb      	str	r3, [r7, #28]
        break;
 8004d74:	e005      	b.n	8004d82 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004d76:	2300      	movs	r3, #0
 8004d78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d80:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d077      	beq.n	8004e78 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	005a      	lsls	r2, r3, #1
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	085b      	lsrs	r3, r3, #1
 8004d92:	441a      	add	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d916      	bls.n	8004dd2 <UART_SetConfig+0x392>
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004daa:	d212      	bcs.n	8004dd2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f023 030f 	bic.w	r3, r3, #15
 8004db4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	b29a      	uxth	r2, r3
 8004dc2:	8afb      	ldrh	r3, [r7, #22]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	8afa      	ldrh	r2, [r7, #22]
 8004dce:	60da      	str	r2, [r3, #12]
 8004dd0:	e052      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004dd8:	e04e      	b.n	8004e78 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004dda:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d827      	bhi.n	8004e32 <UART_SetConfig+0x3f2>
 8004de2:	a201      	add	r2, pc, #4	@ (adr r2, 8004de8 <UART_SetConfig+0x3a8>)
 8004de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de8:	08004e0d 	.word	0x08004e0d
 8004dec:	08004e15 	.word	0x08004e15
 8004df0:	08004e1d 	.word	0x08004e1d
 8004df4:	08004e33 	.word	0x08004e33
 8004df8:	08004e23 	.word	0x08004e23
 8004dfc:	08004e33 	.word	0x08004e33
 8004e00:	08004e33 	.word	0x08004e33
 8004e04:	08004e33 	.word	0x08004e33
 8004e08:	08004e2b 	.word	0x08004e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e0c:	f7fe faec 	bl	80033e8 <HAL_RCC_GetPCLK1Freq>
 8004e10:	61f8      	str	r0, [r7, #28]
        break;
 8004e12:	e014      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e14:	f7fe fafe 	bl	8003414 <HAL_RCC_GetPCLK2Freq>
 8004e18:	61f8      	str	r0, [r7, #28]
        break;
 8004e1a:	e010      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e94 <UART_SetConfig+0x454>)
 8004e1e:	61fb      	str	r3, [r7, #28]
        break;
 8004e20:	e00d      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e22:	f7fe fa49 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8004e26:	61f8      	str	r0, [r7, #28]
        break;
 8004e28:	e009      	b.n	8004e3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e2e:	61fb      	str	r3, [r7, #28]
        break;
 8004e30:	e005      	b.n	8004e3e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e3c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d019      	beq.n	8004e78 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	085a      	lsrs	r2, r3, #1
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	441a      	add	r2, r3
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0f      	cmp	r3, #15
 8004e5c:	d909      	bls.n	8004e72 <UART_SetConfig+0x432>
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e64:	d205      	bcs.n	8004e72 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	60da      	str	r2, [r3, #12]
 8004e70:	e002      	b.n	8004e78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2200      	movs	r2, #0
 8004e82:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	@ 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	00f42400 	.word	0x00f42400

08004e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	f003 0304 	and.w	r3, r3, #4
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0310 	and.w	r3, r3, #16
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4e:	f003 0320 	and.w	r3, r3, #32
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01a      	beq.n	8004fae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f96:	d10a      	bne.n	8004fae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	605a      	str	r2, [r3, #4]
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b098      	sub	sp, #96	@ 0x60
 8004fe0:	af02      	add	r7, sp, #8
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004fec:	f7fb fe7e 	bl	8000cec <HAL_GetTick>
 8004ff0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0308 	and.w	r3, r3, #8
 8004ffc:	2b08      	cmp	r3, #8
 8004ffe:	d12e      	bne.n	800505e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	2200      	movs	r2, #0
 800500a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f88c 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d021      	beq.n	800505e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005028:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800502e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005038:	647b      	str	r3, [r7, #68]	@ 0x44
 800503a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800503e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e6      	bne.n	800501a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e062      	b.n	8005124 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	2b04      	cmp	r3, #4
 800506a:	d149      	bne.n	8005100 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800506c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005074:	2200      	movs	r2, #0
 8005076:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f856 	bl	800512c <UART_WaitOnFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d03c      	beq.n	8005100 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508e:	e853 3f00 	ldrex	r3, [r3]
 8005092:	623b      	str	r3, [r7, #32]
   return(result);
 8005094:	6a3b      	ldr	r3, [r7, #32]
 8005096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800509a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	461a      	mov	r2, r3
 80050a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ac:	e841 2300 	strex	r3, r2, [r1]
 80050b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1e6      	bne.n	8005086 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3308      	adds	r3, #8
 80050be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0301 	bic.w	r3, r3, #1
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3308      	adds	r3, #8
 80050d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050d8:	61fa      	str	r2, [r7, #28]
 80050da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	617b      	str	r3, [r7, #20]
   return(result);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e5      	bne.n	80050b8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e011      	b.n	8005124 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2220      	movs	r2, #32
 8005104:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3758      	adds	r7, #88	@ 0x58
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}

0800512c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b084      	sub	sp, #16
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	603b      	str	r3, [r7, #0]
 8005138:	4613      	mov	r3, r2
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513c:	e04f      	b.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d04b      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fb fdd1 	bl	8000cec <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	69ba      	ldr	r2, [r7, #24]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <UART_WaitOnFlagUntilTimeout+0x30>
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e04e      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0304 	and.w	r3, r3, #4
 800516a:	2b00      	cmp	r3, #0
 800516c:	d037      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b80      	cmp	r3, #128	@ 0x80
 8005172:	d034      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b40      	cmp	r3, #64	@ 0x40
 8005178:	d031      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	69db      	ldr	r3, [r3, #28]
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	2b08      	cmp	r3, #8
 8005186:	d110      	bne.n	80051aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2208      	movs	r2, #8
 800518e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f838 	bl	8005206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2208      	movs	r2, #8
 800519a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e029      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b8:	d111      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f000 f81e 	bl	8005206 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2220      	movs	r2, #32
 80051ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e00f      	b.n	80051fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	69da      	ldr	r2, [r3, #28]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	bf0c      	ite	eq
 80051ee:	2301      	moveq	r3, #1
 80051f0:	2300      	movne	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	461a      	mov	r2, r3
 80051f6:	79fb      	ldrb	r3, [r7, #7]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d0a0      	beq.n	800513e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005206:	b480      	push	{r7}
 8005208:	b095      	sub	sp, #84	@ 0x54
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005216:	e853 3f00 	ldrex	r3, [r3]
 800521a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800521c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	461a      	mov	r2, r3
 800522a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522c:	643b      	str	r3, [r7, #64]	@ 0x40
 800522e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005230:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005232:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005234:	e841 2300 	strex	r3, r2, [r1]
 8005238:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800523a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523c:	2b00      	cmp	r3, #0
 800523e:	d1e6      	bne.n	800520e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3308      	adds	r3, #8
 8005246:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	e853 3f00 	ldrex	r3, [r3]
 800524e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	f023 0301 	bic.w	r3, r3, #1
 8005256:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3308      	adds	r3, #8
 800525e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005260:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005262:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800526e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e5      	bne.n	8005240 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005278:	2b01      	cmp	r3, #1
 800527a:	d118      	bne.n	80052ae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	e853 3f00 	ldrex	r3, [r3]
 8005288:	60bb      	str	r3, [r7, #8]
   return(result);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	f023 0310 	bic.w	r3, r3, #16
 8005290:	647b      	str	r3, [r7, #68]	@ 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	461a      	mov	r2, r3
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	61bb      	str	r3, [r7, #24]
 800529c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6979      	ldr	r1, [r7, #20]
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	613b      	str	r3, [r7, #16]
   return(result);
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e6      	bne.n	800527c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052c2:	bf00      	nop
 80052c4:	3754      	adds	r7, #84	@ 0x54
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f7ff fb91 	bl	8004a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052f2:	bf00      	nop
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}

080052fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052fa:	b580      	push	{r7, lr}
 80052fc:	b088      	sub	sp, #32
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6979      	ldr	r1, [r7, #20]
 8005326:	69ba      	ldr	r2, [r7, #24]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	613b      	str	r3, [r7, #16]
   return(result);
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f7ff fb5d 	bl	8004a00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005346:	bf00      	nop
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800534e:	b480      	push	{r7}
 8005350:	b083      	sub	sp, #12
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <memset>:
 8005362:	4402      	add	r2, r0
 8005364:	4603      	mov	r3, r0
 8005366:	4293      	cmp	r3, r2
 8005368:	d100      	bne.n	800536c <memset+0xa>
 800536a:	4770      	bx	lr
 800536c:	f803 1b01 	strb.w	r1, [r3], #1
 8005370:	e7f9      	b.n	8005366 <memset+0x4>
	...

08005374 <__libc_init_array>:
 8005374:	b570      	push	{r4, r5, r6, lr}
 8005376:	4d0d      	ldr	r5, [pc, #52]	@ (80053ac <__libc_init_array+0x38>)
 8005378:	4c0d      	ldr	r4, [pc, #52]	@ (80053b0 <__libc_init_array+0x3c>)
 800537a:	1b64      	subs	r4, r4, r5
 800537c:	10a4      	asrs	r4, r4, #2
 800537e:	2600      	movs	r6, #0
 8005380:	42a6      	cmp	r6, r4
 8005382:	d109      	bne.n	8005398 <__libc_init_array+0x24>
 8005384:	4d0b      	ldr	r5, [pc, #44]	@ (80053b4 <__libc_init_array+0x40>)
 8005386:	4c0c      	ldr	r4, [pc, #48]	@ (80053b8 <__libc_init_array+0x44>)
 8005388:	f000 f818 	bl	80053bc <_init>
 800538c:	1b64      	subs	r4, r4, r5
 800538e:	10a4      	asrs	r4, r4, #2
 8005390:	2600      	movs	r6, #0
 8005392:	42a6      	cmp	r6, r4
 8005394:	d105      	bne.n	80053a2 <__libc_init_array+0x2e>
 8005396:	bd70      	pop	{r4, r5, r6, pc}
 8005398:	f855 3b04 	ldr.w	r3, [r5], #4
 800539c:	4798      	blx	r3
 800539e:	3601      	adds	r6, #1
 80053a0:	e7ee      	b.n	8005380 <__libc_init_array+0xc>
 80053a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a6:	4798      	blx	r3
 80053a8:	3601      	adds	r6, #1
 80053aa:	e7f2      	b.n	8005392 <__libc_init_array+0x1e>
 80053ac:	08005424 	.word	0x08005424
 80053b0:	08005424 	.word	0x08005424
 80053b4:	08005424 	.word	0x08005424
 80053b8:	08005428 	.word	0x08005428

080053bc <_init>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr

080053c8 <_fini>:
 80053c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ca:	bf00      	nop
 80053cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ce:	bc08      	pop	{r3}
 80053d0:	469e      	mov	lr, r3
 80053d2:	4770      	bx	lr
