
Sampling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005350  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080054dc  080054dc  000064dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005524  08005524  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005524  08005524  00006524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800552c  0800552c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800552c  0800552c  0000652c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005530  08005530  00006530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005534  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08005540  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08005540  00007164  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015484  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a2d  00000000  00000000  0001c4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0001eef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f00  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e31  00000000  00000000  00021130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151f2  00000000  00000000  00042f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6c09  00000000  00000000  00058153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ed5c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000525c  00000000  00000000  0012eda0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00133ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080054c4 	.word	0x080054c4

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080054c4 	.word	0x080054c4

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b988 	b.w	80004f4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	468e      	mov	lr, r1
 8000204:	4604      	mov	r4, r0
 8000206:	4688      	mov	r8, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d962      	bls.n	80002d8 <__udivmoddi4+0xdc>
 8000212:	fab2 f682 	clz	r6, r2
 8000216:	b14e      	cbz	r6, 800022c <__udivmoddi4+0x30>
 8000218:	f1c6 0320 	rsb	r3, r6, #32
 800021c:	fa01 f806 	lsl.w	r8, r1, r6
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	40b7      	lsls	r7, r6
 8000226:	ea43 0808 	orr.w	r8, r3, r8
 800022a:	40b4      	lsls	r4, r6
 800022c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000230:	fa1f fc87 	uxth.w	ip, r7
 8000234:	fbb8 f1fe 	udiv	r1, r8, lr
 8000238:	0c23      	lsrs	r3, r4, #16
 800023a:	fb0e 8811 	mls	r8, lr, r1, r8
 800023e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000242:	fb01 f20c 	mul.w	r2, r1, ip
 8000246:	429a      	cmp	r2, r3
 8000248:	d909      	bls.n	800025e <__udivmoddi4+0x62>
 800024a:	18fb      	adds	r3, r7, r3
 800024c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000250:	f080 80ea 	bcs.w	8000428 <__udivmoddi4+0x22c>
 8000254:	429a      	cmp	r2, r3
 8000256:	f240 80e7 	bls.w	8000428 <__udivmoddi4+0x22c>
 800025a:	3902      	subs	r1, #2
 800025c:	443b      	add	r3, r7
 800025e:	1a9a      	subs	r2, r3, r2
 8000260:	b2a3      	uxth	r3, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000272:	459c      	cmp	ip, r3
 8000274:	d909      	bls.n	800028a <__udivmoddi4+0x8e>
 8000276:	18fb      	adds	r3, r7, r3
 8000278:	f100 32ff 	add.w	r2, r0, #4294967295
 800027c:	f080 80d6 	bcs.w	800042c <__udivmoddi4+0x230>
 8000280:	459c      	cmp	ip, r3
 8000282:	f240 80d3 	bls.w	800042c <__udivmoddi4+0x230>
 8000286:	443b      	add	r3, r7
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028e:	eba3 030c 	sub.w	r3, r3, ip
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa2>
 8000296:	40f3      	lsrs	r3, r6
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xb6>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb0>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa2>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x14c>
 80002ba:	4573      	cmp	r3, lr
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xc8>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 8105 	bhi.w	80004ce <__udivmoddi4+0x2d2>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	4690      	mov	r8, r2
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	d0e5      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d2:	e9c5 4800 	strd	r4, r8, [r5]
 80002d6:	e7e2      	b.n	800029e <__udivmoddi4+0xa2>
 80002d8:	2a00      	cmp	r2, #0
 80002da:	f000 8090 	beq.w	80003fe <__udivmoddi4+0x202>
 80002de:	fab2 f682 	clz	r6, r2
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f040 80a4 	bne.w	8000430 <__udivmoddi4+0x234>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	0c03      	lsrs	r3, r0, #16
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	b280      	uxth	r0, r0
 80002f2:	b2bc      	uxth	r4, r7
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fa:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000302:	fb04 f20c 	mul.w	r2, r4, ip
 8000306:	429a      	cmp	r2, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x11e>
 800030a:	18fb      	adds	r3, r7, r3
 800030c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x11c>
 8000312:	429a      	cmp	r2, r3
 8000314:	f200 80e0 	bhi.w	80004d8 <__udivmoddi4+0x2dc>
 8000318:	46c4      	mov	ip, r8
 800031a:	1a9b      	subs	r3, r3, r2
 800031c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000320:	fb0e 3312 	mls	r3, lr, r2, r3
 8000324:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000328:	fb02 f404 	mul.w	r4, r2, r4
 800032c:	429c      	cmp	r4, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x144>
 8000330:	18fb      	adds	r3, r7, r3
 8000332:	f102 30ff 	add.w	r0, r2, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x142>
 8000338:	429c      	cmp	r4, r3
 800033a:	f200 80ca 	bhi.w	80004d2 <__udivmoddi4+0x2d6>
 800033e:	4602      	mov	r2, r0
 8000340:	1b1b      	subs	r3, r3, r4
 8000342:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x98>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa0e f401 	lsl.w	r4, lr, r1
 8000358:	fa20 f306 	lsr.w	r3, r0, r6
 800035c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000360:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000364:	4323      	orrs	r3, r4
 8000366:	fa00 f801 	lsl.w	r8, r0, r1
 800036a:	fa1f fc87 	uxth.w	ip, r7
 800036e:	fbbe f0f9 	udiv	r0, lr, r9
 8000372:	0c1c      	lsrs	r4, r3, #16
 8000374:	fb09 ee10 	mls	lr, r9, r0, lr
 8000378:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800037c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000380:	45a6      	cmp	lr, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x1a0>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 3aff 	add.w	sl, r0, #4294967295
 800038e:	f080 809c 	bcs.w	80004ca <__udivmoddi4+0x2ce>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8099 	bls.w	80004ca <__udivmoddi4+0x2ce>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	eba4 040e 	sub.w	r4, r4, lr
 80003a0:	fa1f fe83 	uxth.w	lr, r3
 80003a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a8:	fb09 4413 	mls	r4, r9, r3, r4
 80003ac:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b4:	45a4      	cmp	ip, r4
 80003b6:	d908      	bls.n	80003ca <__udivmoddi4+0x1ce>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f103 3eff 	add.w	lr, r3, #4294967295
 80003be:	f080 8082 	bcs.w	80004c6 <__udivmoddi4+0x2ca>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d97f      	bls.n	80004c6 <__udivmoddi4+0x2ca>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ce:	eba4 040c 	sub.w	r4, r4, ip
 80003d2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d6:	4564      	cmp	r4, ip
 80003d8:	4673      	mov	r3, lr
 80003da:	46e1      	mov	r9, ip
 80003dc:	d362      	bcc.n	80004a4 <__udivmoddi4+0x2a8>
 80003de:	d05f      	beq.n	80004a0 <__udivmoddi4+0x2a4>
 80003e0:	b15d      	cbz	r5, 80003fa <__udivmoddi4+0x1fe>
 80003e2:	ebb8 0203 	subs.w	r2, r8, r3
 80003e6:	eb64 0409 	sbc.w	r4, r4, r9
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	fa22 f301 	lsr.w	r3, r2, r1
 80003f2:	431e      	orrs	r6, r3
 80003f4:	40cc      	lsrs	r4, r1
 80003f6:	e9c5 6400 	strd	r6, r4, [r5]
 80003fa:	2100      	movs	r1, #0
 80003fc:	e74f      	b.n	800029e <__udivmoddi4+0xa2>
 80003fe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000402:	0c01      	lsrs	r1, r0, #16
 8000404:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000408:	b280      	uxth	r0, r0
 800040a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040e:	463b      	mov	r3, r7
 8000410:	4638      	mov	r0, r7
 8000412:	463c      	mov	r4, r7
 8000414:	46b8      	mov	r8, r7
 8000416:	46be      	mov	lr, r7
 8000418:	2620      	movs	r6, #32
 800041a:	fbb1 f1f7 	udiv	r1, r1, r7
 800041e:	eba2 0208 	sub.w	r2, r2, r8
 8000422:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000426:	e766      	b.n	80002f6 <__udivmoddi4+0xfa>
 8000428:	4601      	mov	r1, r0
 800042a:	e718      	b.n	800025e <__udivmoddi4+0x62>
 800042c:	4610      	mov	r0, r2
 800042e:	e72c      	b.n	800028a <__udivmoddi4+0x8e>
 8000430:	f1c6 0220 	rsb	r2, r6, #32
 8000434:	fa2e f302 	lsr.w	r3, lr, r2
 8000438:	40b7      	lsls	r7, r6
 800043a:	40b1      	lsls	r1, r6
 800043c:	fa20 f202 	lsr.w	r2, r0, r2
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	430a      	orrs	r2, r1
 8000446:	fbb3 f8fe 	udiv	r8, r3, lr
 800044a:	b2bc      	uxth	r4, r7
 800044c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb08 f904 	mul.w	r9, r8, r4
 800045a:	40b0      	lsls	r0, r6
 800045c:	4589      	cmp	r9, r1
 800045e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000462:	b280      	uxth	r0, r0
 8000464:	d93e      	bls.n	80004e4 <__udivmoddi4+0x2e8>
 8000466:	1879      	adds	r1, r7, r1
 8000468:	f108 3cff 	add.w	ip, r8, #4294967295
 800046c:	d201      	bcs.n	8000472 <__udivmoddi4+0x276>
 800046e:	4589      	cmp	r9, r1
 8000470:	d81f      	bhi.n	80004b2 <__udivmoddi4+0x2b6>
 8000472:	eba1 0109 	sub.w	r1, r1, r9
 8000476:	fbb1 f9fe 	udiv	r9, r1, lr
 800047a:	fb09 f804 	mul.w	r8, r9, r4
 800047e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000482:	b292      	uxth	r2, r2
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	4542      	cmp	r2, r8
 800048a:	d229      	bcs.n	80004e0 <__udivmoddi4+0x2e4>
 800048c:	18ba      	adds	r2, r7, r2
 800048e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000492:	d2c4      	bcs.n	800041e <__udivmoddi4+0x222>
 8000494:	4542      	cmp	r2, r8
 8000496:	d2c2      	bcs.n	800041e <__udivmoddi4+0x222>
 8000498:	f1a9 0102 	sub.w	r1, r9, #2
 800049c:	443a      	add	r2, r7
 800049e:	e7be      	b.n	800041e <__udivmoddi4+0x222>
 80004a0:	45f0      	cmp	r8, lr
 80004a2:	d29d      	bcs.n	80003e0 <__udivmoddi4+0x1e4>
 80004a4:	ebbe 0302 	subs.w	r3, lr, r2
 80004a8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004ac:	3801      	subs	r0, #1
 80004ae:	46e1      	mov	r9, ip
 80004b0:	e796      	b.n	80003e0 <__udivmoddi4+0x1e4>
 80004b2:	eba7 0909 	sub.w	r9, r7, r9
 80004b6:	4449      	add	r1, r9
 80004b8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004bc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c0:	fb09 f804 	mul.w	r8, r9, r4
 80004c4:	e7db      	b.n	800047e <__udivmoddi4+0x282>
 80004c6:	4673      	mov	r3, lr
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1ce>
 80004ca:	4650      	mov	r0, sl
 80004cc:	e766      	b.n	800039c <__udivmoddi4+0x1a0>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e6fd      	b.n	80002ce <__udivmoddi4+0xd2>
 80004d2:	443b      	add	r3, r7
 80004d4:	3a02      	subs	r2, #2
 80004d6:	e733      	b.n	8000340 <__udivmoddi4+0x144>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	443b      	add	r3, r7
 80004de:	e71c      	b.n	800031a <__udivmoddi4+0x11e>
 80004e0:	4649      	mov	r1, r9
 80004e2:	e79c      	b.n	800041e <__udivmoddi4+0x222>
 80004e4:	eba1 0109 	sub.w	r1, r1, r9
 80004e8:	46c4      	mov	ip, r8
 80004ea:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ee:	fb09 f804 	mul.w	r8, r9, r4
 80004f2:	e7c4      	b.n	800047e <__udivmoddi4+0x282>

080004f4 <__aeabi_idiv0>:
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fb87 	bl	8000c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f814 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f958 	bl	80007b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000508:	f000 f8d8 	bl	80006bc <MX_TIM2_Init>
  MX_ADC1_Init();
 800050c:	f000 f870 	bl	80005f0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000510:	f000 f922 	bl	8000758 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_Base_Start(&htim2);
 8000514:	4803      	ldr	r0, [pc, #12]	@ (8000524 <main+0x2c>)
 8000516:	f003 fb3d 	bl	8003b94 <HAL_TIM_Base_Start>
    HAL_ADC_Start_IT(&hadc1);
 800051a:	4803      	ldr	r0, [pc, #12]	@ (8000528 <main+0x30>)
 800051c:	f000 ff08 	bl	8001330 <HAL_ADC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1) {
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <main+0x28>
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000028 	.word	0x20000028

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	@ 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	@ 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f004 ff95 	bl	800546a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000552:	f002 f941 	bl	80027d8 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 f9b4 	bl	80008c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f002 f91c 	bl	800279c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4b21      	ldr	r3, [pc, #132]	@ (80005ec <SystemClock_Config+0xc0>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800056a:	4a20      	ldr	r2, [pc, #128]	@ (80005ec <SystemClock_Config+0xc0>)
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	@ 0x60
 8000586:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000594:	2310      	movs	r3, #16
 8000596:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 f96b 	bl	8002884 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f988 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2101      	movs	r1, #1
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 fd6b 	bl	80030ac <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005dc:	f000 f974 	bl	80008c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e0:	f003 f97e 	bl	80038e0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	@ 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000606:	4b2a      	ldr	r3, [pc, #168]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000608:	4a2a      	ldr	r2, [pc, #168]	@ (80006b4 <MX_ADC1_Init+0xc4>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800060c:	4b28      	ldr	r3, [pc, #160]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8000612:	4b27      	ldr	r3, [pc, #156]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000614:	2210      	movs	r2, #16
 8000616:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000618:	4b25      	ldr	r3, [pc, #148]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000624:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000626:	2204      	movs	r2, #4
 8000628:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b21      	ldr	r3, [pc, #132]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800062c:	2200      	movs	r2, #0
 800062e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000630:	4b1f      	ldr	r3, [pc, #124]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000632:	2200      	movs	r2, #0
 8000634:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000636:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000638:	2201      	movs	r2, #1
 800063a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800063e:	2200      	movs	r2, #0
 8000640:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000644:	4b1a      	ldr	r3, [pc, #104]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000646:	f44f 62d8 	mov.w	r2, #1728	@ 0x6c0
 800064a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800064c:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800064e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000652:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000654:	4b16      	ldr	r3, [pc, #88]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000656:	2200      	movs	r2, #0
 8000658:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000664:	2200      	movs	r2, #0
 8000666:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800066a:	4811      	ldr	r0, [pc, #68]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 800066c:	f000 fd1e 	bl	80010ac <HAL_ADC_Init>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000676:	f000 f927 	bl	80008c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_ADC1_Init+0xc8>)
 800067c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800067e:	2306      	movs	r3, #6
 8000680:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000686:	237f      	movs	r3, #127	@ 0x7f
 8000688:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800068a:	2304      	movs	r3, #4
 800068c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000692:	463b      	mov	r3, r7
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_ADC1_Init+0xc0>)
 8000698:	f001 f8d4 	bl	8001844 <HAL_ADC_ConfigChannel>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006a2:	f000 f911 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000028 	.word	0x20000028
 80006b4:	50040000 	.word	0x50040000
 80006b8:	19200040 	.word	0x19200040

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b088      	sub	sp, #32
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006da:	4b1e      	ldr	r3, [pc, #120]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80006e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006e4:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80006e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 80006f0:	4b18      	ldr	r3, [pc, #96]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006f2:	2213      	movs	r2, #19
 80006f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b15      	ldr	r3, [pc, #84]	@ (8000754 <MX_TIM2_Init+0x98>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4814      	ldr	r0, [pc, #80]	@ (8000754 <MX_TIM2_Init+0x98>)
 8000704:	f003 f9ee 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800070e:	f000 f8db 	bl	80008c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000716:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	4619      	mov	r1, r3
 800071e:	480d      	ldr	r0, [pc, #52]	@ (8000754 <MX_TIM2_Init+0x98>)
 8000720:	f003 fb8b 	bl	8003e3a <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800072a:	f000 f8cd 	bl	80008c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800072e:	2320      	movs	r3, #32
 8000730:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000736:	1d3b      	adds	r3, r7, #4
 8000738:	4619      	mov	r1, r3
 800073a:	4806      	ldr	r0, [pc, #24]	@ (8000754 <MX_TIM2_Init+0x98>)
 800073c:	f003 fd82 	bl	8004244 <HAL_TIMEx_MasterConfigSynchronization>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000746:	f000 f8bf 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000008c 	.word	0x2000008c

08000758 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800075c:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800075e:	4a15      	ldr	r2, [pc, #84]	@ (80007b4 <MX_USART1_UART_Init+0x5c>)
 8000760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000762:	4b13      	ldr	r3, [pc, #76]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b11      	ldr	r3, [pc, #68]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b09      	ldr	r3, [pc, #36]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000790:	2200      	movs	r2, #0
 8000792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000794:	4b06      	ldr	r3, [pc, #24]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_USART1_UART_Init+0x58>)
 800079c:	f003 fdd6 	bl	800434c <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f88f 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	200000d8 	.word	0x200000d8
 80007b4:	40013800 	.word	0x40013800

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b088      	sub	sp, #32
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ce:	4b2f      	ldr	r3, [pc, #188]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007d2:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007da:	4b2c      	ldr	r3, [pc, #176]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b29      	ldr	r3, [pc, #164]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ea:	4a28      	ldr	r2, [pc, #160]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd4>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000802:	4a22      	ldr	r2, [pc, #136]	@ (800088c <MX_GPIO_Init+0xd4>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800080a:	4b20      	ldr	r3, [pc, #128]	@ (800088c <MX_GPIO_Init+0xd4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2108      	movs	r1, #8
 800081a:	481d      	ldr	r0, [pc, #116]	@ (8000890 <MX_GPIO_Init+0xd8>)
 800081c:	f001 ffa6 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000820:	2304      	movs	r3, #4
 8000822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000824:	2302      	movs	r3, #2
 8000826:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082c:	2303      	movs	r3, #3
 800082e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000830:	2307      	movs	r3, #7
 8000832:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800083e:	f001 fe2b 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000850:	2303      	movs	r3, #3
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000854:	2303      	movs	r3, #3
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	4619      	mov	r1, r3
 800085e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000862:	f001 fe19 	bl	8002498 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd8>)
 800087e:	f001 fe0b 	bl	8002498 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000882:	bf00      	nop
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000
 8000890:	48000400 	.word	0x48000400

08000894 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint8_t sampledValue = HAL_ADC_GetValue(&hadc1);
 800089c:	4808      	ldr	r0, [pc, #32]	@ (80008c0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800089e:	f000 fdfb 	bl	8001498 <HAL_ADC_GetValue>
 80008a2:	4603      	mov	r3, r0
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	73fb      	strb	r3, [r7, #15]
    HAL_UART_Transmit(&huart1, &sampledValue, 1, HAL_MAX_DELAY);
 80008a8:	f107 010f 	add.w	r1, r7, #15
 80008ac:	f04f 33ff 	mov.w	r3, #4294967295
 80008b0:	2201      	movs	r2, #1
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <HAL_ADC_ConvCpltCallback+0x30>)
 80008b4:	f003 fd98 	bl	80043e8 <HAL_UART_Transmit>
}
 80008b8:	bf00      	nop
 80008ba:	3710      	adds	r7, #16
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000028 	.word	0x20000028
 80008c4:	200000d8 	.word	0x200000d8

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <Error_Handler+0x8>

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <HAL_MspInit+0x44>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008de:	4a0e      	ldr	r2, [pc, #56]	@ (8000918 <HAL_MspInit+0x44>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <HAL_MspInit+0x44>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008f6:	4a08      	ldr	r2, [pc, #32]	@ (8000918 <HAL_MspInit+0x44>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80008fe:	4b06      	ldr	r3, [pc, #24]	@ (8000918 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40021000 	.word	0x40021000

0800091c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b09e      	sub	sp, #120	@ 0x78
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000924:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	2254      	movs	r2, #84	@ 0x54
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fd94 	bl	800546a <memset>
  if(hadc->Instance==ADC1)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a29      	ldr	r2, [pc, #164]	@ (80009ec <HAL_ADC_MspInit+0xd0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d14b      	bne.n	80009e4 <HAL_ADC_MspInit+0xc8>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800094c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000950:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000952:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000956:	65bb      	str	r3, [r7, #88]	@ 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000958:	2301      	movs	r3, #1
 800095a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800095c:	2301      	movs	r3, #1
 800095e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000960:	2310      	movs	r3, #16
 8000962:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000964:	2307      	movs	r3, #7
 8000966:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000968:	2302      	movs	r3, #2
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800096c:	2302      	movs	r3, #2
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000970:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000976:	f107 0310 	add.w	r3, r7, #16
 800097a:	4618      	mov	r0, r3
 800097c:	f002 fdba 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000986:	f7ff ff9f 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800098a:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 8000990:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000996:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009a6:	4a12      	ldr	r2, [pc, #72]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 80009a8:	f043 0301 	orr.w	r3, r3, #1
 80009ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ae:	4b10      	ldr	r3, [pc, #64]	@ (80009f0 <HAL_ADC_MspInit+0xd4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ba:	2302      	movs	r3, #2
 80009bc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009be:	230b      	movs	r3, #11
 80009c0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009ca:	4619      	mov	r1, r3
 80009cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009d0:	f001 fd62 	bl	8002498 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2100      	movs	r1, #0
 80009d8:	2012      	movs	r0, #18
 80009da:	f001 fca8 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80009de:	2012      	movs	r0, #18
 80009e0:	f001 fcc1 	bl	8002366 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009e4:	bf00      	nop
 80009e6:	3778      	adds	r7, #120	@ 0x78
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	50040000 	.word	0x50040000
 80009f0:	40021000 	.word	0x40021000

080009f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000a04:	d113      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a12:	4b09      	ldr	r3, [pc, #36]	@ (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	201c      	movs	r0, #28
 8000a24:	f001 fc83 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a28:	201c      	movs	r0, #28
 8000a2a:	f001 fc9c 	bl	8002366 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000

08000a3c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09e      	sub	sp, #120	@ 0x78
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2254      	movs	r2, #84	@ 0x54
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f004 fd04 	bl	800546a <memset>
  if(huart->Instance==USART1)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a23      	ldr	r2, [pc, #140]	@ (8000af4 <HAL_UART_MspInit+0xb8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d13f      	bne.n	8000aec <HAL_UART_MspInit+0xb0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a70:	2300      	movs	r3, #0
 8000a72:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	f107 0310 	add.w	r3, r7, #16
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f002 fd3b 	bl	80034f4 <HAL_RCCEx_PeriphCLKConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a84:	f7ff ff20 	bl	80008c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a88:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a92:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a94:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <HAL_UART_MspInit+0xbc>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Sample_Out_Pin|GPIO_PIN_10;
 8000ab8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000abc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000aca:	2307      	movs	r3, #7
 8000acc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ad8:	f001 fcde 	bl	8002498 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000adc:	2200      	movs	r2, #0
 8000ade:	2100      	movs	r1, #0
 8000ae0:	2025      	movs	r0, #37	@ 0x25
 8000ae2:	f001 fc24 	bl	800232e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ae6:	2025      	movs	r0, #37	@ 0x25
 8000ae8:	f001 fc3d 	bl	8002366 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000aec:	bf00      	nop
 8000aee:	3778      	adds	r7, #120	@ 0x78
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f8b1 	bl	8000cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
	...

08000b5c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b60:	4802      	ldr	r0, [pc, #8]	@ (8000b6c <ADC1_IRQHandler+0x10>)
 8000b62:	f000 fca6 	bl	80014b2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000028 	.word	0x20000028

08000b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b74:	4802      	ldr	r0, [pc, #8]	@ (8000b80 <TIM2_IRQHandler+0x10>)
 8000b76:	f003 f859 	bl	8003c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	@ (8000b94 <USART1_IRQHandler+0x10>)
 8000b8a:	f003 fcb7 	bl	80044fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200000d8 	.word	0x200000d8

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff ffea 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480c      	ldr	r0, [pc, #48]	@ (8000bf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bc6:	490d      	ldr	r1, [pc, #52]	@ (8000bfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <LoopForever+0xe>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a0a      	ldr	r2, [pc, #40]	@ (8000c04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c08 <LoopForever+0x16>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f004 fc47 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bee:	f7ff fc83 	bl	80004f8 <main>

08000bf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf2:	e7fe      	b.n	8000bf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c00:	08005534 	.word	0x08005534
  ldr r2, =_sbss
 8000c04:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c08:	20000164 	.word	0x20000164

08000c0c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <CAN1_RX0_IRQHandler>

08000c0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f001 fb7d 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f80e 	bl	8000c40 <HAL_InitTick>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d002      	beq.n	8000c30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	71fb      	strb	r3, [r7, #7]
 8000c2e:	e001      	b.n	8000c34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c30:	f7ff fe50 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c34:	79fb      	ldrb	r3, [r7, #7]
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d023      	beq.n	8000c9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <HAL_InitTick+0x70>)
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	4b14      	ldr	r3, [pc, #80]	@ (8000cac <HAL_InitTick+0x6c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fb89 	bl	8002382 <HAL_SYSTICK_Config>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d10f      	bne.n	8000c96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d809      	bhi.n	8000c90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	6879      	ldr	r1, [r7, #4]
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f001 fb53 	bl	800232e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_InitTick+0x74>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6013      	str	r3, [r2, #0]
 8000c8e:	e007      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c90:	2301      	movs	r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
 8000c94:	e004      	b.n	8000ca0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	73fb      	strb	r3, [r7, #15]
 8000c9a:	e001      	b.n	8000ca0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000008 	.word	0x20000008
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000004 	.word	0x20000004

08000cb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_IncTick+0x20>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <HAL_IncTick+0x24>)
 8000cca:	6013      	str	r3, [r2, #0]
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000160 	.word	0x20000160

08000ce0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce4:	4b03      	ldr	r3, [pc, #12]	@ (8000cf4 <HAL_GetTick+0x14>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000160 	.word	0x20000160

08000cf8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	689b      	ldr	r3, [r3, #8]
 8000d06:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	609a      	str	r2, [r3, #8]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr

08000d60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b087      	sub	sp, #28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
 8000d6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3360      	adds	r3, #96	@ 0x60
 8000d72:	461a      	mov	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <LL_ADC_SetOffset+0x44>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d98:	bf00      	nop
 8000d9a:	371c      	adds	r7, #28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	03fff000 	.word	0x03fff000

08000da8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
 8000db0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3360      	adds	r3, #96	@ 0x60
 8000db6:	461a      	mov	r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	009b      	lsls	r3, r3, #2
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b087      	sub	sp, #28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3360      	adds	r3, #96	@ 0x60
 8000de4:	461a      	mov	r2, r3
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	4413      	add	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000dfe:	bf00      	nop
 8000e00:	371c      	adds	r7, #28
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	b083      	sub	sp, #12
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d101      	bne.n	8000e22 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	3330      	adds	r3, #48	@ 0x30
 8000e40:	461a      	mov	r2, r3
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	f003 030c 	and.w	r3, r3, #12
 8000e4c:	4413      	add	r3, r2
 8000e4e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	f003 031f 	and.w	r3, r3, #31
 8000e5a:	211f      	movs	r1, #31
 8000e5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	401a      	ands	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	0e9b      	lsrs	r3, r3, #26
 8000e68:	f003 011f 	and.w	r1, r3, #31
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	431a      	orrs	r2, r3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e7c:	bf00      	nop
 8000e7e:	371c      	adds	r7, #28
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr

08000e88 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e94:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d101      	bne.n	8000ea0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60f8      	str	r0, [r7, #12]
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3314      	adds	r3, #20
 8000ebe:	461a      	mov	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	0e5b      	lsrs	r3, r3, #25
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	0d1b      	lsrs	r3, r3, #20
 8000ed6:	f003 031f 	and.w	r3, r3, #31
 8000eda:	2107      	movs	r1, #7
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	401a      	ands	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	0d1b      	lsrs	r3, r3, #20
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0318 	and.w	r3, r3, #24
 8000f26:	4908      	ldr	r1, [pc, #32]	@ (8000f48 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f28:	40d9      	lsrs	r1, r3
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f32:	431a      	orrs	r2, r3
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f3a:	bf00      	nop
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	0007ffff 	.word	0x0007ffff

08000f4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6093      	str	r3, [r2, #8]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000f80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f84:	d101      	bne.n	8000f8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fa8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000fd4:	d101      	bne.n	8000fda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000fda:	2300      	movs	r3, #0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8000ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ffc:	f043 0201 	orr.w	r2, r3, #1
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001004:	bf00      	nop
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <LL_ADC_IsEnabled+0x18>
 8001024:	2301      	movs	r3, #1
 8001026:	e000      	b.n	800102a <LL_ADC_IsEnabled+0x1a>
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001046:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800104a:	f043 0204 	orr.w	r2, r3, #4
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800105e:	b480      	push	{r7}
 8001060:	b083      	sub	sp, #12
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b04      	cmp	r3, #4
 8001070:	d101      	bne.n	8001076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 0308 	and.w	r3, r3, #8
 8001094:	2b08      	cmp	r3, #8
 8001096:	d101      	bne.n	800109c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001098:	2301      	movs	r3, #1
 800109a:	e000      	b.n	800109e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800109c:	2300      	movs	r3, #0
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b4:	2300      	movs	r3, #0
 80010b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e126      	b.n	8001314 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d109      	bne.n	80010e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fc21 	bl	800091c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff3f 	bl	8000f70 <LL_ADC_IsDeepPowerDownEnabled>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d004      	beq.n	8001102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff25 	bl	8000f4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff ff5a 	bl	8000fc0 <LL_ADC_IsInternalRegulatorEnabled>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d115      	bne.n	800113e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff3e 	bl	8000f98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800111c:	4b7f      	ldr	r3, [pc, #508]	@ (800131c <HAL_ADC_Init+0x270>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	099b      	lsrs	r3, r3, #6
 8001122:	4a7f      	ldr	r2, [pc, #508]	@ (8001320 <HAL_ADC_Init+0x274>)
 8001124:	fba2 2303 	umull	r2, r3, r2, r3
 8001128:	099b      	lsrs	r3, r3, #6
 800112a:	3301      	adds	r3, #1
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b01      	subs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff3c 	bl	8000fc0 <LL_ADC_IsInternalRegulatorEnabled>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d10d      	bne.n	800116a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001152:	f043 0210 	orr.w	r2, r3, #16
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff75 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 8001174:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800117a:	f003 0310 	and.w	r3, r3, #16
 800117e:	2b00      	cmp	r3, #0
 8001180:	f040 80bf 	bne.w	8001302 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	2b00      	cmp	r3, #0
 8001188:	f040 80bb 	bne.w	8001302 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001190:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001194:	f043 0202 	orr.w	r2, r3, #2
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff ff35 	bl	8001010 <LL_ADC_IsEnabled>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10b      	bne.n	80011c4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80011ac:	485d      	ldr	r0, [pc, #372]	@ (8001324 <HAL_ADC_Init+0x278>)
 80011ae:	f7ff ff2f 	bl	8001010 <LL_ADC_IsEnabled>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d105      	bne.n	80011c4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	4619      	mov	r1, r3
 80011be:	485a      	ldr	r0, [pc, #360]	@ (8001328 <HAL_ADC_Init+0x27c>)
 80011c0:	f7ff fd9a 	bl	8000cf8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	7e5b      	ldrb	r3, [r3, #25]
 80011c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80011d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80011da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d106      	bne.n	8001200 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f6:	3b01      	subs	r3, #1
 80011f8:	045b      	lsls	r3, r3, #17
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001214:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	4b42      	ldr	r3, [pc, #264]	@ (800132c <HAL_ADC_Init+0x280>)
 8001224:	4013      	ands	r3, r2
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	69b9      	ldr	r1, [r7, #24]
 800122c:	430b      	orrs	r3, r1
 800122e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff25 	bl	8001084 <LL_ADC_INJ_IsConversionOngoing>
 800123a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d13d      	bne.n	80012be <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d13a      	bne.n	80012be <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800124c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001254:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001264:	f023 0302 	bic.w	r3, r3, #2
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	69b9      	ldr	r1, [r7, #24]
 800126e:	430b      	orrs	r3, r1
 8001270:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001278:	2b01      	cmp	r3, #1
 800127a:	d118      	bne.n	80012ae <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001286:	f023 0304 	bic.w	r3, r3, #4
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001292:	4311      	orrs	r1, r2
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001298:	4311      	orrs	r1, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800129e:	430a      	orrs	r2, r1
 80012a0:	431a      	orrs	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f042 0201 	orr.w	r2, r2, #1
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	e007      	b.n	80012be <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 0201 	bic.w	r2, r2, #1
 80012bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d10c      	bne.n	80012e0 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012cc:	f023 010f 	bic.w	r1, r3, #15
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	1e5a      	subs	r2, r3, #1
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80012de:	e007      	b.n	80012f0 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 020f 	bic.w	r2, r2, #15
 80012ee:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80012f4:	f023 0303 	bic.w	r3, r3, #3
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8001300:	e007      	b.n	8001312 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001306:	f043 0210 	orr.w	r2, r3, #16
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001312:	7ffb      	ldrb	r3, [r7, #31]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3720      	adds	r7, #32
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000000 	.word	0x20000000
 8001320:	053e2d63 	.word	0x053e2d63
 8001324:	50040000 	.word	0x50040000
 8001328:	50040300 	.word	0x50040300
 800132c:	fff0c007 	.word	0xfff0c007

08001330 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fe8e 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	f040 80a0 	bne.w	800148a <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001350:	2b01      	cmp	r3, #1
 8001352:	d101      	bne.n	8001358 <HAL_ADC_Start_IT+0x28>
 8001354:	2302      	movs	r3, #2
 8001356:	e09b      	b.n	8001490 <HAL_ADC_Start_IT+0x160>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 fe51 	bl	8002008 <ADC_Enable>
 8001366:	4603      	mov	r3, r0
 8001368:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b00      	cmp	r3, #0
 800136e:	f040 8087 	bne.w	8001480 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001376:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800137a:	f023 0301 	bic.w	r3, r3, #1
 800137e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800138a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d006      	beq.n	80013a0 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001396:	f023 0206 	bic.w	r2, r3, #6
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	659a      	str	r2, [r3, #88]	@ 0x58
 800139e:	e002      	b.n	80013a6 <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	221c      	movs	r2, #28
 80013ac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 021c 	bic.w	r2, r2, #28
 80013c4:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	2b08      	cmp	r3, #8
 80013cc:	d108      	bne.n	80013e0 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685a      	ldr	r2, [r3, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f042 0208 	orr.w	r2, r2, #8
 80013dc:	605a      	str	r2, [r3, #4]
          break;
 80013de:	e008      	b.n	80013f2 <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685a      	ldr	r2, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0204 	orr.w	r2, r2, #4
 80013ee:	605a      	str	r2, [r3, #4]
          break;
 80013f0:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d107      	bne.n	800140a <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f042 0210 	orr.w	r2, r2, #16
 8001408:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02d      	beq.n	8001474 <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001420:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d110      	bne.n	8001452 <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0220 	bic.w	r2, r2, #32
 800143e:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	685a      	ldr	r2, [r3, #4]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800144e:	605a      	str	r2, [r3, #4]
            break;
 8001450:	e010      	b.n	8001474 <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685a      	ldr	r2, [r3, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001460:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f042 0220 	orr.w	r2, r2, #32
 8001470:	605a      	str	r2, [r3, #4]
            break;
 8001472:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fddc 	bl	8001036 <LL_ADC_REG_StartConversion>
 800147e:	e006      	b.n	800148e <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001488:	e001      	b.n	800148e <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800148a:	2302      	movs	r3, #2
 800148c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b088      	sub	sp, #32
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d017      	beq.n	8001508 <HAL_ADC_IRQHandler+0x56>
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014e6:	f003 0310 	and.w	r3, r3, #16
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d105      	bne.n	80014fa <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f000 fe32 	bl	8002164 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2202      	movs	r2, #2
 8001506:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	2b00      	cmp	r3, #0
 8001510:	d004      	beq.n	800151c <HAL_ADC_IRQHandler+0x6a>
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0304 	and.w	r3, r3, #4
 8001518:	2b00      	cmp	r3, #0
 800151a:	d109      	bne.n	8001530 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001522:	2b00      	cmp	r3, #0
 8001524:	d05e      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d059      	beq.n	80015e4 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001540:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff fc5c 	bl	8000e0a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d03e      	beq.n	80015d6 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d135      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f003 0308 	and.w	r3, r3, #8
 8001574:	2b08      	cmp	r3, #8
 8001576:	d12e      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff fd6e 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d11a      	bne.n	80015be <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 020c 	bic.w	r2, r2, #12
 8001596:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800159c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d112      	bne.n	80015d6 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80015bc:	e00b      	b.n	80015d6 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015c2:	f043 0210 	orr.w	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015ce:	f043 0201 	orr.w	r2, r3, #1
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff f95c 	bl	8000894 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	220c      	movs	r2, #12
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f003 0320 	and.w	r3, r3, #32
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_ADC_IRQHandler+0x146>
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0320 	and.w	r3, r3, #32
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d072      	beq.n	80016e8 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001608:	2b00      	cmp	r3, #0
 800160a:	d06d      	beq.n	80016e8 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001610:	f003 0310 	and.w	r3, r3, #16
 8001614:	2b00      	cmp	r3, #0
 8001616:	d105      	bne.n	8001624 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800161c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc2d 	bl	8000e88 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800162e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fbe8 	bl	8000e0a <LL_ADC_REG_IsTriggerSourceSWStart>
 800163a:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d047      	beq.n	80016da <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d007      	beq.n	8001664 <HAL_ADC_IRQHandler+0x1b2>
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03f      	beq.n	80016da <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001660:	2b00      	cmp	r3, #0
 8001662:	d13a      	bne.n	80016da <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800166e:	2b40      	cmp	r3, #64	@ 0x40
 8001670:	d133      	bne.n	80016da <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d12e      	bne.n	80016da <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff fcff 	bl	8001084 <LL_ADC_INJ_IsConversionOngoing>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d11a      	bne.n	80016c2 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800169a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d112      	bne.n	80016da <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	655a      	str	r2, [r3, #84]	@ 0x54
 80016c0:	e00b      	b.n	80016da <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f000 fd1a 	bl	8002114 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2260      	movs	r2, #96	@ 0x60
 80016e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d011      	beq.n	8001716 <HAL_ADC_IRQHandler+0x264>
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001700:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f886 	bl	800181a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2280      	movs	r2, #128	@ 0x80
 8001714:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d012      	beq.n	8001746 <HAL_ADC_IRQHandler+0x294>
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001726:	2b00      	cmp	r3, #0
 8001728:	d00d      	beq.n	8001746 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800172e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fd00 	bl	800213c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800174c:	2b00      	cmp	r3, #0
 800174e:	d012      	beq.n	8001776 <HAL_ADC_IRQHandler+0x2c4>
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00d      	beq.n	8001776 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800175e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fcf2 	bl	8002150 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001774:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b00      	cmp	r3, #0
 800177e:	d02a      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x324>
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d025      	beq.n	80017d6 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800178e:	2b00      	cmp	r3, #0
 8001790:	d102      	bne.n	8001798 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001792:	2301      	movs	r3, #1
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	e008      	b.n	80017aa <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f003 0301 	and.w	r3, r3, #1
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80017a6:	2301      	movs	r3, #1
 80017a8:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d10e      	bne.n	80017ce <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017b4:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c0:	f043 0202 	orr.w	r2, r3, #2
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f830 	bl	800182e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2210      	movs	r2, #16
 80017d4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80017d6:	69bb      	ldr	r3, [r7, #24]
 80017d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d018      	beq.n	8001812 <HAL_ADC_IRQHandler+0x360>
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d013      	beq.n	8001812 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ee:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017fa:	f043 0208 	orr.w	r2, r3, #8
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800180a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f000 fc8b 	bl	8002128 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001812:	bf00      	nop
 8001814:	3720      	adds	r7, #32
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b0b6      	sub	sp, #216	@ 0xd8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x22>
 8001862:	2302      	movs	r3, #2
 8001864:	e3bb      	b.n	8001fde <HAL_ADC_ConfigChannel+0x79a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fbf3 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	f040 83a0 	bne.w	8001fc0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b05      	cmp	r3, #5
 800188e:	d824      	bhi.n	80018da <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	3b02      	subs	r3, #2
 8001896:	2b03      	cmp	r3, #3
 8001898:	d81b      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x8e>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <HAL_ADC_ConfigChannel+0x5c>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018b9 	.word	0x080018b9
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018c9 	.word	0x080018c9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80018b0:	230c      	movs	r3, #12
 80018b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018b6:	e010      	b.n	80018da <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80018b8:	2312      	movs	r3, #18
 80018ba:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018be:	e00c      	b.n	80018da <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80018c0:	2318      	movs	r3, #24
 80018c2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018c6:	e008      	b.n	80018da <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80018c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018d0:	e003      	b.n	80018da <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80018d2:	2306      	movs	r3, #6
 80018d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 80018d8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6818      	ldr	r0, [r3, #0]
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	461a      	mov	r2, r3
 80018e4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80018e8:	f7ff faa2 	bl	8000e30 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7ff fbb4 	bl	800105e <LL_ADC_REG_IsConversionOngoing>
 80018f6:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fbc0 	bl	8001084 <LL_ADC_INJ_IsConversionOngoing>
 8001904:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001908:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800190c:	2b00      	cmp	r3, #0
 800190e:	f040 81a4 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001912:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001916:	2b00      	cmp	r3, #0
 8001918:	f040 819f 	bne.w	8001c5a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	6819      	ldr	r1, [r3, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	461a      	mov	r2, r3
 800192a:	f7ff fac0 	bl	8000eae <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	695a      	ldr	r2, [r3, #20]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	08db      	lsrs	r3, r3, #3
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	2b04      	cmp	r3, #4
 800194e:	d00a      	beq.n	8001966 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	6919      	ldr	r1, [r3, #16]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001960:	f7ff f9fe 	bl	8000d60 <LL_ADC_SetOffset>
 8001964:	e179      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fa1b 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10a      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x14e>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fa10 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001988:	4603      	mov	r3, r0
 800198a:	0e9b      	lsrs	r3, r3, #26
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	e01e      	b.n	80019d0 <HAL_ADC_ConfigChannel+0x18c>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2100      	movs	r1, #0
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa05 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 800199e:	4603      	mov	r3, r0
 80019a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80019b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80019c0:	2320      	movs	r3, #32
 80019c2:	e004      	b.n	80019ce <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80019c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d105      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x1a4>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	0e9b      	lsrs	r3, r3, #26
 80019e2:	f003 031f 	and.w	r3, r3, #31
 80019e6:	e018      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1d6>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019f4:	fa93 f3a3 	rbit	r3, r3
 80019f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80019fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001a00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8001a04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001a0c:	2320      	movs	r3, #32
 8001a0e:	e004      	b.n	8001a1a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001a10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d106      	bne.n	8001a2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff f9d4 	bl	8000dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2101      	movs	r1, #1
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9b8 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10a      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x214>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff f9ad 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	f003 021f 	and.w	r2, r3, #31
 8001a56:	e01e      	b.n	8001a96 <HAL_ADC_ConfigChannel+0x252>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff f9a2 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001a6e:	fa93 f3a3 	rbit	r3, r3
 8001a72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a86:	2320      	movs	r3, #32
 8001a88:	e004      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_ConfigChannel+0x26a>
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0e9b      	lsrs	r3, r3, #26
 8001aa8:	f003 031f 	and.w	r3, r3, #31
 8001aac:	e018      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x29c>
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001ac2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001ac6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8001aca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001ad2:	2320      	movs	r3, #32
 8001ad4:	e004      	b.n	8001ae0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001ada:	fab3 f383 	clz	r3, r3
 8001ade:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2101      	movs	r1, #1
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f971 	bl	8000dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2102      	movs	r1, #2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f955 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d10a      	bne.n	8001b1e <HAL_ADC_ConfigChannel+0x2da>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f94a 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001b14:	4603      	mov	r3, r0
 8001b16:	0e9b      	lsrs	r3, r3, #26
 8001b18:	f003 021f 	and.w	r2, r3, #31
 8001b1c:	e01e      	b.n	8001b5c <HAL_ADC_ConfigChannel+0x318>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2102      	movs	r1, #2
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f93f 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b30:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001b34:	fa93 f3a3 	rbit	r3, r3
 8001b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001b3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001b44:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001b4c:	2320      	movs	r3, #32
 8001b4e:	e004      	b.n	8001b5a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_ADC_ConfigChannel+0x330>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	0e9b      	lsrs	r3, r3, #26
 8001b6e:	f003 031f 	and.w	r3, r3, #31
 8001b72:	e014      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x35a>
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001b7c:	fa93 f3a3 	rbit	r3, r3
 8001b80:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001b82:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001b84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001b88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b90:	2320      	movs	r3, #32
 8001b92:	e004      	b.n	8001b9e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d106      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2102      	movs	r1, #2
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f912 	bl	8000dd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff f8f6 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d10a      	bne.n	8001bdc <HAL_ADC_ConfigChannel+0x398>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2103      	movs	r1, #3
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f8eb 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	0e9b      	lsrs	r3, r3, #26
 8001bd6:	f003 021f 	and.w	r2, r3, #31
 8001bda:	e017      	b.n	8001c0c <HAL_ADC_ConfigChannel+0x3c8>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2103      	movs	r1, #3
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff f8e0 	bl	8000da8 <LL_ADC_GetOffsetChannel>
 8001be8:	4603      	mov	r3, r0
 8001bea:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001bee:	fa93 f3a3 	rbit	r3, r3
 8001bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001bf6:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8001bf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001bfe:	2320      	movs	r3, #32
 8001c00:	e003      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001c02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <HAL_ADC_ConfigChannel+0x3e0>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0e9b      	lsrs	r3, r3, #26
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	e011      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x404>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c2c:	fa93 f3a3 	rbit	r3, r3
 8001c30:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001c32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c34:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001c3c:	2320      	movs	r3, #32
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001c40:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d106      	bne.n	8001c5a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2200      	movs	r2, #0
 8001c52:	2103      	movs	r1, #3
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff f8bd 	bl	8000dd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff f9d6 	bl	8001010 <LL_ADC_IsEnabled>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f040 8140 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6818      	ldr	r0, [r3, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6819      	ldr	r1, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	f7ff f943 	bl	8000f04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	4a8f      	ldr	r2, [pc, #572]	@ (8001ec0 <HAL_ADC_ConfigChannel+0x67c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	f040 8131 	bne.w	8001eec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10b      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x46e>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0e9b      	lsrs	r3, r3, #26
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	bf94      	ite	ls
 8001caa:	2301      	movls	r3, #1
 8001cac:	2300      	movhi	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	e019      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x4a2>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cba:	fa93 f3a3 	rbit	r3, r3
 8001cbe:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001cc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001cca:	2320      	movs	r3, #32
 8001ccc:	e003      	b.n	8001cd6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001cce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2b09      	cmp	r3, #9
 8001cde:	bf94      	ite	ls
 8001ce0:	2301      	movls	r3, #1
 8001ce2:	2300      	movhi	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d079      	beq.n	8001dde <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d107      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x4c2>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	0e9b      	lsrs	r3, r3, #26
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	069b      	lsls	r3, r3, #26
 8001d00:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d04:	e015      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x4ee>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d0e:	fa93 f3a3 	rbit	r3, r3
 8001d12:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001d14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d16:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001d1e:	2320      	movs	r3, #32
 8001d20:	e003      	b.n	8001d2a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001d24:	fab3 f383 	clz	r3, r3
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	069b      	lsls	r3, r3, #26
 8001d2e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x50e>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d50:	e017      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x53e>
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d5a:	fa93 f3a3 	rbit	r3, r3
 8001d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d62:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001d64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001d6a:	2320      	movs	r3, #32
 8001d6c:	e003      	b.n	8001d76 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001d6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d70:	fab3 f383 	clz	r3, r3
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	3301      	adds	r3, #1
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	ea42 0103 	orr.w	r1, r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10a      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x564>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	0e9b      	lsrs	r3, r3, #26
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f003 021f 	and.w	r2, r3, #31
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	e018      	b.n	8001dda <HAL_ADC_ConfigChannel+0x596>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db8:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001dc0:	2320      	movs	r3, #32
 8001dc2:	e003      	b.n	8001dcc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc6:	fab3 f383 	clz	r3, r3
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	f003 021f 	and.w	r2, r3, #31
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4413      	add	r3, r2
 8001dd8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001dda:	430b      	orrs	r3, r1
 8001ddc:	e081      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x5b6>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	0e9b      	lsrs	r3, r3, #26
 8001df0:	3301      	adds	r3, #1
 8001df2:	069b      	lsls	r3, r3, #26
 8001df4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001df8:	e015      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x5e2>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e02:	fa93 f3a3 	rbit	r3, r3
 8001e06:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001e12:	2320      	movs	r3, #32
 8001e14:	e003      	b.n	8001e1e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e18:	fab3 f383 	clz	r3, r3
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	3301      	adds	r3, #1
 8001e20:	069b      	lsls	r3, r3, #26
 8001e22:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d109      	bne.n	8001e46 <HAL_ADC_ConfigChannel+0x602>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f003 031f 	and.w	r3, r3, #31
 8001e3e:	2101      	movs	r1, #1
 8001e40:	fa01 f303 	lsl.w	r3, r1, r3
 8001e44:	e017      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x632>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	61bb      	str	r3, [r7, #24]
  return result;
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e003      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e62:	6a3b      	ldr	r3, [r7, #32]
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	2101      	movs	r1, #1
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	ea42 0103 	orr.w	r1, r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d10d      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x65e>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	f003 021f 	and.w	r2, r3, #31
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	3b1e      	subs	r3, #30
 8001e9a:	051b      	lsls	r3, r3, #20
 8001e9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	e01e      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x69c>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	60fb      	str	r3, [r7, #12]
  return result;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d104      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e006      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x688>
 8001ebe:	bf00      	nop
 8001ec0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	fab3 f383 	clz	r3, r3
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f003 021f 	and.w	r2, r3, #31
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4413      	add	r3, r2
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	051b      	lsls	r3, r3, #20
 8001edc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f7fe ffe1 	bl	8000eae <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fe8 <HAL_ADC_ConfigChannel+0x7a4>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d06c      	beq.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ef8:	483c      	ldr	r0, [pc, #240]	@ (8001fec <HAL_ADC_ConfigChannel+0x7a8>)
 8001efa:	f7fe ff23 	bl	8000d44 <LL_ADC_GetCommonPathInternalCh>
 8001efe:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff0 <HAL_ADC_ConfigChannel+0x7ac>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d127      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d121      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a35      	ldr	r2, [pc, #212]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d157      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	482f      	ldr	r0, [pc, #188]	@ (8001fec <HAL_ADC_ConfigChannel+0x7a8>)
 8001f2e:	f7fe fef6 	bl	8000d1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f32:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_ADC_ConfigChannel+0x7b4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	4a30      	ldr	r2, [pc, #192]	@ (8001ffc <HAL_ADC_ConfigChannel+0x7b8>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	099b      	lsrs	r3, r3, #6
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	4613      	mov	r3, r2
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4413      	add	r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f4c:	e002      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f9      	bne.n	8001f4e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f5a:	e03a      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <HAL_ADC_ConfigChannel+0x7bc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d113      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f6a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10d      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1f      	ldr	r2, [pc, #124]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d12a      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f80:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f84:	4619      	mov	r1, r3
 8001f86:	4819      	ldr	r0, [pc, #100]	@ (8001fec <HAL_ADC_ConfigChannel+0x7a8>)
 8001f88:	f7fe fec9 	bl	8000d1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f8c:	e021      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1c      	ldr	r2, [pc, #112]	@ (8002004 <HAL_ADC_ConfigChannel+0x7c0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d11c      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d116      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a12      	ldr	r2, [pc, #72]	@ (8001ff4 <HAL_ADC_ConfigChannel+0x7b0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d111      	bne.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001fb2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	480c      	ldr	r0, [pc, #48]	@ (8001fec <HAL_ADC_ConfigChannel+0x7a8>)
 8001fba:	f7fe feb0 	bl	8000d1e <LL_ADC_SetCommonPathInternalCh>
 8001fbe:	e008      	b.n	8001fd2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f043 0220 	orr.w	r2, r3, #32
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fda:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	37d8      	adds	r7, #216	@ 0xd8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	80080000 	.word	0x80080000
 8001fec:	50040300 	.word	0x50040300
 8001ff0:	c7520000 	.word	0xc7520000
 8001ff4:	50040000 	.word	0x50040000
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	053e2d63 	.word	0x053e2d63
 8002000:	cb840000 	.word	0xcb840000
 8002004:	80000001 	.word	0x80000001

08002008 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7fe fff9 	bl	8001010 <LL_ADC_IsEnabled>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d169      	bne.n	80020f8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <ADC_Enable+0xfc>)
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00d      	beq.n	800204e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002036:	f043 0210 	orr.w	r2, r3, #16
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002042:	f043 0201 	orr.w	r2, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e055      	b.n	80020fa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe ffc8 	bl	8000fe8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002058:	482b      	ldr	r0, [pc, #172]	@ (8002108 <ADC_Enable+0x100>)
 800205a:	f7fe fe73 	bl	8000d44 <LL_ADC_GetCommonPathInternalCh>
 800205e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002064:	2b00      	cmp	r3, #0
 8002066:	d013      	beq.n	8002090 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002068:	4b28      	ldr	r3, [pc, #160]	@ (800210c <ADC_Enable+0x104>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	099b      	lsrs	r3, r3, #6
 800206e:	4a28      	ldr	r2, [pc, #160]	@ (8002110 <ADC_Enable+0x108>)
 8002070:	fba2 2303 	umull	r2, r3, r2, r3
 8002074:	099b      	lsrs	r3, r3, #6
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002082:	e002      	b.n	800208a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3b01      	subs	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d1f9      	bne.n	8002084 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002090:	f7fe fe26 	bl	8000ce0 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002096:	e028      	b.n	80020ea <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe ffb7 	bl	8001010 <LL_ADC_IsEnabled>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d104      	bne.n	80020b2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ff9b 	bl	8000fe8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020b2:	f7fe fe15 	bl	8000ce0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d914      	bls.n	80020ea <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d00d      	beq.n	80020ea <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020d2:	f043 0210 	orr.w	r2, r3, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020de:	f043 0201 	orr.w	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e007      	b.n	80020fa <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d1cf      	bne.n	8002098 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	8000003f 	.word	0x8000003f
 8002108:	50040300 	.word	0x50040300
 800210c:	20000000 	.word	0x20000000
 8002110:	053e2d63 	.word	0x053e2d63

08002114 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002194:	4013      	ands	r3, r2
 8002196:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021aa:	4a04      	ldr	r2, [pc, #16]	@ (80021bc <__NVIC_SetPriorityGrouping+0x44>)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	60d3      	str	r3, [r2, #12]
}
 80021b0:	bf00      	nop
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	e000ed00 	.word	0xe000ed00

080021c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c4:	4b04      	ldr	r3, [pc, #16]	@ (80021d8 <__NVIC_GetPriorityGrouping+0x18>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 0307 	and.w	r3, r3, #7
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	db0b      	blt.n	8002206 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	f003 021f 	and.w	r2, r3, #31
 80021f4:	4907      	ldr	r1, [pc, #28]	@ (8002214 <__NVIC_EnableIRQ+0x38>)
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2001      	movs	r0, #1
 80021fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002202:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff29 	bl	8002178 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff3e 	bl	80021c0 <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	4603      	mov	r3, r0
 800236e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff31 	bl	80021dc <__NVIC_EnableIRQ>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ffa2 	bl	80022d4 <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d008      	beq.n	80023c4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e022      	b.n	800240a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 020e 	bic.w	r2, r2, #14
 80023d2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	f003 021c 	and.w	r2, r3, #28
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d005      	beq.n	800243a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2204      	movs	r2, #4
 8002432:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	e029      	b.n	800248e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 020e 	bic.w	r2, r2, #14
 8002448:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0201 	bic.w	r2, r2, #1
 8002458:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245e:	f003 021c 	and.w	r2, r3, #28
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	2101      	movs	r1, #1
 8002468:	fa01 f202 	lsl.w	r2, r1, r2
 800246c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2201      	movs	r2, #1
 8002472:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	4798      	blx	r3
    }
  }
  return status;
 800248e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024a6:	e148      	b.n	800273a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	fa01 f303 	lsl.w	r3, r1, r3
 80024b4:	4013      	ands	r3, r2
 80024b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f000 813a 	beq.w	8002734 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 0303 	and.w	r3, r3, #3
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d005      	beq.n	80024d8 <HAL_GPIO_Init+0x40>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0303 	and.w	r3, r3, #3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d130      	bne.n	800253a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	2203      	movs	r2, #3
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	693a      	ldr	r2, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800250e:	2201      	movs	r2, #1
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4013      	ands	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	f003 0201 	and.w	r2, r3, #1
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	fa02 f303 	lsl.w	r3, r2, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b03      	cmp	r3, #3
 8002544:	d017      	beq.n	8002576 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	4313      	orrs	r3, r2
 800256e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f003 0303 	and.w	r3, r3, #3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d123      	bne.n	80025ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	08da      	lsrs	r2, r3, #3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	3208      	adds	r2, #8
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f003 0307 	and.w	r3, r3, #7
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	220f      	movs	r2, #15
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43db      	mvns	r3, r3
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4013      	ands	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	6939      	ldr	r1, [r7, #16]
 80025c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	2203      	movs	r2, #3
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	4013      	ands	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0203 	and.w	r2, r3, #3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 8094 	beq.w	8002734 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260c:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_GPIO_Init+0x2c0>)
 800260e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002610:	4a51      	ldr	r2, [pc, #324]	@ (8002758 <HAL_GPIO_Init+0x2c0>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6613      	str	r3, [r2, #96]	@ 0x60
 8002618:	4b4f      	ldr	r3, [pc, #316]	@ (8002758 <HAL_GPIO_Init+0x2c0>)
 800261a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	60bb      	str	r3, [r7, #8]
 8002622:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002624:	4a4d      	ldr	r2, [pc, #308]	@ (800275c <HAL_GPIO_Init+0x2c4>)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	089b      	lsrs	r3, r3, #2
 800262a:	3302      	adds	r3, #2
 800262c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002630:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f003 0303 	and.w	r3, r3, #3
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	220f      	movs	r2, #15
 800263c:	fa02 f303 	lsl.w	r3, r2, r3
 8002640:	43db      	mvns	r3, r3
 8002642:	693a      	ldr	r2, [r7, #16]
 8002644:	4013      	ands	r3, r2
 8002646:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800264e:	d00d      	beq.n	800266c <HAL_GPIO_Init+0x1d4>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	4a43      	ldr	r2, [pc, #268]	@ (8002760 <HAL_GPIO_Init+0x2c8>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d007      	beq.n	8002668 <HAL_GPIO_Init+0x1d0>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a42      	ldr	r2, [pc, #264]	@ (8002764 <HAL_GPIO_Init+0x2cc>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d101      	bne.n	8002664 <HAL_GPIO_Init+0x1cc>
 8002660:	2302      	movs	r3, #2
 8002662:	e004      	b.n	800266e <HAL_GPIO_Init+0x1d6>
 8002664:	2307      	movs	r3, #7
 8002666:	e002      	b.n	800266e <HAL_GPIO_Init+0x1d6>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_GPIO_Init+0x1d6>
 800266c:	2300      	movs	r3, #0
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	0092      	lsls	r2, r2, #2
 8002676:	4093      	lsls	r3, r2
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800267e:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_GPIO_Init+0x2c4>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800268c:	4b36      	ldr	r3, [pc, #216]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4013      	ands	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026b0:	4a2d      	ldr	r2, [pc, #180]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026b6:	4b2c      	ldr	r3, [pc, #176]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	4013      	ands	r3, r2
 80026c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80026d2:	693a      	ldr	r2, [r7, #16]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026da:	4a23      	ldr	r2, [pc, #140]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026e0:	4b21      	ldr	r3, [pc, #132]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	693a      	ldr	r2, [r7, #16]
 80026ec:	4013      	ands	r3, r2
 80026ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80026fc:	693a      	ldr	r2, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4313      	orrs	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002704:	4a18      	ldr	r2, [pc, #96]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800270a:	4b17      	ldr	r3, [pc, #92]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	43db      	mvns	r3, r3
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4013      	ands	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800272e:	4a0e      	ldr	r2, [pc, #56]	@ (8002768 <HAL_GPIO_Init+0x2d0>)
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	fa22 f303 	lsr.w	r3, r2, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	f47f aeaf 	bne.w	80024a8 <HAL_GPIO_Init+0x10>
  }
}
 800274a:	bf00      	nop
 800274c:	bf00      	nop
 800274e:	371c      	adds	r7, #28
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	40021000 	.word	0x40021000
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002788:	e002      	b.n	8002790 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a04      	ldr	r2, [pc, #16]	@ (80027b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027aa:	6013      	str	r3, [r2, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	40007000 	.word	0x40007000

080027bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027c0:	4b04      	ldr	r3, [pc, #16]	@ (80027d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40007000 	.word	0x40007000

080027d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027e6:	d130      	bne.n	800284a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e8:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f4:	d038      	beq.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027f6:	4b20      	ldr	r3, [pc, #128]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027fe:	4a1e      	ldr	r2, [pc, #120]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002800:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002804:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002806:	4b1d      	ldr	r3, [pc, #116]	@ (800287c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2232      	movs	r2, #50	@ 0x32
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	4a1b      	ldr	r2, [pc, #108]	@ (8002880 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0c9b      	lsrs	r3, r3, #18
 8002818:	3301      	adds	r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800281c:	e002      	b.n	8002824 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3b01      	subs	r3, #1
 8002822:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002824:	4b14      	ldr	r3, [pc, #80]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800282c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002830:	d102      	bne.n	8002838 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1f2      	bne.n	800281e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002838:	4b0f      	ldr	r3, [pc, #60]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002844:	d110      	bne.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e00f      	b.n	800286a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800284a:	4b0b      	ldr	r3, [pc, #44]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002856:	d007      	beq.n	8002868 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002858:	4b07      	ldr	r3, [pc, #28]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002860:	4a05      	ldr	r2, [pc, #20]	@ (8002878 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002866:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	40007000 	.word	0x40007000
 800287c:	20000000 	.word	0x20000000
 8002880:	431bde83 	.word	0x431bde83

08002884 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d102      	bne.n	8002898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	f000 bc02 	b.w	800309c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002898:	4b96      	ldr	r3, [pc, #600]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028a2:	4b94      	ldr	r3, [pc, #592]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0303 	and.w	r3, r3, #3
 80028aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80e4 	beq.w	8002a82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4c>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	2b0c      	cmp	r3, #12
 80028c4:	f040 808b 	bne.w	80029de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	f040 8087 	bne.w	80029de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d0:	4b88      	ldr	r3, [pc, #544]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_RCC_OscConfig+0x64>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e3d9      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1a      	ldr	r2, [r3, #32]
 80028ec:	4b81      	ldr	r3, [pc, #516]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d004      	beq.n	8002902 <HAL_RCC_OscConfig+0x7e>
 80028f8:	4b7e      	ldr	r3, [pc, #504]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002900:	e005      	b.n	800290e <HAL_RCC_OscConfig+0x8a>
 8002902:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002904:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002908:	091b      	lsrs	r3, r3, #4
 800290a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290e:	4293      	cmp	r3, r2
 8002910:	d223      	bcs.n	800295a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fd8c 	bl	8003434 <RCC_SetFlashLatencyFromMSIRange>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e3ba      	b.n	800309c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002926:	4b73      	ldr	r3, [pc, #460]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a72      	ldr	r2, [pc, #456]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 800292c:	f043 0308 	orr.w	r3, r3, #8
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b70      	ldr	r3, [pc, #448]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	496d      	ldr	r1, [pc, #436]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002940:	4313      	orrs	r3, r2
 8002942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002944:	4b6b      	ldr	r3, [pc, #428]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	021b      	lsls	r3, r3, #8
 8002952:	4968      	ldr	r1, [pc, #416]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002954:	4313      	orrs	r3, r2
 8002956:	604b      	str	r3, [r1, #4]
 8002958:	e025      	b.n	80029a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800295a:	4b66      	ldr	r3, [pc, #408]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a65      	ldr	r2, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002960:	f043 0308 	orr.w	r3, r3, #8
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	4b63      	ldr	r3, [pc, #396]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	4960      	ldr	r1, [pc, #384]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002974:	4313      	orrs	r3, r2
 8002976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002978:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	69db      	ldr	r3, [r3, #28]
 8002984:	021b      	lsls	r3, r3, #8
 8002986:	495b      	ldr	r1, [pc, #364]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fd4c 	bl	8003434 <RCC_SetFlashLatencyFromMSIRange>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e37a      	b.n	800309c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a6:	f000 fc81 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 80029aa:	4602      	mov	r2, r0
 80029ac:	4b51      	ldr	r3, [pc, #324]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	4950      	ldr	r1, [pc, #320]	@ (8002af8 <HAL_RCC_OscConfig+0x274>)
 80029b8:	5ccb      	ldrb	r3, [r1, r3]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	fa22 f303 	lsr.w	r3, r2, r3
 80029c2:	4a4e      	ldr	r2, [pc, #312]	@ (8002afc <HAL_RCC_OscConfig+0x278>)
 80029c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <HAL_RCC_OscConfig+0x27c>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fe f938 	bl	8000c40 <HAL_InitTick>
 80029d0:	4603      	mov	r3, r0
 80029d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d052      	beq.n	8002a80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	e35e      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d032      	beq.n	8002a4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e6:	4b43      	ldr	r3, [pc, #268]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a42      	ldr	r2, [pc, #264]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029f2:	f7fe f975 	bl	8000ce0 <HAL_GetTick>
 80029f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029f8:	e008      	b.n	8002a0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fa:	f7fe f971 	bl	8000ce0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d901      	bls.n	8002a0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e347      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a0c:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f0      	beq.n	80029fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a18:	4b36      	ldr	r3, [pc, #216]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a35      	ldr	r2, [pc, #212]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a1e:	f043 0308 	orr.w	r3, r3, #8
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4b33      	ldr	r3, [pc, #204]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	4930      	ldr	r1, [pc, #192]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a36:	4b2f      	ldr	r3, [pc, #188]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69db      	ldr	r3, [r3, #28]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	492b      	ldr	r1, [pc, #172]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e01a      	b.n	8002a82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a4c:	4b29      	ldr	r3, [pc, #164]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a28      	ldr	r2, [pc, #160]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a58:	f7fe f942 	bl	8000ce0 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a60:	f7fe f93e 	bl	8000ce0 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e314      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a72:	4b20      	ldr	r3, [pc, #128]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x1dc>
 8002a7e:	e000      	b.n	8002a82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d073      	beq.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d005      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x21c>
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	2b0c      	cmp	r3, #12
 8002a98:	d10e      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d10b      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa0:	4b14      	ldr	r3, [pc, #80]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d063      	beq.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d15f      	bne.n	8002b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e2f1      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x24c>
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002acc:	6013      	str	r3, [r2, #0]
 8002ace:	e025      	b.n	8002b1c <HAL_RCC_OscConfig+0x298>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ad8:	d114      	bne.n	8002b04 <HAL_RCC_OscConfig+0x280>
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a05      	ldr	r2, [pc, #20]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	4b03      	ldr	r3, [pc, #12]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a02      	ldr	r2, [pc, #8]	@ (8002af4 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e013      	b.n	8002b1c <HAL_RCC_OscConfig+0x298>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	080054dc 	.word	0x080054dc
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000004 	.word	0x20000004
 8002b04:	4ba0      	ldr	r3, [pc, #640]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a9f      	ldr	r2, [pc, #636]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b0e:	6013      	str	r3, [r2, #0]
 8002b10:	4b9d      	ldr	r3, [pc, #628]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a9c      	ldr	r2, [pc, #624]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d013      	beq.n	8002b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7fe f8dc 	bl	8000ce0 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b2c:	f7fe f8d8 	bl	8000ce0 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b64      	cmp	r3, #100	@ 0x64
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e2ae      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3e:	4b92      	ldr	r3, [pc, #584]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x2a8>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4c:	f7fe f8c8 	bl	8000ce0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b52:	e008      	b.n	8002b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b54:	f7fe f8c4 	bl	8000ce0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b64      	cmp	r3, #100	@ 0x64
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e29a      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b66:	4b88      	ldr	r3, [pc, #544]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f0      	bne.n	8002b54 <HAL_RCC_OscConfig+0x2d0>
 8002b72:	e000      	b.n	8002b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d060      	beq.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_OscConfig+0x310>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d119      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d116      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b94:	4b7c      	ldr	r3, [pc, #496]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_OscConfig+0x328>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e277      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bac:	4b76      	ldr	r3, [pc, #472]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	4973      	ldr	r1, [pc, #460]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bc0:	e040      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d023      	beq.n	8002c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bca:	4b6f      	ldr	r3, [pc, #444]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6e      	ldr	r2, [pc, #440]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd6:	f7fe f883 	bl	8000ce0 <HAL_GetTick>
 8002bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bdc:	e008      	b.n	8002bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bde:	f7fe f87f 	bl	8000ce0 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b02      	cmp	r3, #2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e255      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf0:	4b65      	ldr	r3, [pc, #404]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0f0      	beq.n	8002bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfc:	4b62      	ldr	r3, [pc, #392]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	061b      	lsls	r3, r3, #24
 8002c0a:	495f      	ldr	r1, [pc, #380]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	604b      	str	r3, [r1, #4]
 8002c10:	e018      	b.n	8002c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c12:	4b5d      	ldr	r3, [pc, #372]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a5c      	ldr	r2, [pc, #368]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1e:	f7fe f85f 	bl	8000ce0 <HAL_GetTick>
 8002c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c24:	e008      	b.n	8002c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c26:	f7fe f85b 	bl	8000ce0 <HAL_GetTick>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	1ad3      	subs	r3, r2, r3
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e231      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c38:	4b53      	ldr	r3, [pc, #332]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d1f0      	bne.n	8002c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0308 	and.w	r3, r3, #8
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d03c      	beq.n	8002cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d01c      	beq.n	8002c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c58:	4b4b      	ldr	r3, [pc, #300]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c68:	f7fe f83a 	bl	8000ce0 <HAL_GetTick>
 8002c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c70:	f7fe f836 	bl	8000ce0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e20c      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c82:	4b41      	ldr	r3, [pc, #260]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0ef      	beq.n	8002c70 <HAL_RCC_OscConfig+0x3ec>
 8002c90:	e01b      	b.n	8002cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c92:	4b3d      	ldr	r3, [pc, #244]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c98:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca2:	f7fe f81d 	bl	8000ce0 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002caa:	f7fe f819 	bl	8000ce0 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1ef      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cbc:	4b32      	ldr	r3, [pc, #200]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1ef      	bne.n	8002caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0304 	and.w	r3, r3, #4
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80a6 	beq.w	8002e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cec:	4a26      	ldr	r2, [pc, #152]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf4:	4b24      	ldr	r3, [pc, #144]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d04:	4b21      	ldr	r3, [pc, #132]	@ (8002d8c <HAL_RCC_OscConfig+0x508>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d118      	bne.n	8002d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d10:	4b1e      	ldr	r3, [pc, #120]	@ (8002d8c <HAL_RCC_OscConfig+0x508>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <HAL_RCC_OscConfig+0x508>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d1c:	f7fd ffe0 	bl	8000ce0 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fd ffdc 	bl	8000ce0 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e1b2      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d36:	4b15      	ldr	r3, [pc, #84]	@ (8002d8c <HAL_RCC_OscConfig+0x508>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x4d8>
 8002d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d5a:	e029      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	2b05      	cmp	r3, #5
 8002d62:	d115      	bne.n	8002d90 <HAL_RCC_OscConfig+0x50c>
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d6a:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d6c:	f043 0304 	orr.w	r3, r3, #4
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a03      	ldr	r2, [pc, #12]	@ (8002d88 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d84:	e014      	b.n	8002db0 <HAL_RCC_OscConfig+0x52c>
 8002d86:	bf00      	nop
 8002d88:	40021000 	.word	0x40021000
 8002d8c:	40007000 	.word	0x40007000
 8002d90:	4b9a      	ldr	r3, [pc, #616]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d96:	4a99      	ldr	r2, [pc, #612]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002da0:	4b96      	ldr	r3, [pc, #600]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a95      	ldr	r2, [pc, #596]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002da8:	f023 0304 	bic.w	r3, r3, #4
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fd ff92 	bl	8000ce0 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fd ff8e 	bl	8000ce0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e162      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dd6:	4b89      	ldr	r3, [pc, #548]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0ed      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x53c>
 8002de4:	e015      	b.n	8002e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de6:	f7fd ff7b 	bl	8000ce0 <HAL_GetTick>
 8002dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dec:	e00a      	b.n	8002e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fd ff77 	bl	8000ce0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e14b      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e04:	4b7d      	ldr	r3, [pc, #500]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ed      	bne.n	8002dee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e12:	7ffb      	ldrb	r3, [r7, #31]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d105      	bne.n	8002e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e18:	4b78      	ldr	r3, [pc, #480]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	4a77      	ldr	r2, [pc, #476]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0320 	and.w	r3, r3, #32
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03c      	beq.n	8002eaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01c      	beq.n	8002e72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e38:	4b70      	ldr	r3, [pc, #448]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e3e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fd ff4a 	bl	8000ce0 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e50:	f7fd ff46 	bl	8000ce0 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e11c      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002e62:	4b66      	ldr	r3, [pc, #408]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <HAL_RCC_OscConfig+0x5cc>
 8002e70:	e01b      	b.n	8002eaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e72:	4b62      	ldr	r3, [pc, #392]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002e78:	4a60      	ldr	r2, [pc, #384]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e7a:	f023 0301 	bic.w	r3, r3, #1
 8002e7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fd ff2d 	bl	8000ce0 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e8a:	f7fd ff29 	bl	8000ce0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e0ff      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e9c:	4b57      	ldr	r3, [pc, #348]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d1ef      	bne.n	8002e8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	f000 80f3 	beq.w	800309a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	f040 80c9 	bne.w	8003050 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ebe:	4b4f      	ldr	r3, [pc, #316]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	f003 0203 	and.w	r2, r3, #3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d12c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002edc:	3b01      	subs	r3, #1
 8002ede:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d123      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d11b      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d113      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0e:	085b      	lsrs	r3, r3, #1
 8002f10:	3b01      	subs	r3, #1
 8002f12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d109      	bne.n	8002f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	085b      	lsrs	r3, r3, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d06b      	beq.n	8003004 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d062      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f32:	4b32      	ldr	r3, [pc, #200]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e0ac      	b.n	800309c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f42:	4b2e      	ldr	r3, [pc, #184]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2d      	ldr	r2, [pc, #180]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f4c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f4e:	f7fd fec7 	bl	8000ce0 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f56:	f7fd fec3 	bl	8000ce0 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e099      	b.n	800309c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f68:	4b24      	ldr	r3, [pc, #144]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f0      	bne.n	8002f56 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f74:	4b21      	ldr	r3, [pc, #132]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b21      	ldr	r3, [pc, #132]	@ (8003000 <HAL_RCC_OscConfig+0x77c>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f84:	3a01      	subs	r2, #1
 8002f86:	0112      	lsls	r2, r2, #4
 8002f88:	4311      	orrs	r1, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f8e:	0212      	lsls	r2, r2, #8
 8002f90:	4311      	orrs	r1, r2
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f96:	0852      	lsrs	r2, r2, #1
 8002f98:	3a01      	subs	r2, #1
 8002f9a:	0552      	lsls	r2, r2, #21
 8002f9c:	4311      	orrs	r1, r2
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fa2:	0852      	lsrs	r2, r2, #1
 8002fa4:	3a01      	subs	r2, #1
 8002fa6:	0652      	lsls	r2, r2, #25
 8002fa8:	4311      	orrs	r1, r2
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002fae:	06d2      	lsls	r2, r2, #27
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	4912      	ldr	r1, [pc, #72]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fb8:	4b10      	ldr	r3, [pc, #64]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fd0:	f7fd fe86 	bl	8000ce0 <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd8:	f7fd fe82 	bl	8000ce0 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e058      	b.n	800309c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fea:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <HAL_RCC_OscConfig+0x778>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff6:	e050      	b.n	800309a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e04f      	b.n	800309c <HAL_RCC_OscConfig+0x818>
 8002ffc:	40021000 	.word	0x40021000
 8003000:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003004:	4b27      	ldr	r3, [pc, #156]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d144      	bne.n	800309a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003010:	4b24      	ldr	r3, [pc, #144]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a23      	ldr	r2, [pc, #140]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003016:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800301a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800301c:	4b21      	ldr	r3, [pc, #132]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4a20      	ldr	r2, [pc, #128]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003022:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003026:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003028:	f7fd fe5a 	bl	8000ce0 <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003030:	f7fd fe56 	bl	8000ce0 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e02c      	b.n	800309c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003042:	4b18      	ldr	r3, [pc, #96]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x7ac>
 800304e:	e024      	b.n	800309a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b0c      	cmp	r3, #12
 8003054:	d01f      	beq.n	8003096 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b13      	ldr	r3, [pc, #76]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a12      	ldr	r2, [pc, #72]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 800305c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003062:	f7fd fe3d 	bl	8000ce0 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd fe39 	bl	8000ce0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e00f      	b.n	800309c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f0      	bne.n	800306a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003088:	4b06      	ldr	r3, [pc, #24]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	4905      	ldr	r1, [pc, #20]	@ (80030a4 <HAL_RCC_OscConfig+0x820>)
 800308e:	4b06      	ldr	r3, [pc, #24]	@ (80030a8 <HAL_RCC_OscConfig+0x824>)
 8003090:	4013      	ands	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
 8003094:	e001      	b.n	800309a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e000      	b.n	800309c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40021000 	.word	0x40021000
 80030a8:	feeefffc 	.word	0xfeeefffc

080030ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e0e7      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c0:	4b75      	ldr	r3, [pc, #468]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d910      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ce:	4b72      	ldr	r3, [pc, #456]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f023 0207 	bic.w	r2, r3, #7
 80030d6:	4970      	ldr	r1, [pc, #448]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	4313      	orrs	r3, r2
 80030dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b6e      	ldr	r3, [pc, #440]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0cf      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d010      	beq.n	800311e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	4b66      	ldr	r3, [pc, #408]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003108:	429a      	cmp	r2, r3
 800310a:	d908      	bls.n	800311e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800310c:	4b63      	ldr	r3, [pc, #396]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4960      	ldr	r1, [pc, #384]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	4313      	orrs	r3, r2
 800311c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d04c      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b03      	cmp	r3, #3
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b5a      	ldr	r3, [pc, #360]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d121      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e0a6      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2b02      	cmp	r3, #2
 8003148:	d107      	bne.n	800315a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800314a:	4b54      	ldr	r3, [pc, #336]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d115      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e09a      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003162:	4b4e      	ldr	r3, [pc, #312]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e08e      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003172:	4b4a      	ldr	r3, [pc, #296]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e086      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b46      	ldr	r3, [pc, #280]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4943      	ldr	r1, [pc, #268]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fd fda4 	bl	8000ce0 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd fda0 	bl	8000ce0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e06e      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b3a      	ldr	r3, [pc, #232]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0302 	and.w	r3, r3, #2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	4b31      	ldr	r3, [pc, #196]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031dc:	429a      	cmp	r2, r3
 80031de:	d208      	bcs.n	80031f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e0:	4b2e      	ldr	r3, [pc, #184]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	492b      	ldr	r1, [pc, #172]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f2:	4b29      	ldr	r3, [pc, #164]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	683a      	ldr	r2, [r7, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d210      	bcs.n	8003222 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003200:	4b25      	ldr	r3, [pc, #148]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f023 0207 	bic.w	r2, r3, #7
 8003208:	4923      	ldr	r1, [pc, #140]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003210:	4b21      	ldr	r3, [pc, #132]	@ (8003298 <HAL_RCC_ClockConfig+0x1ec>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0307 	and.w	r3, r3, #7
 8003218:	683a      	ldr	r2, [r7, #0]
 800321a:	429a      	cmp	r2, r3
 800321c:	d001      	beq.n	8003222 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e036      	b.n	8003290 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d008      	beq.n	8003240 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322e:	4b1b      	ldr	r3, [pc, #108]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	4918      	ldr	r1, [pc, #96]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	4313      	orrs	r3, r2
 800323e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d009      	beq.n	8003260 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800324c:	4b13      	ldr	r3, [pc, #76]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4910      	ldr	r1, [pc, #64]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003260:	f000 f824 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8003264:	4602      	mov	r2, r0
 8003266:	4b0d      	ldr	r3, [pc, #52]	@ (800329c <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	490b      	ldr	r1, [pc, #44]	@ (80032a0 <HAL_RCC_ClockConfig+0x1f4>)
 8003272:	5ccb      	ldrb	r3, [r1, r3]
 8003274:	f003 031f 	and.w	r3, r3, #31
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
 800327c:	4a09      	ldr	r2, [pc, #36]	@ (80032a4 <HAL_RCC_ClockConfig+0x1f8>)
 800327e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003280:	4b09      	ldr	r3, [pc, #36]	@ (80032a8 <HAL_RCC_ClockConfig+0x1fc>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4618      	mov	r0, r3
 8003286:	f7fd fcdb 	bl	8000c40 <HAL_InitTick>
 800328a:	4603      	mov	r3, r0
 800328c:	72fb      	strb	r3, [r7, #11]

  return status;
 800328e:	7afb      	ldrb	r3, [r7, #11]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40022000 	.word	0x40022000
 800329c:	40021000 	.word	0x40021000
 80032a0:	080054dc 	.word	0x080054dc
 80032a4:	20000000 	.word	0x20000000
 80032a8:	20000004 	.word	0x20000004

080032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b089      	sub	sp, #36	@ 0x24
 80032b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61fb      	str	r3, [r7, #28]
 80032b6:	2300      	movs	r3, #0
 80032b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ba:	4b3e      	ldr	r3, [pc, #248]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032c4:	4b3b      	ldr	r3, [pc, #236]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x34>
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d121      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d11e      	bne.n	800331e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032e0:	4b34      	ldr	r3, [pc, #208]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0308 	and.w	r3, r3, #8
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032ec:	4b31      	ldr	r3, [pc, #196]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f2:	0a1b      	lsrs	r3, r3, #8
 80032f4:	f003 030f 	and.w	r3, r3, #15
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e005      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	091b      	lsrs	r3, r3, #4
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003308:	4a2b      	ldr	r2, [pc, #172]	@ (80033b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003310:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10d      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331c:	e00a      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d102      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003324:	4b25      	ldr	r3, [pc, #148]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003326:	61bb      	str	r3, [r7, #24]
 8003328:	e004      	b.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b08      	cmp	r3, #8
 800332e:	d101      	bne.n	8003334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003330:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b0c      	cmp	r3, #12
 8003338:	d134      	bne.n	80033a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800333a:	4b1e      	ldr	r3, [pc, #120]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b02      	cmp	r3, #2
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0xa6>
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b03      	cmp	r3, #3
 800334e:	d003      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0xac>
 8003350:	e005      	b.n	800335e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003352:	4b1a      	ldr	r3, [pc, #104]	@ (80033bc <HAL_RCC_GetSysClockFreq+0x110>)
 8003354:	617b      	str	r3, [r7, #20]
      break;
 8003356:	e005      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003358:	4b19      	ldr	r3, [pc, #100]	@ (80033c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800335a:	617b      	str	r3, [r7, #20]
      break;
 800335c:	e002      	b.n	8003364 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	617b      	str	r3, [r7, #20]
      break;
 8003362:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003364:	4b13      	ldr	r3, [pc, #76]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	091b      	lsrs	r3, r3, #4
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003372:	4b10      	ldr	r3, [pc, #64]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	fb03 f202 	mul.w	r2, r3, r2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	fbb2 f3f3 	udiv	r3, r2, r3
 8003388:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800338a:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	0e5b      	lsrs	r3, r3, #25
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	3301      	adds	r3, #1
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033a4:	69bb      	ldr	r3, [r7, #24]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3724      	adds	r7, #36	@ 0x24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000
 80033b8:	080054f4 	.word	0x080054f4
 80033bc:	00f42400 	.word	0x00f42400
 80033c0:	007a1200 	.word	0x007a1200

080033c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033c8:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000000 	.word	0x20000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80033e0:	f7ff fff0 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	0a1b      	lsrs	r3, r3, #8
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4904      	ldr	r1, [pc, #16]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000
 8003404:	080054ec 	.word	0x080054ec

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800340c:	f7ff ffda 	bl	80033c4 <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	0adb      	lsrs	r3, r3, #11
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4904      	ldr	r1, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	40021000 	.word	0x40021000
 8003430:	080054ec 	.word	0x080054ec

08003434 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003440:	4b2a      	ldr	r3, [pc, #168]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003442:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800344c:	f7ff f9b6 	bl	80027bc <HAL_PWREx_GetVoltageRange>
 8003450:	6178      	str	r0, [r7, #20]
 8003452:	e014      	b.n	800347e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003454:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003458:	4a24      	ldr	r2, [pc, #144]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800345a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800345e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003460:	4b22      	ldr	r3, [pc, #136]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003462:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800346c:	f7ff f9a6 	bl	80027bc <HAL_PWREx_GetVoltageRange>
 8003470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003472:	4b1e      	ldr	r3, [pc, #120]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003476:	4a1d      	ldr	r2, [pc, #116]	@ (80034ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003478:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003484:	d10b      	bne.n	800349e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b80      	cmp	r3, #128	@ 0x80
 800348a:	d919      	bls.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003490:	d902      	bls.n	8003498 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003492:	2302      	movs	r3, #2
 8003494:	613b      	str	r3, [r7, #16]
 8003496:	e013      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003498:	2301      	movs	r3, #1
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	e010      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b80      	cmp	r3, #128	@ 0x80
 80034a2:	d902      	bls.n	80034aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80034a4:	2303      	movs	r3, #3
 80034a6:	613b      	str	r3, [r7, #16]
 80034a8:	e00a      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b80      	cmp	r3, #128	@ 0x80
 80034ae:	d102      	bne.n	80034b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
 80034b4:	e004      	b.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b70      	cmp	r3, #112	@ 0x70
 80034ba:	d101      	bne.n	80034c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80034bc:	2301      	movs	r3, #1
 80034be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80034c0:	4b0b      	ldr	r3, [pc, #44]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f023 0207 	bic.w	r2, r3, #7
 80034c8:	4909      	ldr	r1, [pc, #36]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80034d0:	4b07      	ldr	r3, [pc, #28]	@ (80034f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d001      	beq.n	80034e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40022000 	.word	0x40022000

080034f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034fc:	2300      	movs	r3, #0
 80034fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003500:	2300      	movs	r3, #0
 8003502:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800350c:	2b00      	cmp	r3, #0
 800350e:	d031      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003518:	d01a      	beq.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800351a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800351e:	d814      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003528:	d10f      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800352a:	4b5d      	ldr	r3, [pc, #372]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4a5c      	ldr	r2, [pc, #368]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003536:	e00c      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	2100      	movs	r1, #0
 800353e:	4618      	mov	r0, r3
 8003540:	f000 f9de 	bl	8003900 <RCCEx_PLLSAI1_Config>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003548:	e003      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	74fb      	strb	r3, [r7, #19]
      break;
 800354e:	e000      	b.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003550:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003552:	7cfb      	ldrb	r3, [r7, #19]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003558:	4b51      	ldr	r3, [pc, #324]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003566:	494e      	ldr	r1, [pc, #312]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003568:	4313      	orrs	r3, r2
 800356a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800356e:	e001      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 809e 	beq.w	80036be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003586:	4b46      	ldr	r3, [pc, #280]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003596:	2300      	movs	r3, #0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800359c:	4b40      	ldr	r3, [pc, #256]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	4a3f      	ldr	r2, [pc, #252]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a8:	4b3d      	ldr	r3, [pc, #244]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	60bb      	str	r3, [r7, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035b4:	2301      	movs	r3, #1
 80035b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b8:	4b3a      	ldr	r3, [pc, #232]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a39      	ldr	r2, [pc, #228]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80035c4:	f7fd fb8c 	bl	8000ce0 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035ca:	e009      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7fd fb88 	bl	8000ce0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d902      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	74fb      	strb	r3, [r7, #19]
        break;
 80035de:	e005      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80035e0:	4b30      	ldr	r3, [pc, #192]	@ (80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0ef      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80035ec:	7cfb      	ldrb	r3, [r7, #19]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d15a      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80035f2:	4b2b      	ldr	r3, [pc, #172]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01e      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	429a      	cmp	r2, r3
 800360c:	d019      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800360e:	4b24      	ldr	r3, [pc, #144]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003614:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003618:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800361a:	4b21      	ldr	r3, [pc, #132]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003620:	4a1f      	ldr	r2, [pc, #124]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003622:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003626:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800362a:	4b1d      	ldr	r3, [pc, #116]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003630:	4a1b      	ldr	r2, [pc, #108]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003636:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800363a:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d016      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fd fb48 	bl	8000ce0 <HAL_GetTick>
 8003650:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003652:	e00b      	b.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003654:	f7fd fb44 	bl	8000ce0 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003662:	4293      	cmp	r3, r2
 8003664:	d902      	bls.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	74fb      	strb	r3, [r7, #19]
            break;
 800366a:	e006      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800366c:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0ec      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800367a:	7cfb      	ldrb	r3, [r7, #19]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10b      	bne.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003680:	4b07      	ldr	r3, [pc, #28]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003686:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800368e:	4904      	ldr	r1, [pc, #16]	@ (80036a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003698:	7cfb      	ldrb	r3, [r7, #19]
 800369a:	74bb      	strb	r3, [r7, #18]
 800369c:	e006      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a8:	7cfb      	ldrb	r3, [r7, #19]
 80036aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ac:	7c7b      	ldrb	r3, [r7, #17]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d105      	bne.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036b2:	4b8a      	ldr	r3, [pc, #552]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b6:	4a89      	ldr	r2, [pc, #548]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036ca:	4b84      	ldr	r3, [pc, #528]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036d0:	f023 0203 	bic.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4980      	ldr	r1, [pc, #512]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d00a      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036ec:	4b7b      	ldr	r3, [pc, #492]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f2:	f023 020c 	bic.w	r2, r3, #12
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fa:	4978      	ldr	r1, [pc, #480]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370e:	4b73      	ldr	r3, [pc, #460]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003714:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	496f      	ldr	r1, [pc, #444]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00a      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003730:	4b6a      	ldr	r3, [pc, #424]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003736:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800373e:	4967      	ldr	r1, [pc, #412]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003740:	4313      	orrs	r3, r2
 8003742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003752:	4b62      	ldr	r3, [pc, #392]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003758:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003760:	495e      	ldr	r1, [pc, #376]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003762:	4313      	orrs	r3, r2
 8003764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00a      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003782:	4956      	ldr	r1, [pc, #344]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003796:	4b51      	ldr	r3, [pc, #324]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a4:	494d      	ldr	r1, [pc, #308]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d028      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037b8:	4b48      	ldr	r3, [pc, #288]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c6:	4945      	ldr	r1, [pc, #276]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037d8:	4b40      	ldr	r3, [pc, #256]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a3f      	ldr	r2, [pc, #252]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037e2:	60d3      	str	r3, [r2, #12]
 80037e4:	e011      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ee:	d10c      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	3304      	adds	r3, #4
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f882 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003800:	7cfb      	ldrb	r3, [r7, #19]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d028      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003816:	4b31      	ldr	r3, [pc, #196]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800381c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003824:	492d      	ldr	r1, [pc, #180]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003830:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003834:	d106      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003836:	4b29      	ldr	r3, [pc, #164]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	4a28      	ldr	r2, [pc, #160]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800383c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003840:	60d3      	str	r3, [r2, #12]
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003848:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800384c:	d10c      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	2101      	movs	r1, #1
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f853 	bl	8003900 <RCCEx_PLLSAI1_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800385e:	7cfb      	ldrb	r3, [r7, #19]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d001      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003864:	7cfb      	ldrb	r3, [r7, #19]
 8003866:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003870:	2b00      	cmp	r3, #0
 8003872:	d01c      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003882:	4916      	ldr	r1, [pc, #88]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003884:	4313      	orrs	r3, r2
 8003886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800388e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003892:	d10c      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3304      	adds	r3, #4
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f830 	bl	8003900 <RCCEx_PLLSAI1_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038a4:	7cfb      	ldrb	r3, [r7, #19]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80038aa:	7cfb      	ldrb	r3, [r7, #19]
 80038ac:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038ba:	4b08      	ldr	r3, [pc, #32]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c8:	4904      	ldr	r1, [pc, #16]	@ (80038dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038d0:	7cbb      	ldrb	r3, [r7, #18]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000

080038e0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a04      	ldr	r2, [pc, #16]	@ (80038fc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80038ea:	f043 0304 	orr.w	r3, r3, #4
 80038ee:	6013      	str	r3, [r2, #0]
}
 80038f0:	bf00      	nop
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	40021000 	.word	0x40021000

08003900 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800390e:	4b74      	ldr	r3, [pc, #464]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d018      	beq.n	800394c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800391a:	4b71      	ldr	r3, [pc, #452]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0203 	and.w	r2, r3, #3
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d10d      	bne.n	8003946 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
       ||
 800392e:	2b00      	cmp	r3, #0
 8003930:	d009      	beq.n	8003946 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003932:	4b6b      	ldr	r3, [pc, #428]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	1c5a      	adds	r2, r3, #1
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
       ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d047      	beq.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
 800394a:	e044      	b.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b03      	cmp	r3, #3
 8003952:	d018      	beq.n	8003986 <RCCEx_PLLSAI1_Config+0x86>
 8003954:	2b03      	cmp	r3, #3
 8003956:	d825      	bhi.n	80039a4 <RCCEx_PLLSAI1_Config+0xa4>
 8003958:	2b01      	cmp	r3, #1
 800395a:	d002      	beq.n	8003962 <RCCEx_PLLSAI1_Config+0x62>
 800395c:	2b02      	cmp	r3, #2
 800395e:	d009      	beq.n	8003974 <RCCEx_PLLSAI1_Config+0x74>
 8003960:	e020      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003962:	4b5f      	ldr	r3, [pc, #380]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11d      	bne.n	80039aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003972:	e01a      	b.n	80039aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003974:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800397c:	2b00      	cmp	r3, #0
 800397e:	d116      	bne.n	80039ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003984:	e013      	b.n	80039ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003986:	4b56      	ldr	r3, [pc, #344]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d10f      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003992:	4b53      	ldr	r3, [pc, #332]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039a2:	e006      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
      break;
 80039a8:	e004      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039aa:	bf00      	nop
 80039ac:	e002      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039ae:	bf00      	nop
 80039b0:	e000      	b.n	80039b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80039b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10d      	bne.n	80039d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ba:	4b49      	ldr	r3, [pc, #292]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6819      	ldr	r1, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	430b      	orrs	r3, r1
 80039d0:	4943      	ldr	r1, [pc, #268]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d17c      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80039dc:	4b40      	ldr	r3, [pc, #256]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80039e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e8:	f7fd f97a 	bl	8000ce0 <HAL_GetTick>
 80039ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80039ee:	e009      	b.n	8003a04 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039f0:	f7fd f976 	bl	8000ce0 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d902      	bls.n	8003a04 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	73fb      	strb	r3, [r7, #15]
        break;
 8003a02:	e005      	b.n	8003a10 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a04:	4b36      	ldr	r3, [pc, #216]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1ef      	bne.n	80039f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d15f      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d110      	bne.n	8003a3e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a1c:	4b30      	ldr	r3, [pc, #192]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003a24:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6892      	ldr	r2, [r2, #8]
 8003a2c:	0211      	lsls	r1, r2, #8
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	68d2      	ldr	r2, [r2, #12]
 8003a32:	06d2      	lsls	r2, r2, #27
 8003a34:	430a      	orrs	r2, r1
 8003a36:	492a      	ldr	r1, [pc, #168]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	610b      	str	r3, [r1, #16]
 8003a3c:	e027      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d112      	bne.n	8003a6a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a44:	4b26      	ldr	r3, [pc, #152]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003a4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	0211      	lsls	r1, r2, #8
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6912      	ldr	r2, [r2, #16]
 8003a5a:	0852      	lsrs	r2, r2, #1
 8003a5c:	3a01      	subs	r2, #1
 8003a5e:	0552      	lsls	r2, r2, #21
 8003a60:	430a      	orrs	r2, r1
 8003a62:	491f      	ldr	r1, [pc, #124]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	610b      	str	r3, [r1, #16]
 8003a68:	e011      	b.n	8003a8e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a72:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	0211      	lsls	r1, r2, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6952      	ldr	r2, [r2, #20]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0652      	lsls	r2, r2, #25
 8003a86:	430a      	orrs	r2, r1
 8003a88:	4915      	ldr	r1, [pc, #84]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd f921 	bl	8000ce0 <HAL_GetTick>
 8003a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003aa0:	e009      	b.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003aa2:	f7fd f91d 	bl	8000ce0 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d902      	bls.n	8003ab6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab4:	e005      	b.n	8003ac2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ef      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	4903      	ldr	r1, [pc, #12]	@ (8003ae0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e049      	b.n	8003b8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fc ff72 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 fa84 	bl	8004030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2201      	movs	r2, #1
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3708      	adds	r7, #8
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d001      	beq.n	8003bac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e033      	b.n	8003c14 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a19      	ldr	r2, [pc, #100]	@ (8003c20 <HAL_TIM_Base_Start+0x8c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d009      	beq.n	8003bd2 <HAL_TIM_Base_Start+0x3e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bc6:	d004      	beq.n	8003bd2 <HAL_TIM_Base_Start+0x3e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <HAL_TIM_Base_Start+0x90>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d115      	bne.n	8003bfe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4b13      	ldr	r3, [pc, #76]	@ (8003c28 <HAL_TIM_Base_Start+0x94>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b06      	cmp	r3, #6
 8003be2:	d015      	beq.n	8003c10 <HAL_TIM_Base_Start+0x7c>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bea:	d011      	beq.n	8003c10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bfc:	e008      	b.n	8003c10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f042 0201 	orr.w	r2, r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	e000      	b.n	8003c12 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3714      	adds	r7, #20
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40014000 	.word	0x40014000
 8003c28:	00010007 	.word	0x00010007

08003c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d020      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01b      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f06f 0202 	mvn.w	r2, #2
 8003c60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d003      	beq.n	8003c7e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f9bc 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003c7c:	e005      	b.n	8003c8a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f9ae 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f9bf 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d020      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d01b      	beq.n	8003cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0204 	mvn.w	r2, #4
 8003cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d003      	beq.n	8003cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 f996 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003cc8:	e005      	b.n	8003cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f988 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f999 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d020      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d01b      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0208 	mvn.w	r2, #8
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f970 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f962 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f973 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0310 	and.w	r3, r3, #16
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0210 	mvn.w	r2, #16
 8003d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2208      	movs	r2, #8
 8003d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f94a 	bl	8003ff4 <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f93c 	bl	8003fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f94d 	bl	8004008 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00c      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0201 	mvn.w	r2, #1
 8003d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f000 f91a 	bl	8003fcc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d104      	bne.n	8003dac <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d007      	beq.n	8003dc6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 faaf 	bl	8004324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00c      	beq.n	8003dea <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003de2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 faa7 	bl	8004338 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00c      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f907 	bl	800401c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f003 0320 	and.w	r3, r3, #32
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00c      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d007      	beq.n	8003e32 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f06f 0220 	mvn.w	r2, #32
 8003e2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fa6f 	bl	8004310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d101      	bne.n	8003e56 <HAL_TIM_ConfigClockSource+0x1c>
 8003e52:	2302      	movs	r3, #2
 8003e54:	e0b6      	b.n	8003fc4 <HAL_TIM_ConfigClockSource+0x18a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e74:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e80:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e92:	d03e      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0xd8>
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e98:	f200 8087 	bhi.w	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003e9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea0:	f000 8086 	beq.w	8003fb0 <HAL_TIM_ConfigClockSource+0x176>
 8003ea4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ea8:	d87f      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003eaa:	2b70      	cmp	r3, #112	@ 0x70
 8003eac:	d01a      	beq.n	8003ee4 <HAL_TIM_ConfigClockSource+0xaa>
 8003eae:	2b70      	cmp	r3, #112	@ 0x70
 8003eb0:	d87b      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003eb2:	2b60      	cmp	r3, #96	@ 0x60
 8003eb4:	d050      	beq.n	8003f58 <HAL_TIM_ConfigClockSource+0x11e>
 8003eb6:	2b60      	cmp	r3, #96	@ 0x60
 8003eb8:	d877      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003eba:	2b50      	cmp	r3, #80	@ 0x50
 8003ebc:	d03c      	beq.n	8003f38 <HAL_TIM_ConfigClockSource+0xfe>
 8003ebe:	2b50      	cmp	r3, #80	@ 0x50
 8003ec0:	d873      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003ec2:	2b40      	cmp	r3, #64	@ 0x40
 8003ec4:	d058      	beq.n	8003f78 <HAL_TIM_ConfigClockSource+0x13e>
 8003ec6:	2b40      	cmp	r3, #64	@ 0x40
 8003ec8:	d86f      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003eca:	2b30      	cmp	r3, #48	@ 0x30
 8003ecc:	d064      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ece:	2b30      	cmp	r3, #48	@ 0x30
 8003ed0:	d86b      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	d060      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ed6:	2b20      	cmp	r3, #32
 8003ed8:	d867      	bhi.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d05c      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d05a      	beq.n	8003f98 <HAL_TIM_ConfigClockSource+0x15e>
 8003ee2:	e062      	b.n	8003faa <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ef4:	f000 f986 	bl	8004204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f06:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68ba      	ldr	r2, [r7, #8]
 8003f0e:	609a      	str	r2, [r3, #8]
      break;
 8003f10:	e04f      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f22:	f000 f96f 	bl	8004204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f34:	609a      	str	r2, [r3, #8]
      break;
 8003f36:	e03c      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f44:	461a      	mov	r2, r3
 8003f46:	f000 f8e3 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2150      	movs	r1, #80	@ 0x50
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 f93c 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f56:	e02c      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f64:	461a      	mov	r2, r3
 8003f66:	f000 f902 	bl	800416e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2160      	movs	r1, #96	@ 0x60
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 f92c 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f76:	e01c      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f84:	461a      	mov	r2, r3
 8003f86:	f000 f8c3 	bl	8004110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2140      	movs	r1, #64	@ 0x40
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 f91c 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003f96:	e00c      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	f000 f913 	bl	80041ce <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e003      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	73fb      	strb	r3, [r7, #15]
      break;
 8003fae:	e000      	b.n	8003fb2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003fb0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004010:	bf00      	nop
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr

0800401c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	4a30      	ldr	r2, [pc, #192]	@ (8004104 <TIM_Base_SetConfig+0xd4>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d003      	beq.n	8004050 <TIM_Base_SetConfig+0x20>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800404e:	d108      	bne.n	8004062 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <TIM_Base_SetConfig+0xd4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d00b      	beq.n	8004082 <TIM_Base_SetConfig+0x52>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004070:	d007      	beq.n	8004082 <TIM_Base_SetConfig+0x52>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a24      	ldr	r2, [pc, #144]	@ (8004108 <TIM_Base_SetConfig+0xd8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d003      	beq.n	8004082 <TIM_Base_SetConfig+0x52>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a23      	ldr	r2, [pc, #140]	@ (800410c <TIM_Base_SetConfig+0xdc>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d108      	bne.n	8004094 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004088:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4313      	orrs	r3, r2
 8004092:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	4313      	orrs	r3, r2
 80040a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68fa      	ldr	r2, [r7, #12]
 80040a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a12      	ldr	r2, [pc, #72]	@ (8004104 <TIM_Base_SetConfig+0xd4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d007      	beq.n	80040d0 <TIM_Base_SetConfig+0xa0>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a11      	ldr	r2, [pc, #68]	@ (8004108 <TIM_Base_SetConfig+0xd8>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_Base_SetConfig+0xa0>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a10      	ldr	r2, [pc, #64]	@ (800410c <TIM_Base_SetConfig+0xdc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	f023 0201 	bic.w	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	611a      	str	r2, [r3, #16]
  }
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40012c00 	.word	0x40012c00
 8004108:	40014000 	.word	0x40014000
 800410c:	40014400 	.word	0x40014400

08004110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004110:	b480      	push	{r7}
 8004112:	b087      	sub	sp, #28
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f023 0201 	bic.w	r2, r3, #1
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	011b      	lsls	r3, r3, #4
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f023 030a 	bic.w	r3, r3, #10
 800414c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4313      	orrs	r3, r2
 8004154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	621a      	str	r2, [r3, #32]
}
 8004162:	bf00      	nop
 8004164:	371c      	adds	r7, #28
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416e:	b480      	push	{r7}
 8004170:	b087      	sub	sp, #28
 8004172:	af00      	add	r7, sp, #0
 8004174:	60f8      	str	r0, [r7, #12]
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	f023 0210 	bic.w	r2, r3, #16
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004198:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	031b      	lsls	r3, r3, #12
 800419e:	693a      	ldr	r2, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	621a      	str	r2, [r3, #32]
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b085      	sub	sp, #20
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	6078      	str	r0, [r7, #4]
 80041d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f043 0307 	orr.w	r3, r3, #7
 80041f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	609a      	str	r2, [r3, #8]
}
 80041f8:	bf00      	nop
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	371c      	adds	r7, #28
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004254:	2b01      	cmp	r3, #1
 8004256:	d101      	bne.n	800425c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004258:	2302      	movs	r3, #2
 800425a:	e04f      	b.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2202      	movs	r2, #2
 8004268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a21      	ldr	r2, [pc, #132]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d108      	bne.n	8004298 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800428c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	4313      	orrs	r3, r2
 8004296:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a14      	ldr	r2, [pc, #80]	@ (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d004      	beq.n	80042d0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a10      	ldr	r2, [pc, #64]	@ (800430c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40014000 	.word	0x40014000

08004310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e040      	b.n	80043e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004362:	2b00      	cmp	r3, #0
 8004364:	d106      	bne.n	8004374 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f7fc fb64 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	@ 0x24
 8004378:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 0201 	bic.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	2b00      	cmp	r3, #0
 8004390:	d002      	beq.n	8004398 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fe04 	bl	8004fa0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fbd5 	bl	8004b48 <UART_SetConfig>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e01b      	b.n	80043e0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f042 0201 	orr.w	r2, r2, #1
 80043d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 fe83 	bl	80050e4 <UART_CheckIdleState>
 80043de:	4603      	mov	r3, r0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b08a      	sub	sp, #40	@ 0x28
 80043ec:	af02      	add	r7, sp, #8
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	4613      	mov	r3, r2
 80043f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043fc:	2b20      	cmp	r3, #32
 80043fe:	d177      	bne.n	80044f0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_UART_Transmit+0x24>
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e070      	b.n	80044f2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2221      	movs	r2, #33	@ 0x21
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800441e:	f7fc fc5f 	bl	8000ce0 <HAL_GetTick>
 8004422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	88fa      	ldrh	r2, [r7, #6]
 8004428:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800443c:	d108      	bne.n	8004450 <HAL_UART_Transmit+0x68>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e003      	b.n	8004458 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004458:	e02f      	b.n	80044ba <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	2180      	movs	r1, #128	@ 0x80
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fee5 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e03b      	b.n	80044f2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	881a      	ldrh	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	b292      	uxth	r2, r2
 800448e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	3302      	adds	r3, #2
 8004494:	61bb      	str	r3, [r7, #24]
 8004496:	e007      	b.n	80044a8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	781a      	ldrb	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	3301      	adds	r3, #1
 80044a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1c9      	bne.n	800445a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	2140      	movs	r1, #64	@ 0x40
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 feaf 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d004      	beq.n	80044e6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e005      	b.n	80044f2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2220      	movs	r2, #32
 80044ea:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	e000      	b.n	80044f2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80044f0:	2302      	movs	r3, #2
  }
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3720      	adds	r7, #32
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
	...

080044fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b0ba      	sub	sp, #232	@ 0xe8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004522:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004526:	f640 030f 	movw	r3, #2063	@ 0x80f
 800452a:	4013      	ands	r3, r2
 800452c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004530:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d115      	bne.n	8004564 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d00f      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004548:	f003 0320 	and.w	r3, r3, #32
 800454c:	2b00      	cmp	r3, #0
 800454e:	d009      	beq.n	8004564 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 82ca 	beq.w	8004aee <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	4798      	blx	r3
      }
      return;
 8004562:	e2c4      	b.n	8004aee <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8117 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800456e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	2b00      	cmp	r3, #0
 8004578:	d106      	bne.n	8004588 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800457a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800457e:	4b85      	ldr	r3, [pc, #532]	@ (8004794 <HAL_UART_IRQHandler+0x298>)
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 810a 	beq.w	800479c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800458c:	f003 0301 	and.w	r3, r3, #1
 8004590:	2b00      	cmp	r3, #0
 8004592:	d011      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
 8004594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00b      	beq.n	80045b8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2201      	movs	r2, #1
 80045a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d011      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00b      	beq.n	80045e8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2202      	movs	r2, #2
 80045d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80045de:	f043 0204 	orr.w	r2, r3, #4
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045ec:	f003 0304 	and.w	r3, r3, #4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d011      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
 80045f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00b      	beq.n	8004618 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2204      	movs	r2, #4
 8004606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800460e:	f043 0202 	orr.w	r2, r3, #2
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b00      	cmp	r3, #0
 8004622:	d017      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004628:	f003 0320 	and.w	r3, r3, #32
 800462c:	2b00      	cmp	r3, #0
 800462e:	d105      	bne.n	800463c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004634:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00b      	beq.n	8004654 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2208      	movs	r2, #8
 8004642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800464a:	f043 0208 	orr.w	r2, r3, #8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004658:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800465c:	2b00      	cmp	r3, #0
 800465e:	d012      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
 8004660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004664:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00c      	beq.n	8004686 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8230 	beq.w	8004af2 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004696:	f003 0320 	and.w	r3, r3, #32
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80046c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ce:	2b40      	cmp	r3, #64	@ 0x40
 80046d0:	d005      	beq.n	80046de <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d04f      	beq.n	800477e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fe15 	bl	800530e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d141      	bne.n	8004776 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004700:	e853 3f00 	ldrex	r3, [r3]
 8004704:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004708:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800470c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004710:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3308      	adds	r3, #8
 800471a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800471e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004726:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800472a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800472e:	e841 2300 	strex	r3, r2, [r1]
 8004732:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004736:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1d9      	bne.n	80046f2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004742:	2b00      	cmp	r3, #0
 8004744:	d013      	beq.n	800476e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800474a:	4a13      	ldr	r2, [pc, #76]	@ (8004798 <HAL_UART_IRQHandler+0x29c>)
 800474c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004752:	4618      	mov	r0, r3
 8004754:	f7fd fe5f 	bl	8002416 <HAL_DMA_Abort_IT>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d017      	beq.n	800478e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004768:	4610      	mov	r0, r2
 800476a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e00f      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f9d4 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	e00b      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f9d0 	bl	8004b1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	e007      	b.n	800478e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f9cc 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800478c:	e1b1      	b.n	8004af2 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478e:	bf00      	nop
    return;
 8004790:	e1af      	b.n	8004af2 <HAL_UART_IRQHandler+0x5f6>
 8004792:	bf00      	nop
 8004794:	04000120 	.word	0x04000120
 8004798:	080053d7 	.word	0x080053d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	f040 816a 	bne.w	8004a7a <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 8163 	beq.w	8004a7a <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047b8:	f003 0310 	and.w	r3, r3, #16
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 815c 	beq.w	8004a7a <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	2210      	movs	r2, #16
 80047c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b40      	cmp	r3, #64	@ 0x40
 80047d6:	f040 80d4 	bne.w	8004982 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047e6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 80ad 	beq.w	800494a <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80047f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f080 80a5 	bcs.w	800494a <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004806:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 8086 	bne.w	8004928 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004824:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004830:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004838:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	461a      	mov	r2, r3
 8004842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800484a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004852:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004856:	e841 2300 	strex	r3, r2, [r1]
 800485a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800485e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1da      	bne.n	800481c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	3308      	adds	r3, #8
 800486c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004870:	e853 3f00 	ldrex	r3, [r3]
 8004874:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004876:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004878:	f023 0301 	bic.w	r3, r3, #1
 800487c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	3308      	adds	r3, #8
 8004886:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800488a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800488e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004890:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004892:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800489c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1e1      	bne.n	8004866 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3308      	adds	r3, #8
 80048a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80048b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3308      	adds	r3, #8
 80048c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e3      	bne.n	80048a2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2220      	movs	r2, #32
 80048de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048f0:	e853 3f00 	ldrex	r3, [r3]
 80048f4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048f8:	f023 0310 	bic.w	r3, r3, #16
 80048fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	461a      	mov	r2, r3
 8004906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800490a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800490c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004910:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004918:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1e4      	bne.n	80048e8 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004922:	4618      	mov	r0, r3
 8004924:	f7fd fd39 	bl	800239a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2202      	movs	r2, #2
 800492c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800493a:	b29b      	uxth	r3, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	b29b      	uxth	r3, r3
 8004940:	4619      	mov	r1, r3
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f8f4 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004948:	e0d5      	b.n	8004af6 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004950:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004954:	429a      	cmp	r2, r3
 8004956:	f040 80ce 	bne.w	8004af6 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b20      	cmp	r3, #32
 8004968:	f040 80c5 	bne.w	8004af6 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004978:	4619      	mov	r1, r3
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f8d8 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
      return;
 8004980:	e0b9      	b.n	8004af6 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800498e:	b29b      	uxth	r3, r3
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800499c:	b29b      	uxth	r3, r3
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 80ab 	beq.w	8004afa <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80049a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 80a6 	beq.w	8004afa <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b6:	e853 3f00 	ldrex	r3, [r3]
 80049ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80049d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e4      	bne.n	80049ae <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3308      	adds	r3, #8
 80049ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	623b      	str	r3, [r7, #32]
   return(result);
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	f023 0301 	bic.w	r3, r3, #1
 80049fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3308      	adds	r3, #8
 8004a04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a08:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e3      	bne.n	80049e4 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f023 0310 	bic.w	r3, r3, #16
 8004a44:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a56:	69b9      	ldr	r1, [r7, #24]
 8004a58:	69fa      	ldr	r2, [r7, #28]
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	617b      	str	r3, [r7, #20]
   return(result);
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1e4      	bne.n	8004a30 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2202      	movs	r2, #2
 8004a6a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a70:	4619      	mov	r1, r3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f85c 	bl	8004b30 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a78:	e03f      	b.n	8004afa <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00e      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x5a8>
 8004a86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d008      	beq.n	8004aa4 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004a9a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 fcda 	bl	8005456 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004aa2:	e02d      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d00e      	beq.n	8004ace <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01c      	beq.n	8004afe <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	4798      	blx	r3
    }
    return;
 8004acc:	e017      	b.n	8004afe <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d012      	beq.n	8004b00 <HAL_UART_IRQHandler+0x604>
 8004ada:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d00c      	beq.n	8004b00 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fc8b 	bl	8005402 <UART_EndTransmit_IT>
    return;
 8004aec:	e008      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
      return;
 8004aee:	bf00      	nop
 8004af0:	e006      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
    return;
 8004af2:	bf00      	nop
 8004af4:	e004      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
      return;
 8004af6:	bf00      	nop
 8004af8:	e002      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
      return;
 8004afa:	bf00      	nop
 8004afc:	e000      	b.n	8004b00 <HAL_UART_IRQHandler+0x604>
    return;
 8004afe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004b00:	37e8      	adds	r7, #232	@ 0xe8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b10:	bf00      	nop
 8004b12:	370c      	adds	r7, #12
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr

08004b1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b24:	bf00      	nop
 8004b26:	370c      	adds	r7, #12
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b083      	sub	sp, #12
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b4c:	b08a      	sub	sp, #40	@ 0x28
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	431a      	orrs	r2, r3
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4bb4      	ldr	r3, [pc, #720]	@ (8004e48 <UART_SetConfig+0x300>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	68da      	ldr	r2, [r3, #12]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4aa9      	ldr	r2, [pc, #676]	@ (8004e4c <UART_SetConfig+0x304>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d004      	beq.n	8004bb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	6a1b      	ldr	r3, [r3, #32]
 8004bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4aa0      	ldr	r2, [pc, #640]	@ (8004e50 <UART_SetConfig+0x308>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d126      	bne.n	8004c20 <UART_SetConfig+0xd8>
 8004bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <UART_SetConfig+0x30c>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f003 0303 	and.w	r3, r3, #3
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d81b      	bhi.n	8004c18 <UART_SetConfig+0xd0>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <UART_SetConfig+0xa0>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004bf9 	.word	0x08004bf9
 8004bec:	08004c09 	.word	0x08004c09
 8004bf0:	08004c01 	.word	0x08004c01
 8004bf4:	08004c11 	.word	0x08004c11
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004bfe:	e080      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c00:	2302      	movs	r3, #2
 8004c02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c06:	e07c      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c08:	2304      	movs	r3, #4
 8004c0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c0e:	e078      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c10:	2308      	movs	r3, #8
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c16:	e074      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c18:	2310      	movs	r3, #16
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c1e:	e070      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a8c      	ldr	r2, [pc, #560]	@ (8004e58 <UART_SetConfig+0x310>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d138      	bne.n	8004c9c <UART_SetConfig+0x154>
 8004c2a:	4b8a      	ldr	r3, [pc, #552]	@ (8004e54 <UART_SetConfig+0x30c>)
 8004c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c30:	f003 030c 	and.w	r3, r3, #12
 8004c34:	2b0c      	cmp	r3, #12
 8004c36:	d82d      	bhi.n	8004c94 <UART_SetConfig+0x14c>
 8004c38:	a201      	add	r2, pc, #4	@ (adr r2, 8004c40 <UART_SetConfig+0xf8>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c75 	.word	0x08004c75
 8004c44:	08004c95 	.word	0x08004c95
 8004c48:	08004c95 	.word	0x08004c95
 8004c4c:	08004c95 	.word	0x08004c95
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004c95 	.word	0x08004c95
 8004c58:	08004c95 	.word	0x08004c95
 8004c5c:	08004c95 	.word	0x08004c95
 8004c60:	08004c7d 	.word	0x08004c7d
 8004c64:	08004c95 	.word	0x08004c95
 8004c68:	08004c95 	.word	0x08004c95
 8004c6c:	08004c95 	.word	0x08004c95
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c7a:	e042      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c82:	e03e      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	e03a      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c92:	e036      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004c9a:	e032      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6a      	ldr	r2, [pc, #424]	@ (8004e4c <UART_SetConfig+0x304>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d12a      	bne.n	8004cfc <UART_SetConfig+0x1b4>
 8004ca6:	4b6b      	ldr	r3, [pc, #428]	@ (8004e54 <UART_SetConfig+0x30c>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cac:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004cb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cb4:	d01a      	beq.n	8004cec <UART_SetConfig+0x1a4>
 8004cb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cba:	d81b      	bhi.n	8004cf4 <UART_SetConfig+0x1ac>
 8004cbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc0:	d00c      	beq.n	8004cdc <UART_SetConfig+0x194>
 8004cc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc6:	d815      	bhi.n	8004cf4 <UART_SetConfig+0x1ac>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <UART_SetConfig+0x18c>
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cd0:	d008      	beq.n	8004ce4 <UART_SetConfig+0x19c>
 8004cd2:	e00f      	b.n	8004cf4 <UART_SetConfig+0x1ac>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cda:	e012      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ce2:	e00e      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cea:	e00a      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cf2:	e006      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004cfa:	e002      	b.n	8004d02 <UART_SetConfig+0x1ba>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a51      	ldr	r2, [pc, #324]	@ (8004e4c <UART_SetConfig+0x304>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d17a      	bne.n	8004e02 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d824      	bhi.n	8004d5e <UART_SetConfig+0x216>
 8004d14:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <UART_SetConfig+0x1d4>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d41 	.word	0x08004d41
 8004d20:	08004d5f 	.word	0x08004d5f
 8004d24:	08004d49 	.word	0x08004d49
 8004d28:	08004d5f 	.word	0x08004d5f
 8004d2c:	08004d4f 	.word	0x08004d4f
 8004d30:	08004d5f 	.word	0x08004d5f
 8004d34:	08004d5f 	.word	0x08004d5f
 8004d38:	08004d5f 	.word	0x08004d5f
 8004d3c:	08004d57 	.word	0x08004d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d40:	f7fe fb4c 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004d44:	61f8      	str	r0, [r7, #28]
        break;
 8004d46:	e010      	b.n	8004d6a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d48:	4b44      	ldr	r3, [pc, #272]	@ (8004e5c <UART_SetConfig+0x314>)
 8004d4a:	61fb      	str	r3, [r7, #28]
        break;
 8004d4c:	e00d      	b.n	8004d6a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d4e:	f7fe faad 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8004d52:	61f8      	str	r0, [r7, #28]
        break;
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d5a:	61fb      	str	r3, [r7, #28]
        break;
 8004d5c:	e005      	b.n	8004d6a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 8107 	beq.w	8004f80 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	4413      	add	r3, r2
 8004d7c:	69fa      	ldr	r2, [r7, #28]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d305      	bcc.n	8004d8e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d88:	69fa      	ldr	r2, [r7, #28]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d903      	bls.n	8004d96 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004d94:	e0f4      	b.n	8004f80 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	461c      	mov	r4, r3
 8004d9c:	4615      	mov	r5, r2
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	022b      	lsls	r3, r5, #8
 8004da8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dac:	0222      	lsls	r2, r4, #8
 8004dae:	68f9      	ldr	r1, [r7, #12]
 8004db0:	6849      	ldr	r1, [r1, #4]
 8004db2:	0849      	lsrs	r1, r1, #1
 8004db4:	2000      	movs	r0, #0
 8004db6:	4688      	mov	r8, r1
 8004db8:	4681      	mov	r9, r0
 8004dba:	eb12 0a08 	adds.w	sl, r2, r8
 8004dbe:	eb43 0b09 	adc.w	fp, r3, r9
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd0:	4650      	mov	r0, sl
 8004dd2:	4659      	mov	r1, fp
 8004dd4:	f7fb f9fa 	bl	80001cc <__aeabi_uldivmod>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4613      	mov	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de6:	d308      	bcc.n	8004dfa <UART_SetConfig+0x2b2>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dee:	d204      	bcs.n	8004dfa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	60da      	str	r2, [r3, #12]
 8004df8:	e0c2      	b.n	8004f80 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004e00:	e0be      	b.n	8004f80 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0a:	d16a      	bne.n	8004ee2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d834      	bhi.n	8004e7e <UART_SetConfig+0x336>
 8004e14:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0x2d4>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e69 	.word	0x08004e69
 8004e28:	08004e7f 	.word	0x08004e7f
 8004e2c:	08004e6f 	.word	0x08004e6f
 8004e30:	08004e7f 	.word	0x08004e7f
 8004e34:	08004e7f 	.word	0x08004e7f
 8004e38:	08004e7f 	.word	0x08004e7f
 8004e3c:	08004e77 	.word	0x08004e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fe facc 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004e44:	61f8      	str	r0, [r7, #28]
        break;
 8004e46:	e020      	b.n	8004e8a <UART_SetConfig+0x342>
 8004e48:	efff69f3 	.word	0xefff69f3
 8004e4c:	40008000 	.word	0x40008000
 8004e50:	40013800 	.word	0x40013800
 8004e54:	40021000 	.word	0x40021000
 8004e58:	40004400 	.word	0x40004400
 8004e5c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e60:	f7fe fad2 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8004e64:	61f8      	str	r0, [r7, #28]
        break;
 8004e66:	e010      	b.n	8004e8a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e68:	4b4c      	ldr	r3, [pc, #304]	@ (8004f9c <UART_SetConfig+0x454>)
 8004e6a:	61fb      	str	r3, [r7, #28]
        break;
 8004e6c:	e00d      	b.n	8004e8a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6e:	f7fe fa1d 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8004e72:	61f8      	str	r0, [r7, #28]
        break;
 8004e74:	e009      	b.n	8004e8a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e7a:	61fb      	str	r3, [r7, #28]
        break;
 8004e7c:	e005      	b.n	8004e8a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004e88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d077      	beq.n	8004f80 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005a      	lsls	r2, r3, #1
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	441a      	add	r2, r3
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	2b0f      	cmp	r3, #15
 8004eaa:	d916      	bls.n	8004eda <UART_SetConfig+0x392>
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eb2:	d212      	bcs.n	8004eda <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb4:	69bb      	ldr	r3, [r7, #24]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f023 030f 	bic.w	r3, r3, #15
 8004ebc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	8afb      	ldrh	r3, [r7, #22]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	8afa      	ldrh	r2, [r7, #22]
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	e052      	b.n	8004f80 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ee0:	e04e      	b.n	8004f80 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ee6:	2b08      	cmp	r3, #8
 8004ee8:	d827      	bhi.n	8004f3a <UART_SetConfig+0x3f2>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0x3a8>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f15 	.word	0x08004f15
 8004ef4:	08004f1d 	.word	0x08004f1d
 8004ef8:	08004f25 	.word	0x08004f25
 8004efc:	08004f3b 	.word	0x08004f3b
 8004f00:	08004f2b 	.word	0x08004f2b
 8004f04:	08004f3b 	.word	0x08004f3b
 8004f08:	08004f3b 	.word	0x08004f3b
 8004f0c:	08004f3b 	.word	0x08004f3b
 8004f10:	08004f33 	.word	0x08004f33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f14:	f7fe fa62 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 8004f18:	61f8      	str	r0, [r7, #28]
        break;
 8004f1a:	e014      	b.n	8004f46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1c:	f7fe fa74 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8004f20:	61f8      	str	r0, [r7, #28]
        break;
 8004f22:	e010      	b.n	8004f46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <UART_SetConfig+0x454>)
 8004f26:	61fb      	str	r3, [r7, #28]
        break;
 8004f28:	e00d      	b.n	8004f46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2a:	f7fe f9bf 	bl	80032ac <HAL_RCC_GetSysClockFreq>
 8004f2e:	61f8      	str	r0, [r7, #28]
        break;
 8004f30:	e009      	b.n	8004f46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f36:	61fb      	str	r3, [r7, #28]
        break;
 8004f38:	e005      	b.n	8004f46 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004f44:	bf00      	nop
    }

    if (pclk != 0U)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d019      	beq.n	8004f80 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085a      	lsrs	r2, r3, #1
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	441a      	add	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	2b0f      	cmp	r3, #15
 8004f64:	d909      	bls.n	8004f7a <UART_SetConfig+0x432>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f6c:	d205      	bcs.n	8004f7a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	e002      	b.n	8004f80 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f8c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3728      	adds	r7, #40	@ 0x28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9a:	bf00      	nop
 8004f9c:	00f42400 	.word	0x00f42400

08004fa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f003 0308 	and.w	r3, r3, #8
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	430a      	orrs	r2, r1
 8004fc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	430a      	orrs	r2, r1
 800500c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00a      	beq.n	8005030 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	430a      	orrs	r2, r1
 800502e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005034:	f003 0310 	and.w	r3, r3, #16
 8005038:	2b00      	cmp	r3, #0
 800503a:	d00a      	beq.n	8005052 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005056:	f003 0320 	and.w	r3, r3, #32
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01a      	beq.n	80050b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800509e:	d10a      	bne.n	80050b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00a      	beq.n	80050d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	430a      	orrs	r2, r1
 80050d6:	605a      	str	r2, [r3, #4]
  }
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b098      	sub	sp, #96	@ 0x60
 80050e8:	af02      	add	r7, sp, #8
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050f4:	f7fb fdf4 	bl	8000ce0 <HAL_GetTick>
 80050f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d12e      	bne.n	8005166 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005108:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800510c:	9300      	str	r3, [sp, #0]
 800510e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005110:	2200      	movs	r2, #0
 8005112:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 f88c 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d021      	beq.n	8005166 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512a:	e853 3f00 	ldrex	r3, [r3]
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005132:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005136:	653b      	str	r3, [r7, #80]	@ 0x50
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	461a      	mov	r2, r3
 800513e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005140:	647b      	str	r3, [r7, #68]	@ 0x44
 8005142:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005146:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800514e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e6      	bne.n	8005122 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e062      	b.n	800522c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d149      	bne.n	8005208 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005174:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800517c:	2200      	movs	r2, #0
 800517e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f856 	bl	8005234 <UART_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d03c      	beq.n	8005208 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005196:	e853 3f00 	ldrex	r3, [r3]
 800519a:	623b      	str	r3, [r7, #32]
   return(result);
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80051ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b4:	e841 2300 	strex	r3, r2, [r1]
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d1e6      	bne.n	800518e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0301 	bic.w	r3, r3, #1
 80051d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3308      	adds	r3, #8
 80051de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051e0:	61fa      	str	r2, [r7, #28]
 80051e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	69b9      	ldr	r1, [r7, #24]
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	617b      	str	r3, [r7, #20]
   return(result);
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e5      	bne.n	80051c0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e011      	b.n	800522c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2220      	movs	r2, #32
 8005212:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3758      	adds	r7, #88	@ 0x58
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	603b      	str	r3, [r7, #0]
 8005240:	4613      	mov	r3, r2
 8005242:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005244:	e04f      	b.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d04b      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800524e:	f7fb fd47 	bl	8000ce0 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	69ba      	ldr	r2, [r7, #24]
 800525a:	429a      	cmp	r2, r3
 800525c:	d302      	bcc.n	8005264 <UART_WaitOnFlagUntilTimeout+0x30>
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e04e      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b00      	cmp	r3, #0
 8005274:	d037      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b80      	cmp	r3, #128	@ 0x80
 800527a:	d034      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d031      	beq.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	f003 0308 	and.w	r3, r3, #8
 800528c:	2b08      	cmp	r3, #8
 800528e:	d110      	bne.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2208      	movs	r2, #8
 8005296:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f000 f838 	bl	800530e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2208      	movs	r2, #8
 80052a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e029      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	69db      	ldr	r3, [r3, #28]
 80052b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052c0:	d111      	bne.n	80052e6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f000 f81e 	bl	800530e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e00f      	b.n	8005306 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	69da      	ldr	r2, [r3, #28]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4013      	ands	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	461a      	mov	r2, r3
 80052fe:	79fb      	ldrb	r3, [r7, #7]
 8005300:	429a      	cmp	r2, r3
 8005302:	d0a0      	beq.n	8005246 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005304:	2300      	movs	r3, #0
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530e:	b480      	push	{r7}
 8005310:	b095      	sub	sp, #84	@ 0x54
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800531e:	e853 3f00 	ldrex	r3, [r3]
 8005322:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005326:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800532a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	461a      	mov	r2, r3
 8005332:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
 8005336:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005338:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800533a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800533c:	e841 2300 	strex	r3, r2, [r1]
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1e6      	bne.n	8005316 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3308      	adds	r3, #8
 800534e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	e853 3f00 	ldrex	r3, [r3]
 8005356:	61fb      	str	r3, [r7, #28]
   return(result);
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	f023 0301 	bic.w	r3, r3, #1
 800535e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005368:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005370:	e841 2300 	strex	r3, r2, [r1]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	2b00      	cmp	r3, #0
 800537a:	d1e5      	bne.n	8005348 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005380:	2b01      	cmp	r3, #1
 8005382:	d118      	bne.n	80053b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	60bb      	str	r3, [r7, #8]
   return(result);
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f023 0310 	bic.w	r3, r3, #16
 8005398:	647b      	str	r3, [r7, #68]	@ 0x44
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a2:	61bb      	str	r3, [r7, #24]
 80053a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6979      	ldr	r1, [r7, #20]
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	613b      	str	r3, [r7, #16]
   return(result);
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e6      	bne.n	8005384 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80053ca:	bf00      	nop
 80053cc:	3754      	adds	r7, #84	@ 0x54
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7ff fb91 	bl	8004b1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b088      	sub	sp, #32
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	60bb      	str	r3, [r7, #8]
   return(result);
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6979      	ldr	r1, [r7, #20]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	613b      	str	r3, [r7, #16]
   return(result);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e6      	bne.n	800540a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7ff fb5d 	bl	8004b08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800544e:	bf00      	nop
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr

0800546a <memset>:
 800546a:	4402      	add	r2, r0
 800546c:	4603      	mov	r3, r0
 800546e:	4293      	cmp	r3, r2
 8005470:	d100      	bne.n	8005474 <memset+0xa>
 8005472:	4770      	bx	lr
 8005474:	f803 1b01 	strb.w	r1, [r3], #1
 8005478:	e7f9      	b.n	800546e <memset+0x4>
	...

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4d0d      	ldr	r5, [pc, #52]	@ (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	@ (80054b8 <__libc_init_array+0x3c>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2600      	movs	r6, #0
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4d0b      	ldr	r5, [pc, #44]	@ (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	@ (80054c0 <__libc_init_array+0x44>)
 8005490:	f000 f818 	bl	80054c4 <_init>
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2600      	movs	r6, #0
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	0800552c 	.word	0x0800552c
 80054b8:	0800552c 	.word	0x0800552c
 80054bc:	0800552c 	.word	0x0800552c
 80054c0:	08005530 	.word	0x08005530

080054c4 <_init>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	bf00      	nop
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr

080054d0 <_fini>:
 80054d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d2:	bf00      	nop
 80054d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054d6:	bc08      	pop	{r3}
 80054d8:	469e      	mov	lr, r3
 80054da:	4770      	bx	lr
